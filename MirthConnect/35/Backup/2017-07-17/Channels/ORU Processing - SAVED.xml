<channel version="3.4.2">
  <id>9b81980c-9c03-4c6d-bb30-46bd533aaed5</id>
  <nextMetaDataId>4</nextMetaDataId>
  <name>ORU Processing - SAVED</name>
  <description>LRI ORU_R01 processing downstream channel.
The channel receives ORU_R01 messages routed from the LRI getResults channel.

(SN) This channel should use Strict Parser for incoming HL7v2 ORU messages.

Last updated: March 25, 2017</description>
  <enabled>false</enabled>
  <lastModified>
    <time>1496778659466</time>
    <timezone>America/New_York</timezone>
  </lastModified>
  <revision>7</revision>
  <sourceConnector version="3.4.2">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.4.2">
      <pluginProperties/>
      <sourceConnectorProperties version="3.4.2">
        <responseVariable>None</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
    </properties>
    <transformer version="3.4.2">
      <steps>
        <step>
          <sequenceNumber>0</sequenceNumber>
          <name>Route ORU to Destination</name>
          <script>// Different HL7v2.x.x versions will be processed differently
var version = msg[&apos;MSH&apos;][&apos;MSH.12&apos;][&apos;VID.1&apos;].toString();

channelMap.put(&quot;MessageControlID&quot;, msg[&apos;MSH&apos;][&apos;MSH.10&apos;].toString());
 
if (&quot;2.5.1&quot; == version) {
	destinationSet.removeAllExcept([&quot;ORU_R01_2.5.1&quot;,&quot;FHIR_submit&quot;]);
	
} else if (&quot;2.3.1&quot; == version || &quot;2.3&quot; == version) {
	destinationSet.removeAllExcept([&quot;ORU_R01_2.3.x&quot;,&quot;FHIR_submit&quot;]);
	
} else {
	logger.error(&quot;ORU Processing: unknown ORU_R01 message version (MSH.12) - &quot; + version);
	destinationSet.removeAllExcept([&quot;FHIR_submit&quot;]);
}</script>
          <type>JavaScript</type>
          <data>
            <entry>
              <string>Script</string>
              <string>// Different HL7v2.x.x versions will be processed differently
var version = msg[&apos;MSH&apos;][&apos;MSH.12&apos;][&apos;VID.1&apos;].toString();

channelMap.put(&quot;MessageControlID&quot;, msg[&apos;MSH&apos;][&apos;MSH.10&apos;].toString());
 
if (&quot;2.5.1&quot; == version) {
	destinationSet.removeAllExcept([&quot;ORU_R01_2.5.1&quot;,&quot;FHIR_submit&quot;]);
	
} else if (&quot;2.3.1&quot; == version || &quot;2.3&quot; == version) {
	destinationSet.removeAllExcept([&quot;ORU_R01_2.3.x&quot;,&quot;FHIR_submit&quot;]);
	
} else {
	logger.error(&quot;ORU Processing: unknown ORU_R01 message version (MSH.12) - &quot; + version);
	destinationSet.removeAllExcept([&quot;FHIR_submit&quot;]);
}</string>
            </entry>
          </data>
        </step>
      </steps>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>HL7V2</inboundDataType>
      <outboundDataType>HL7V2</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.4.2">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.4.2">
          <handleRepetitions>true</handleRepetitions>
          <handleSubcomponents>true</handleSubcomponents>
          <useStrictParser>true</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <stripNamespaces>true</stripNamespaces>
          <segmentDelimiter>\r</segmentDelimiter>
          <convertLineBreaks>true</convertLineBreaks>
        </serializationProperties>
        <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.4.2">
          <useStrictParser>false</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <segmentDelimiter>\r</segmentDelimiter>
        </deserializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.4.2">
          <splitType>MSH_Segment</splitType>
          <batchScript></batchScript>
        </batchProperties>
        <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.4.2">
          <segmentDelimiter>\r</segmentDelimiter>
          <successfulACKCode>AA</successfulACKCode>
          <successfulACKMessage></successfulACKMessage>
          <errorACKCode>AE</errorACKCode>
          <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
          <rejectedACKCode>AR</rejectedACKCode>
          <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
          <msh15ACKAccept>false</msh15ACKAccept>
          <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
        </responseGenerationProperties>
        <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.4.2">
          <successfulACKCode>AA,CA</successfulACKCode>
          <errorACKCode>AE,CE</errorACKCode>
          <rejectedACKCode>AR,CR</rejectedACKCode>
          <validateMessageControlId>true</validateMessageControlId>
          <originalMessageControlId>Destination_Encoded</originalMessageControlId>
          <originalIdMapVariable></originalIdMapVariable>
        </responseValidationProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.4.2">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.4.2">
          <handleRepetitions>true</handleRepetitions>
          <handleSubcomponents>true</handleSubcomponents>
          <useStrictParser>true</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <stripNamespaces>true</stripNamespaces>
          <segmentDelimiter>\r</segmentDelimiter>
          <convertLineBreaks>true</convertLineBreaks>
        </serializationProperties>
        <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.4.2">
          <useStrictParser>true</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <segmentDelimiter>\r</segmentDelimiter>
        </deserializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.4.2">
          <splitType>MSH_Segment</splitType>
          <batchScript></batchScript>
        </batchProperties>
        <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.4.2">
          <segmentDelimiter>\r</segmentDelimiter>
          <successfulACKCode>AA</successfulACKCode>
          <successfulACKMessage></successfulACKMessage>
          <errorACKCode>AE</errorACKCode>
          <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
          <rejectedACKCode>AR</rejectedACKCode>
          <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
          <msh15ACKAccept>false</msh15ACKAccept>
          <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
        </responseGenerationProperties>
        <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.4.2">
          <successfulACKCode>AA,CA</successfulACKCode>
          <errorACKCode>AE,CE</errorACKCode>
          <rejectedACKCode>AR,CR</rejectedACKCode>
          <validateMessageControlId>true</validateMessageControlId>
          <originalMessageControlId>Destination_Encoded</originalMessageControlId>
          <originalIdMapVariable></originalIdMapVariable>
        </responseValidationProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.4.2">
      <rules>
        <rule>
          <sequenceNumber>0</sequenceNumber>
          <name>Check for ORU messages</name>
          <data>
            <entry>
              <string>Script</string>
              <string>// Continue processing only if the incoming message is ORU_R01
if(&quot;ORU&quot; == msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSG.1&apos;].toString() &amp;&amp; &quot;R01&quot; == msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSG.2&apos;].toString()) {
	return true;
} else {
	logger.debug(&quot;ORU Processing: non-ORU message is rejected &quot; + msg.toString());
	return false;
}</string>
            </entry>
          </data>
          <type>JavaScript</type>
          <script>// Continue processing only if the incoming message is ORU_R01
if(&quot;ORU&quot; == msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSG.1&apos;].toString() &amp;&amp; &quot;R01&quot; == msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSG.2&apos;].toString()) {
	return true;
} else {
	logger.debug(&quot;ORU Processing: non-ORU message is rejected &quot; + msg.toString());
	return false;
}</script>
          <operator>NONE</operator>
        </rule>
      </rules>
    </filter>
    <transportName>Channel Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.4.2">
      <metaDataId>1</metaDataId>
      <name>ORU_R01_2.5.1</name>
      <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <channelId>none</channelId>
        <channelTemplate>${message.encodedData}</channelTemplate>
        <mapVariables/>
      </properties>
      <transformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>Patient resource</name>
            <script>// Mar 16: &lt;value value=&quot;&quot;/&gt; removed from identifier


var resPatient = &lt;Patient&gt;
			&lt;id value=&quot;PID-patient-identification&quot;/&gt;
			&lt;text&gt;
				&lt;status value=&quot;generated&quot;/&gt;
				&lt;xhtml:div xmlns:xhtml=&quot;http://www.w3.org/1999/xhtml&quot;/&gt;
			&lt;/text&gt;			
			&lt;identifier&gt;
				&lt;use value=&quot;official&quot;/&gt;				
			&lt;/identifier&gt;
			&lt;name&gt;
				&lt;use value=&quot;official&quot;/&gt;
				&lt;family value=&quot;&quot;/&gt;
			&lt;/name&gt;
				&lt;telecom&gt;
					&lt;system value=&quot;phone&quot;/&gt;
					&lt;value value=&quot;&quot;/&gt;
					&lt;use value=&quot;home&quot;/&gt;
				&lt;/telecom&gt;
			&lt;gender value=&quot;&quot;/&gt;
			&lt;birthDate value=&quot;&quot;/&gt;
			&lt;address&gt;
				&lt;use value=&quot;home&quot;/&gt;
			&lt;/address&gt;
		&lt;/Patient&gt;;


// Process NTE segments
// (SN) Known deficiency - &quot;p&quot; element namespace is not bound, must be &quot;xhtml:p&quot;  
resPatient.text.*::div.* = new XMLList();
var 	patientComment = false;
for each (var nte in msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;].children()) {
	if (&quot;NTE&quot; == nte.name().toString()) {

		patientComment = true;
		
		// Source of Comment - Optional
		var commentSources = [&quot;L&quot;,&quot;P&quot;,&quot;O&quot;];
		var source = nte[&apos;NTE.2&apos;].toString();
		
		// Comments that are contained in the segment - Required
		var comment = nte[&apos;NTE.3&apos;].toString();

		if (commentSources.indexOf(source) &gt; -1) {	
			resPatient.text.*::div.* += new XML(&apos;&lt;p class=&quot;&apos; + source + &apos;&quot;&gt;&apos; + stripNonValidXMLChars(comment) +&apos;&lt;/p&gt;&apos;);
		} else {
			resPatient.text.*::div.* += new XML(&apos;&lt;p&gt;&apos; + stripNonValidXMLChars(comment) +&apos;&lt;/p&gt;&apos;);	
		}
	}
}

if (!patientComment) delete resPatient.text;

// Patient Quest360 identifier list (repeatable)
// (SN)  Only first PID.3.1 [ID Number] is mapped in this version
var identifierTypeCode = msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.3&apos;][&apos;CX.5&apos;].toString();
if (identifierTypeCode) {
	resPatient.identifier.type.coding.code.@value = identifierTypeCode;
}

//======================= ~~ RKW IMPORTANT: This is where the patient SAFE ID is found
// Quest identifier - Required
var patientID = msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.3&apos;][&apos;CX.1&apos;].toString();
resPatient.identifier.(use.@value == &quot;official&quot;).value.@value = patientID;


// Patient name (repeatable)
// (SN) PID.5.4 [Suffix], PID.5.5 [Preffix] and PID.5.7 [Name Type Code] are not mapped in this version
// (SN) Additional coding (as per p.458) is not used in this version
var familyName = msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.5&apos;][&apos;XPN.1&apos;][&apos;FN.1&apos;].toString();
if (familyName) {
	resPatient.name.* = new XMLList();
	resPatient.name.* += new XML(&apos;&lt;family value=&quot;&apos; + familyName +&apos;&quot;/&gt;&apos;);

	var given = msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.5&apos;][&apos;XPN.2&apos;].toString();
	if (given)
		resPatient.name.* += new XML(&apos;&lt;given value=&quot;&apos; + given +&apos;&quot;/&gt;&apos;);
	
	given = msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.5&apos;][&apos;XPN.3&apos;].toString();
	if (given)
		resPatient.name.* += new XML(&apos;&lt;given value=&quot;&apos; + given +&apos;&quot;/&gt;&apos;);	
} else {
	// (SN) This should never happen since Family Name is Required
	delete resPatient.name;
}

// Patient Home Phone (repeatable)
// (SN) Only first PID.13.6 [Area/City Code] and PID.13.7 [Local Number] are used in this version
var telecom = &quot;(&quot; + msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.13&apos;][&apos;XTN.6&apos;].toString() + &quot;) &quot; +
convertPhone(msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.13&apos;][&apos;XTN.7&apos;].toString());
if (telecom.length &gt; 4) {
	resPatient.telecom.value.@value = telecom;
} else delete resPatient.telecom;


// Date of birth is HL7v2 RE (Required or Empty)
var dob = msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.7&apos;][&apos;TS.1&apos;].toString();
if (dob) {
	resPatient.birthDate.@value = convertHL7DateTime(dob);
} else {
	resPatient.birthDate.@value = &quot;0000-00-00&quot;;
}

// Convert administrative sex into FHIR value set
var gender = msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.8&apos;].toString().toUpperCase();
resPatient.gender.@value = getGenderValue(gender);


// Patient Address (repeatable)
// (SN) Only first PID.11 [Patient Address] is used in this version
var addressInUse = false;
var line = msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.11&apos;][&apos;XAD.1&apos;][&apos;SAD.1&apos;].toString();
if (line) {
	addressInUse = true;
	resPatient.address.line.@value = line;
}

var city = msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.11&apos;][&apos;XAD.3&apos;].toString();
if (city) {
	addressInUse = true;
	resPatient.address.city.@value = city;
}

var district = msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.11&apos;][&apos;XAD.9&apos;].toString();
if (district) {
	addressInUse = true;
	resPatient.address.district.@value = district;
}

var state = msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.11&apos;][&apos;XAD.4&apos;].toString();
if (state) {
	addressInUse = true;
	resPatient.address.state.@value = state;
}

var postalCode = msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.11&apos;][&apos;XAD.5&apos;].toString();
if (postalCode) {
	addressInUse = true;
	resPatient.address.postalCode.@value = postalCode;
}

var country = msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.11&apos;][&apos;XAD.6&apos;].toString();
if (country) {
	addressInUse = true;
	resPatient.address.country.@value = country;
}

if (!addressInUse) delete resPatient.address;

// ============================ RKW ~~ New Stuff

importPackage(Packages.ca.uhn.fhir.context);
importPackage(Packages.ca.uhn.fhir.model.dstu2.resource);
importPackage(Packages.ca.uhn.fhir.rest.api);
importPackage(Packages.ca.uhn.fhir.rest.client);

var Url = configurationMap.get(&apos;sparkRawURL&apos;)

var ctx = Packages.ca.uhn.fhir.context.FhirContext.forDstu2();
var client = ctx.newRestfulGenericClient( Url );
		
ctx.getRestfulClientFactory().setSocketTimeout(60 * 1000); 
ctx.getRestfulClientFactory().setConnectTimeout(60 * 1000); 
channelMap.put( &quot;ctx&quot;, ctx );

var patientSearchResults = client
	.search()
	.forResource(Patient)
	.where(Packages.ca.uhn.fhir.model.dstu2.resource.Patient.IDENTIFIER.exactly().identifier( patientID ))
	.returnBundle(Bundle)
	.execute();

var ms = patientSearchResults.getEntry();

var msSize = ms.size();

var patientResource;
var patientString;

if( msSize )
{
	var patientResource = ms.get(0).getResource();
	var patientString = ctx.newJsonParser().encodeResourceToString(patientResource);
	
//	logger.error( &quot;Patient: \n&quot; + patientResource.getIdentifier().get(0).getValue() );
//	logger.error( &quot;Patient: \n&quot; + patientString );	
}
else
{
	throw &quot;ORU Processing: Patient Not Found&quot;;
}

var PatientSource = JSON.parse( patientString );
channelMap.put(&quot;PatientResourceID&quot;, PatientSource.id );


 //=========================================================== ~~ RKW Leave - this is part of old code
// Store Patient resource to be processed by FHIR_Submit destination
channelMap.put(&quot;Patient&quot;, resPatient);</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>// Mar 16: &lt;value value=&quot;&quot;/&gt; removed from identifier


var resPatient = &lt;Patient&gt;
			&lt;id value=&quot;PID-patient-identification&quot;/&gt;
			&lt;text&gt;
				&lt;status value=&quot;generated&quot;/&gt;
				&lt;xhtml:div xmlns:xhtml=&quot;http://www.w3.org/1999/xhtml&quot;/&gt;
			&lt;/text&gt;			
			&lt;identifier&gt;
				&lt;use value=&quot;official&quot;/&gt;				
			&lt;/identifier&gt;
			&lt;name&gt;
				&lt;use value=&quot;official&quot;/&gt;
				&lt;family value=&quot;&quot;/&gt;
			&lt;/name&gt;
				&lt;telecom&gt;
					&lt;system value=&quot;phone&quot;/&gt;
					&lt;value value=&quot;&quot;/&gt;
					&lt;use value=&quot;home&quot;/&gt;
				&lt;/telecom&gt;
			&lt;gender value=&quot;&quot;/&gt;
			&lt;birthDate value=&quot;&quot;/&gt;
			&lt;address&gt;
				&lt;use value=&quot;home&quot;/&gt;
			&lt;/address&gt;
		&lt;/Patient&gt;;


// Process NTE segments
// (SN) Known deficiency - &quot;p&quot; element namespace is not bound, must be &quot;xhtml:p&quot;  
resPatient.text.*::div.* = new XMLList();
var 	patientComment = false;
for each (var nte in msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;].children()) {
	if (&quot;NTE&quot; == nte.name().toString()) {

		patientComment = true;
		
		// Source of Comment - Optional
		var commentSources = [&quot;L&quot;,&quot;P&quot;,&quot;O&quot;];
		var source = nte[&apos;NTE.2&apos;].toString();
		
		// Comments that are contained in the segment - Required
		var comment = nte[&apos;NTE.3&apos;].toString();

		if (commentSources.indexOf(source) &gt; -1) {	
			resPatient.text.*::div.* += new XML(&apos;&lt;p class=&quot;&apos; + source + &apos;&quot;&gt;&apos; + stripNonValidXMLChars(comment) +&apos;&lt;/p&gt;&apos;);
		} else {
			resPatient.text.*::div.* += new XML(&apos;&lt;p&gt;&apos; + stripNonValidXMLChars(comment) +&apos;&lt;/p&gt;&apos;);	
		}
	}
}

if (!patientComment) delete resPatient.text;

// Patient Quest360 identifier list (repeatable)
// (SN)  Only first PID.3.1 [ID Number] is mapped in this version
var identifierTypeCode = msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.3&apos;][&apos;CX.5&apos;].toString();
if (identifierTypeCode) {
	resPatient.identifier.type.coding.code.@value = identifierTypeCode;
}

//======================= ~~ RKW IMPORTANT: This is where the patient SAFE ID is found
// Quest identifier - Required
var patientID = msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.3&apos;][&apos;CX.1&apos;].toString();
resPatient.identifier.(use.@value == &quot;official&quot;).value.@value = patientID;


// Patient name (repeatable)
// (SN) PID.5.4 [Suffix], PID.5.5 [Preffix] and PID.5.7 [Name Type Code] are not mapped in this version
// (SN) Additional coding (as per p.458) is not used in this version
var familyName = msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.5&apos;][&apos;XPN.1&apos;][&apos;FN.1&apos;].toString();
if (familyName) {
	resPatient.name.* = new XMLList();
	resPatient.name.* += new XML(&apos;&lt;family value=&quot;&apos; + familyName +&apos;&quot;/&gt;&apos;);

	var given = msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.5&apos;][&apos;XPN.2&apos;].toString();
	if (given)
		resPatient.name.* += new XML(&apos;&lt;given value=&quot;&apos; + given +&apos;&quot;/&gt;&apos;);
	
	given = msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.5&apos;][&apos;XPN.3&apos;].toString();
	if (given)
		resPatient.name.* += new XML(&apos;&lt;given value=&quot;&apos; + given +&apos;&quot;/&gt;&apos;);	
} else {
	// (SN) This should never happen since Family Name is Required
	delete resPatient.name;
}

// Patient Home Phone (repeatable)
// (SN) Only first PID.13.6 [Area/City Code] and PID.13.7 [Local Number] are used in this version
var telecom = &quot;(&quot; + msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.13&apos;][&apos;XTN.6&apos;].toString() + &quot;) &quot; +
convertPhone(msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.13&apos;][&apos;XTN.7&apos;].toString());
if (telecom.length &gt; 4) {
	resPatient.telecom.value.@value = telecom;
} else delete resPatient.telecom;


// Date of birth is HL7v2 RE (Required or Empty)
var dob = msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.7&apos;][&apos;TS.1&apos;].toString();
if (dob) {
	resPatient.birthDate.@value = convertHL7DateTime(dob);
} else {
	resPatient.birthDate.@value = &quot;0000-00-00&quot;;
}

// Convert administrative sex into FHIR value set
var gender = msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.8&apos;].toString().toUpperCase();
resPatient.gender.@value = getGenderValue(gender);


// Patient Address (repeatable)
// (SN) Only first PID.11 [Patient Address] is used in this version
var addressInUse = false;
var line = msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.11&apos;][&apos;XAD.1&apos;][&apos;SAD.1&apos;].toString();
if (line) {
	addressInUse = true;
	resPatient.address.line.@value = line;
}

var city = msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.11&apos;][&apos;XAD.3&apos;].toString();
if (city) {
	addressInUse = true;
	resPatient.address.city.@value = city;
}

var district = msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.11&apos;][&apos;XAD.9&apos;].toString();
if (district) {
	addressInUse = true;
	resPatient.address.district.@value = district;
}

var state = msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.11&apos;][&apos;XAD.4&apos;].toString();
if (state) {
	addressInUse = true;
	resPatient.address.state.@value = state;
}

var postalCode = msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.11&apos;][&apos;XAD.5&apos;].toString();
if (postalCode) {
	addressInUse = true;
	resPatient.address.postalCode.@value = postalCode;
}

var country = msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.11&apos;][&apos;XAD.6&apos;].toString();
if (country) {
	addressInUse = true;
	resPatient.address.country.@value = country;
}

if (!addressInUse) delete resPatient.address;

// ============================ RKW ~~ New Stuff

importPackage(Packages.ca.uhn.fhir.context);
importPackage(Packages.ca.uhn.fhir.model.dstu2.resource);
importPackage(Packages.ca.uhn.fhir.rest.api);
importPackage(Packages.ca.uhn.fhir.rest.client);

var Url = configurationMap.get(&apos;sparkRawURL&apos;)

var ctx = Packages.ca.uhn.fhir.context.FhirContext.forDstu2();
var client = ctx.newRestfulGenericClient( Url );
		
ctx.getRestfulClientFactory().setSocketTimeout(60 * 1000); 
ctx.getRestfulClientFactory().setConnectTimeout(60 * 1000); 
channelMap.put( &quot;ctx&quot;, ctx );

var patientSearchResults = client
	.search()
	.forResource(Patient)
	.where(Packages.ca.uhn.fhir.model.dstu2.resource.Patient.IDENTIFIER.exactly().identifier( patientID ))
	.returnBundle(Bundle)
	.execute();

var ms = patientSearchResults.getEntry();

var msSize = ms.size();

var patientResource;
var patientString;

if( msSize )
{
	var patientResource = ms.get(0).getResource();
	var patientString = ctx.newJsonParser().encodeResourceToString(patientResource);
	
//	logger.error( &quot;Patient: \n&quot; + patientResource.getIdentifier().get(0).getValue() );
//	logger.error( &quot;Patient: \n&quot; + patientString );	
}
else
{
	throw &quot;ORU Processing: Patient Not Found&quot;;
}

var PatientSource = JSON.parse( patientString );
channelMap.put(&quot;PatientResourceID&quot;, PatientSource.id );


 //=========================================================== ~~ RKW Leave - this is part of old code
// Store Patient resource to be processed by FHIR_Submit destination
channelMap.put(&quot;Patient&quot;, resPatient);</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>1</sequenceNumber>
            <name>Specimen resource</name>
            <script>var arrSpecimen = [];

for each (var spm in msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.ORDER_OBSERVATION&apos;][&apos;ORU_R01.SPECIMEN&apos;].children() ) {

	var resSpecimen = &lt;Specimen&gt;
					&lt;id value=&quot;&quot;/&gt;
					&lt;type&gt;
						&lt;text value=&quot;&quot;/&gt;
					&lt;/type&gt;
					&lt;subject id=&quot;Patient&quot;/&gt;
					&lt;receivedTime value=&quot;&quot;/&gt;
					&lt;collection&gt;
						&lt;collectedDateTime value=&quot;&quot;/&gt;
						&lt;quantity&gt;
							&lt;value value=&quot;&quot;/&gt;
						&lt;/quantity&gt;
					&lt;/collection&gt;
				&lt;/Specimen&gt;;

	// (SN) Issue #1 - similar Specimen id, Issue #10 - empty Specimen Id
	resSpecimen.id.@value = &quot;spm-specimen-&quot; + spm[&apos;SPM.2&apos;][&apos;EIP.1&apos;][&apos;EI.1&apos;].toString() + &quot;-&quot; + spm[&apos;SPM.2&apos;][&apos;EIP.2&apos;][&apos;EI.1&apos;].toString();

	resSpecimen.type.text.@value = spm[&apos;SPM.4&apos;][&apos;CWE.1&apos;].toString() + &quot;^&quot; + spm[&apos;SPM.4&apos;][&apos;CWE.2&apos;].toString() + &quot;^&quot; + spm[&apos;SPM.4&apos;][&apos;CWE.3&apos;].toString();

	var specimenCollectionDateTime = spm[&apos;SPM.17&apos;][&apos;DR.1&apos;][&apos;TS.1&apos;].toString();
	if (specimenCollectionDateTime) {
		resSpecimen.collection.collectedDateTime.@value = convertHL7DateTime(specimenCollectionDateTime);		
	} else delete resSpecimen.collection.collectedDateTime;

	var specimenReceivedDateTime = spm[&apos;SPM.18&apos;][&apos;TS.1&apos;].toString();
	if (specimenReceivedDateTime) {
		resSpecimen.receivedTime.@value = convertHL7DateTime(specimenReceivedDateTime);		
	} else delete resSpecimen.receivedTime;

	var specimenCollectionAmount = spm[&apos;SPM.12&apos;][&apos;CQ.1&apos;].toString();
	if (specimenCollectionAmount) {
		resSpecimen.collection.quantity.value.@value = specimenCollectionAmount;		
	} else delete resSpecimen.collection.quantity;

	if (specimenCollectionDateTime.length == 0 &amp;&amp; specimenCollectionAmount.length == 0) delete resSpecimen.collection;

	arrSpecimen.push(resSpecimen.toString());
}

// Store Specimen resource to be processed by FHIR_Submit destination
channelMap.put(&quot;Specimen&quot;, arrSpecimen);</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>var arrSpecimen = [];

for each (var spm in msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.ORDER_OBSERVATION&apos;][&apos;ORU_R01.SPECIMEN&apos;].children() ) {

	var resSpecimen = &lt;Specimen&gt;
					&lt;id value=&quot;&quot;/&gt;
					&lt;type&gt;
						&lt;text value=&quot;&quot;/&gt;
					&lt;/type&gt;
					&lt;subject id=&quot;Patient&quot;/&gt;
					&lt;receivedTime value=&quot;&quot;/&gt;
					&lt;collection&gt;
						&lt;collectedDateTime value=&quot;&quot;/&gt;
						&lt;quantity&gt;
							&lt;value value=&quot;&quot;/&gt;
						&lt;/quantity&gt;
					&lt;/collection&gt;
				&lt;/Specimen&gt;;

	// (SN) Issue #1 - similar Specimen id, Issue #10 - empty Specimen Id
	resSpecimen.id.@value = &quot;spm-specimen-&quot; + spm[&apos;SPM.2&apos;][&apos;EIP.1&apos;][&apos;EI.1&apos;].toString() + &quot;-&quot; + spm[&apos;SPM.2&apos;][&apos;EIP.2&apos;][&apos;EI.1&apos;].toString();

	resSpecimen.type.text.@value = spm[&apos;SPM.4&apos;][&apos;CWE.1&apos;].toString() + &quot;^&quot; + spm[&apos;SPM.4&apos;][&apos;CWE.2&apos;].toString() + &quot;^&quot; + spm[&apos;SPM.4&apos;][&apos;CWE.3&apos;].toString();

	var specimenCollectionDateTime = spm[&apos;SPM.17&apos;][&apos;DR.1&apos;][&apos;TS.1&apos;].toString();
	if (specimenCollectionDateTime) {
		resSpecimen.collection.collectedDateTime.@value = convertHL7DateTime(specimenCollectionDateTime);		
	} else delete resSpecimen.collection.collectedDateTime;

	var specimenReceivedDateTime = spm[&apos;SPM.18&apos;][&apos;TS.1&apos;].toString();
	if (specimenReceivedDateTime) {
		resSpecimen.receivedTime.@value = convertHL7DateTime(specimenReceivedDateTime);		
	} else delete resSpecimen.receivedTime;

	var specimenCollectionAmount = spm[&apos;SPM.12&apos;][&apos;CQ.1&apos;].toString();
	if (specimenCollectionAmount) {
		resSpecimen.collection.quantity.value.@value = specimenCollectionAmount;		
	} else delete resSpecimen.collection.quantity;

	if (specimenCollectionDateTime.length == 0 &amp;&amp; specimenCollectionAmount.length == 0) delete resSpecimen.collection;

	arrSpecimen.push(resSpecimen.toString());
}

// Store Specimen resource to be processed by FHIR_Submit destination
channelMap.put(&quot;Specimen&quot;, arrSpecimen);</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>2</sequenceNumber>
            <name>DiagnosticReport resource</name>
            <script>var arrDiagnosticReport = [];
var arrOrderingProvider = [];
var arrProviderID = [];

/*
* (SN) Practitioner resource for Performing Organization or Medical Doctor is not mapped (see comments below)
*
*/ 

for each (var observation in msg[&apos;ORU_R01.PATIENT_RESULT&apos;].children()) {

	var resDiagnosticReport = &lt;DiagnosticReport&gt;
							&lt;text&gt;
								&lt;status value=&quot;generated&quot;/&gt;
								&lt;xhtml:div xmlns:xhtml=&quot;http://www.w3.org/1999/xhtml&quot;/&gt;
							&lt;/text&gt;
						&lt;/DiagnosticReport&gt;;
	
	// Process only ORC-OBR-OBX group
	if (observation[&apos;ORC&apos;][&apos;ORC.1&apos;].toString() != &quot;RE&quot;) { continue; }


	// Reference to contained observations
	for each (var obs in observation[&apos;ORU_R01.OBSERVATION&apos;].children()) 
	{
		if (&quot;OBX&quot; == obs.name().toString() &amp;&amp; obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString() != &quot;&quot;)
		{
			logger.error( &quot;OBX Found: &quot; + obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString())
			var id = obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString();
			var resultReference = &lt;contained&gt;
									&lt;Observation&gt;
										&lt;id value=&quot;&quot;/&gt;
									&lt;/Observation&gt;
								&lt;/contained&gt;;
			resultReference.reference.@value = id;
			resDiagnosticReport.appendChild(resultReference);	
		}
	}

//	resDiagnosticReport.id.@value = observation[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;EI.1&apos;].toString(); // Filler Order ID ~~ RKW: Fatal Gross Conceptual Error

	// Process Observation Request (OBR) level NTE segments
	// (SN) Known deficiency - &quot;p&quot; element namespace is not bound, must be &quot;xhtml:p&quot; 
	// March 14 2017: Issue #3 &quot;Comments appear twice&quot; fixed 
	resDiagnosticReport.text.*::div.* = new XMLList();
	var observationComment = false;	

	// Extract ORC-OBR-OBX group related comments only
	var orderObservationGroup = new XML(observation.toString());
	
	// March 14: This returns all children and grandchildren NTE segments of the this object
	for each (var nte in orderObservationGroup.descendants(&quot;NTE&quot;)) { 
		
		if (&quot;NTE&quot; == nte.name().toString()) {

			observationComment = true;

			// March 14, 2017: Comment source depends on the group and appended as a prefix 
			var prefix = &quot;&quot;;
			if (nte.parent().name().toString().indexOf(&quot;.ORDER_OBSERVATION&quot;) &gt; -1) {
				prefix = &quot;OBR&quot;;
			} else if (nte.parent().name().toString().indexOf(&quot;.OBSERVATION&quot;) &gt; -1) {
				prefix = &quot;OBX&quot;;
			}
			
			// Source of Comment - Optional
			var commentSources = [&quot;L&quot;,&quot;P&quot;,&quot;O&quot;];
			var source = nte[&apos;NTE.2&apos;].toString();
			
			// Comments contained in the segment - Required
			var comment = nte[&apos;NTE.3&apos;].toString();

			if (commentSources.indexOf(source) &gt; -1) {	
				resDiagnosticReport.text.*::div.* += new XML(&apos;&lt;p class=&quot;&apos; + prefix + &apos;-&apos; + source + &apos;&quot;&gt;&apos; + stripNonValidXMLChars(comment) +&apos;&lt;/p&gt;&apos;);
			} else {
				resDiagnosticReport.text.*::div.* += new XML(&apos;&lt;p class=&quot;&apos; + prefix + &apos;&quot;&gt;&apos; + stripNonValidXMLChars(comment) +&apos;&lt;/p&gt;&apos;);	
			}
		}
	}

	if (!observationComment) delete resDiagnosticReport.text;

	// Process single OBR segment
	resDiagnosticReport.appendChild(new XML(&quot;&lt;contained&gt;&quot; + getDiagnosticOrder(observation) + &quot;&lt;/contained&gt;&quot;));

	// Process Ordering Provider
	// (SN) Add only if such Ordering Provider is not in the list already
//	var provID =  observation[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.1&apos;].toString();
//	if (arrProviderID.indexOf(provID) &lt; 0) {
//		arrOrderingProvider.push(getOrderingProvider(observation));
//		arrProviderID.push(provID);
//	}

	// Process multiple OBX segments
	for each (var obs in observation[&apos;ORU_R01.OBSERVATION&apos;].children()) {
		if (&quot;OBX&quot; == obs.name().toString()) {

			// OBX segments nested under DiagnosticReport as contained resources
			resDiagnosticReport.appendChild(new XML(&quot;&lt;contained&gt;&quot; + getObservationResource(obs) + &quot;&lt;/contained&gt;&quot;));

			// March 14 2017: Process Performing Organization: OBX.23, OBX.24, OBX.25
			var performingOrganization = new XML( getPerformingProvider(obs) );
			if (performingOrganization.contained.Organization) {
				var performID = performingOrganization.contained.Organization.identifier.value.@value.toString();
				if (arrProviderID.indexOf(performID) &lt; 0) {
					arrOrderingProvider.push(performingOrganization.toString());
					arrProviderID.push(performID);
				}
			}
		}	
	}	

	// Placer Order Number - If populated, this field contains the placer application’s order number.
	if (observation[&apos;ORC&apos;][&apos;ORC.2&apos;][&apos;EI.1&apos;].toString()) {
		var identifier1 = &lt;identifier&gt;
						&lt;type id=&quot;99QDI&quot;/&gt;
						&lt;system value=&quot;&quot;/&gt;
						&lt;value value=&quot;&quot;/&gt;
					&lt;/identifier&gt;;
		identifier1.value.@value = observation[&apos;ORC&apos;][&apos;ORC.2&apos;][&apos;EI.1&apos;].toString();
		identifier1.system.@value = observation[&apos;ORC&apos;][&apos;ORC.2&apos;][&apos;EI.2&apos;].toString();
		resDiagnosticReport.appendChild(identifier1);
	}

	// Filler Order Number - The order number associated with the filler’s application. 
	if (observation[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;EI.1&apos;].toString()) {
		var identifier2 = &lt;identifier&gt;
						&lt;type id=&quot;99QDI&quot;/&gt;
						&lt;system value=&quot;&quot;/&gt;
						&lt;value value=&quot;&quot;/&gt;
					&lt;/identifier&gt;;
		identifier2.value.@value = observation[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;EI.1&apos;].toString();
		identifier2.system.@value = observation[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;EI.2&apos;].toString();
		resDiagnosticReport.appendChild(identifier2);		
	}

	// Order Status - Indicates whether the result is partial or final.
	// March 25 2017: updated to pass API validation (see Terminology Mapping spreadsheet)
	var statusCode = observation[&apos;ORC&apos;][&apos;ORC.5&apos;].toString();
	if (statusCode) {
		var statusXML = &lt;status value=&quot;final&quot;&gt;
						&lt;extension url=&quot;http://hl7.org/fhir/ValueSet&quot;&gt;
							&lt;valueCodeableConcept&gt;
								&lt;coding&gt;
									&lt;system value=&quot;http://hl7.org/fhir/ValueSet/v2-0038&quot;/&gt;
									&lt;code value=&quot;&quot;/&gt;
									&lt;display value=&quot;&quot;/&gt;
								&lt;/coding&gt;
							&lt;/valueCodeableConcept&gt;
						&lt;/extension&gt;
					&lt;/status&gt;;
		statusXML.extension.valueCodeableConcept.coding.code.@value = statusCode;
		statusXML.extension.valueCodeableConcept.coding.display.@value = getHL7v2CodeDescription(&quot;0038&quot;, statusCode);
		resDiagnosticReport.appendChild(statusXML);
	}

	resDiagnosticReport.code.@id = observation[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;EI.1&apos;].toString();

	// Hard-coded, required by FHIR
	resDiagnosticReport.appendChild(new XML(&apos;&lt;subject&gt;&lt;reference value=&quot;Patient&quot;/&gt;&lt;/subject&gt;&apos;));

	// Observation Date/Time
	resDiagnosticReport.effectiveDateTime.@value = convertHL7DateTime(observation[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;TS.1&apos;].toString());
	resDiagnosticReport.issued.@value = convertHL7DateTime(observation[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;TS.1&apos;].toString());
	
	var performer = &lt;performer&gt;
					&lt;reference value=&quot;Practitioner&quot;/&gt;
				&lt;/performer&gt;;
	var orderingProviderID = observation[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.1&apos;].toString();
	if (orderingProviderID) {
		performer.reference.@value = &quot;Practitioner/&quot; + observation[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.1&apos;].toString();
	} else {
		performer.reference.@value = &quot;Practitioner&quot;;
	}
	resDiagnosticReport.appendChild(performer);

	// Reference to speciments this report is based on
//	for each (var specimen in observation[&apos;ORU_R01.SPECIMEN&apos;].children()) {
//		var id = &quot;Specimen/spm-specimen-&quot; + specimen[&apos;SPM.2&apos;][&apos;EIP.1&apos;][&apos;EI.1&apos;].toString() + &quot;-&quot; + specimen[&apos;SPM.2&apos;][&apos;EIP.2&apos;][&apos;EI.1&apos;].toString();
//		var specimenReference = &lt;specimen&gt;
//								&lt;reference value=&quot;&quot;/&gt;
//							&lt;/specimen&gt;;
//		specimenReference.reference.@value = id;
//		resDiagnosticReport.appendChild(specimenReference);		
//	}

	// Reference to observation this report is based on
	for each (var obs in observation[&apos;ORU_R01.OBSERVATION&apos;].children()) {
		if (&quot;OBX&quot; == obs.name().toString() &amp;&amp; obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString() != &quot;&quot;) {
			var id = &quot;#&quot; + obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString();
			var resultReference = &lt;result&gt;
									&lt;reference value=&quot;&quot;/&gt;
							&lt;/result&gt;;
			resultReference.reference.@value = id;
			resDiagnosticReport.appendChild(resultReference);	
		}	
	}

	logger.error( &quot;Diagnostic Report\n:&quot; +  resDiagnosticReport.toString() );

	// ~~ STEPS: 
	// 1. Query for DiagnosticOrder (mostly for the resource ID)
	// 2. Pull array of Observations for each Order/Report
	// 3. Put Observations into Diagnostic Report
	// 4. Assemble array of Attachments
	// 5. Populate Conclusion
	// 4. Insert Diagnostic Report
	//
	// NOTE: Decide if we really need specimen, performer
	
//	arrDiagnosticReport.push(resDiagnosticReport.toString());
}

// Store DiagnosticReport resource to be processed by FHIR_Submit destination
//channelMap.put(&quot;DiagnosticReport&quot;, arrDiagnosticReport);

// Store Practitioner resource to be processed by FHIR_Submit destination
//channelMap.put(&quot;Practitioner&quot;, arrOrderingProvider);</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>var arrDiagnosticReport = [];
var arrOrderingProvider = [];
var arrProviderID = [];

/*
* (SN) Practitioner resource for Performing Organization or Medical Doctor is not mapped (see comments below)
*
*/ 

for each (var observation in msg[&apos;ORU_R01.PATIENT_RESULT&apos;].children()) {

	var resDiagnosticReport = &lt;DiagnosticReport&gt;
							&lt;text&gt;
								&lt;status value=&quot;generated&quot;/&gt;
								&lt;xhtml:div xmlns:xhtml=&quot;http://www.w3.org/1999/xhtml&quot;/&gt;
							&lt;/text&gt;
						&lt;/DiagnosticReport&gt;;
	
	// Process only ORC-OBR-OBX group
	if (observation[&apos;ORC&apos;][&apos;ORC.1&apos;].toString() != &quot;RE&quot;) { continue; }


	// Reference to contained observations
	for each (var obs in observation[&apos;ORU_R01.OBSERVATION&apos;].children()) 
	{
		if (&quot;OBX&quot; == obs.name().toString() &amp;&amp; obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString() != &quot;&quot;)
		{
			logger.error( &quot;OBX Found: &quot; + obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString())
			var id = obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString();
			var resultReference = &lt;contained&gt;
									&lt;Observation&gt;
										&lt;id value=&quot;&quot;/&gt;
									&lt;/Observation&gt;
								&lt;/contained&gt;;
			resultReference.reference.@value = id;
			resDiagnosticReport.appendChild(resultReference);	
		}
	}

//	resDiagnosticReport.id.@value = observation[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;EI.1&apos;].toString(); // Filler Order ID ~~ RKW: Fatal Gross Conceptual Error

	// Process Observation Request (OBR) level NTE segments
	// (SN) Known deficiency - &quot;p&quot; element namespace is not bound, must be &quot;xhtml:p&quot; 
	// March 14 2017: Issue #3 &quot;Comments appear twice&quot; fixed 
	resDiagnosticReport.text.*::div.* = new XMLList();
	var observationComment = false;	

	// Extract ORC-OBR-OBX group related comments only
	var orderObservationGroup = new XML(observation.toString());
	
	// March 14: This returns all children and grandchildren NTE segments of the this object
	for each (var nte in orderObservationGroup.descendants(&quot;NTE&quot;)) { 
		
		if (&quot;NTE&quot; == nte.name().toString()) {

			observationComment = true;

			// March 14, 2017: Comment source depends on the group and appended as a prefix 
			var prefix = &quot;&quot;;
			if (nte.parent().name().toString().indexOf(&quot;.ORDER_OBSERVATION&quot;) &gt; -1) {
				prefix = &quot;OBR&quot;;
			} else if (nte.parent().name().toString().indexOf(&quot;.OBSERVATION&quot;) &gt; -1) {
				prefix = &quot;OBX&quot;;
			}
			
			// Source of Comment - Optional
			var commentSources = [&quot;L&quot;,&quot;P&quot;,&quot;O&quot;];
			var source = nte[&apos;NTE.2&apos;].toString();
			
			// Comments contained in the segment - Required
			var comment = nte[&apos;NTE.3&apos;].toString();

			if (commentSources.indexOf(source) &gt; -1) {	
				resDiagnosticReport.text.*::div.* += new XML(&apos;&lt;p class=&quot;&apos; + prefix + &apos;-&apos; + source + &apos;&quot;&gt;&apos; + stripNonValidXMLChars(comment) +&apos;&lt;/p&gt;&apos;);
			} else {
				resDiagnosticReport.text.*::div.* += new XML(&apos;&lt;p class=&quot;&apos; + prefix + &apos;&quot;&gt;&apos; + stripNonValidXMLChars(comment) +&apos;&lt;/p&gt;&apos;);	
			}
		}
	}

	if (!observationComment) delete resDiagnosticReport.text;

	// Process single OBR segment
	resDiagnosticReport.appendChild(new XML(&quot;&lt;contained&gt;&quot; + getDiagnosticOrder(observation) + &quot;&lt;/contained&gt;&quot;));

	// Process Ordering Provider
	// (SN) Add only if such Ordering Provider is not in the list already
//	var provID =  observation[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.1&apos;].toString();
//	if (arrProviderID.indexOf(provID) &lt; 0) {
//		arrOrderingProvider.push(getOrderingProvider(observation));
//		arrProviderID.push(provID);
//	}

	// Process multiple OBX segments
	for each (var obs in observation[&apos;ORU_R01.OBSERVATION&apos;].children()) {
		if (&quot;OBX&quot; == obs.name().toString()) {

			// OBX segments nested under DiagnosticReport as contained resources
			resDiagnosticReport.appendChild(new XML(&quot;&lt;contained&gt;&quot; + getObservationResource(obs) + &quot;&lt;/contained&gt;&quot;));

			// March 14 2017: Process Performing Organization: OBX.23, OBX.24, OBX.25
			var performingOrganization = new XML( getPerformingProvider(obs) );
			if (performingOrganization.contained.Organization) {
				var performID = performingOrganization.contained.Organization.identifier.value.@value.toString();
				if (arrProviderID.indexOf(performID) &lt; 0) {
					arrOrderingProvider.push(performingOrganization.toString());
					arrProviderID.push(performID);
				}
			}
		}	
	}	

	// Placer Order Number - If populated, this field contains the placer application’s order number.
	if (observation[&apos;ORC&apos;][&apos;ORC.2&apos;][&apos;EI.1&apos;].toString()) {
		var identifier1 = &lt;identifier&gt;
						&lt;type id=&quot;99QDI&quot;/&gt;
						&lt;system value=&quot;&quot;/&gt;
						&lt;value value=&quot;&quot;/&gt;
					&lt;/identifier&gt;;
		identifier1.value.@value = observation[&apos;ORC&apos;][&apos;ORC.2&apos;][&apos;EI.1&apos;].toString();
		identifier1.system.@value = observation[&apos;ORC&apos;][&apos;ORC.2&apos;][&apos;EI.2&apos;].toString();
		resDiagnosticReport.appendChild(identifier1);
	}

	// Filler Order Number - The order number associated with the filler’s application. 
	if (observation[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;EI.1&apos;].toString()) {
		var identifier2 = &lt;identifier&gt;
						&lt;type id=&quot;99QDI&quot;/&gt;
						&lt;system value=&quot;&quot;/&gt;
						&lt;value value=&quot;&quot;/&gt;
					&lt;/identifier&gt;;
		identifier2.value.@value = observation[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;EI.1&apos;].toString();
		identifier2.system.@value = observation[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;EI.2&apos;].toString();
		resDiagnosticReport.appendChild(identifier2);		
	}

	// Order Status - Indicates whether the result is partial or final.
	// March 25 2017: updated to pass API validation (see Terminology Mapping spreadsheet)
	var statusCode = observation[&apos;ORC&apos;][&apos;ORC.5&apos;].toString();
	if (statusCode) {
		var statusXML = &lt;status value=&quot;final&quot;&gt;
						&lt;extension url=&quot;http://hl7.org/fhir/ValueSet&quot;&gt;
							&lt;valueCodeableConcept&gt;
								&lt;coding&gt;
									&lt;system value=&quot;http://hl7.org/fhir/ValueSet/v2-0038&quot;/&gt;
									&lt;code value=&quot;&quot;/&gt;
									&lt;display value=&quot;&quot;/&gt;
								&lt;/coding&gt;
							&lt;/valueCodeableConcept&gt;
						&lt;/extension&gt;
					&lt;/status&gt;;
		statusXML.extension.valueCodeableConcept.coding.code.@value = statusCode;
		statusXML.extension.valueCodeableConcept.coding.display.@value = getHL7v2CodeDescription(&quot;0038&quot;, statusCode);
		resDiagnosticReport.appendChild(statusXML);
	}

	resDiagnosticReport.code.@id = observation[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;EI.1&apos;].toString();

	// Hard-coded, required by FHIR
	resDiagnosticReport.appendChild(new XML(&apos;&lt;subject&gt;&lt;reference value=&quot;Patient&quot;/&gt;&lt;/subject&gt;&apos;));

	// Observation Date/Time
	resDiagnosticReport.effectiveDateTime.@value = convertHL7DateTime(observation[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;TS.1&apos;].toString());
	resDiagnosticReport.issued.@value = convertHL7DateTime(observation[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;TS.1&apos;].toString());
	
	var performer = &lt;performer&gt;
					&lt;reference value=&quot;Practitioner&quot;/&gt;
				&lt;/performer&gt;;
	var orderingProviderID = observation[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.1&apos;].toString();
	if (orderingProviderID) {
		performer.reference.@value = &quot;Practitioner/&quot; + observation[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.1&apos;].toString();
	} else {
		performer.reference.@value = &quot;Practitioner&quot;;
	}
	resDiagnosticReport.appendChild(performer);

	// Reference to speciments this report is based on
//	for each (var specimen in observation[&apos;ORU_R01.SPECIMEN&apos;].children()) {
//		var id = &quot;Specimen/spm-specimen-&quot; + specimen[&apos;SPM.2&apos;][&apos;EIP.1&apos;][&apos;EI.1&apos;].toString() + &quot;-&quot; + specimen[&apos;SPM.2&apos;][&apos;EIP.2&apos;][&apos;EI.1&apos;].toString();
//		var specimenReference = &lt;specimen&gt;
//								&lt;reference value=&quot;&quot;/&gt;
//							&lt;/specimen&gt;;
//		specimenReference.reference.@value = id;
//		resDiagnosticReport.appendChild(specimenReference);		
//	}

	// Reference to observation this report is based on
	for each (var obs in observation[&apos;ORU_R01.OBSERVATION&apos;].children()) {
		if (&quot;OBX&quot; == obs.name().toString() &amp;&amp; obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString() != &quot;&quot;) {
			var id = &quot;#&quot; + obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString();
			var resultReference = &lt;result&gt;
									&lt;reference value=&quot;&quot;/&gt;
							&lt;/result&gt;;
			resultReference.reference.@value = id;
			resDiagnosticReport.appendChild(resultReference);	
		}	
	}

	logger.error( &quot;Diagnostic Report\n:&quot; +  resDiagnosticReport.toString() );

	// ~~ STEPS: 
	// 1. Query for DiagnosticOrder (mostly for the resource ID)
	// 2. Pull array of Observations for each Order/Report
	// 3. Put Observations into Diagnostic Report
	// 4. Assemble array of Attachments
	// 5. Populate Conclusion
	// 4. Insert Diagnostic Report
	//
	// NOTE: Decide if we really need specimen, performer
	
//	arrDiagnosticReport.push(resDiagnosticReport.toString());
}

// Store DiagnosticReport resource to be processed by FHIR_Submit destination
//channelMap.put(&quot;DiagnosticReport&quot;, arrDiagnosticReport);

// Store Practitioner resource to be processed by FHIR_Submit destination
//channelMap.put(&quot;Practitioner&quot;, arrOrderingProvider);</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>3</sequenceNumber>
            <name>Functions pool</name>
            <script>/**
	Creates the DiagnosticOrder resourse with OBR segment mappings

	@param {String} obs - original ORU_R01.ORDER_OBSERVATION XML string
	@return {String} return DiagnosticOrder XML string
*/
/*
function getDiagnosticOrder(obs) {


(SN) Following fields are not mapped in this version:
* OBR.26 [Parent Result] - Optional - If OBR.11 (Specimen Action Code) is populated, then this field is populated with the data in the parent OBX.03 (Observation Identifier) subfield.
* OBR.29 [Parent] - Optional - This field is populated if OBR.11 (Specimen Action Code) is populated.
* OBR.50 [Parent Universal Service Identifier] - Optional - The universal service identifier of the parent order. This field is populated if OBR.11 (Specimen Action Code) is populated.

	var diagnosticOrder = &lt;DiagnosticOrder&gt;
					&lt;id value=&quot;obr-observation-request&quot;/&gt;
					&lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/diagnosticorder-precondition&quot;&gt;
						&lt;valueDateTime value=&quot;&quot;/&gt;
					&lt;/extension&gt;
					&lt;subject id=&quot;Patient&quot;/&gt;
					&lt;event&gt;
						&lt;status value=&quot;completed&quot;&gt;
							&lt;extension url=&quot;http://hl7.org/fhir/ValueSet&quot;&gt;
								&lt;valueCodeableConcept&gt;
									&lt;coding&gt;
										&lt;system value=&quot;http://hl7.org/fhir/ValueSet/v2-0123&quot;/&gt;
										&lt;code value=&quot;&quot;/&gt;
										&lt;display value=&quot;&quot;/&gt;
									&lt;/coding&gt;
								&lt;/valueCodeableConcept&gt;
							&lt;/extension&gt;
						&lt;/status&gt;
						&lt;dateTime value=&quot;&quot;/&gt;
						&lt;actor&gt;
							&lt;reference value=&quot;Practitioner/ordering-provider&quot;/&gt;
						&lt;/actor&gt;
					&lt;/event&gt;
					&lt;item&gt;
						&lt;code&gt;
							&lt;coding&gt;
								&lt;system value=&quot;&quot;/&gt;
								&lt;code value=&quot;&quot;/&gt;
								&lt;display value=&quot;&quot;/&gt;
							&lt;/coding&gt;
						&lt;/code&gt;
						&lt;specimen&gt;
							&lt;display value=&quot;G&quot;/&gt;
						&lt;/specimen&gt;
					&lt;/item&gt;
				&lt;/DiagnosticOrder&gt;;

	diagnosticOrder.extension.valueDateTime.@value = convertHL7DateTime(obs[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;TS.1&apos;].toString());

	var resultHandling = obs[&apos;OBR&apos;][&apos;OBR.49&apos;].toString();
	if (resultHandling) {
		diagnosticOrder.supportingInformation.display.@value = obs[&apos;OBR&apos;][&apos;OBR.49&apos;].toString();
	} else {
		delete diagnosticOrder.supportingInformation;
	}

	// Result Status - Indicates whether the result is partial or final.
	// March 25 2017: updated to pass API validation (see Terminology Mapping spreadsheet)	
	var statusCode = obs[&apos;OBR&apos;][&apos;OBR.25&apos;].toString();
	if (statusCode) {
		 diagnosticOrder.event.status.extension.valueCodeableConcept.coding.code.@value = statusCode;
		 diagnosticOrder.event.status.extension.valueCodeableConcept.coding.display.@value = getHL7v2CodeDescription(&quot;0123&quot;, statusCode);
	}

	//  The date/time the results were reported or status changed
	diagnosticOrder.event.dateTime.@value = convertHL7DateTime(obs[&apos;OBR&apos;][&apos;OBR.22&apos;][&apos;TS.1&apos;].toString());

	// Quest samples contain local and LOINC codes
	diagnosticOrder.item.code.coding.system.@value = obs[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;CE.3&apos;].toString();
	diagnosticOrder.item.code.coding.code.@value = obs[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;CE.1&apos;].toString();
	diagnosticOrder.item.code.coding.display.@value = obs[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;CE.2&apos;].toString();

	// Specimen Action Code
	var specimenActionCode = obs[&apos;OBR&apos;][&apos;OBR.11&apos;].toString();
	if (specimenActionCode) {
		diagnosticOrder.item.specimen.display.@value = specimenActionCode;
	} else {
		delete diagnosticOrder.item.specimen;
	}

	return diagnosticOrder.toString();
}
*/

/**
	Creates the Observation resourse with a single OBX segment mappings

	@param {String} obs - original ORU_R01.OBSERVATION XML string
	@return {String} return Observation XML string
*/
function getObservationResource(obs) {

	var obsResource = &lt;Observation&gt;
					&lt;id value=&quot;OBX-observation-result&quot;/&gt;					
					&lt;identifier id=&quot;&quot;/&gt;
					&lt;status value=&quot;final&quot;&gt;
						&lt;extension url=&quot;http://hl7.org/fhir/ValueSet&quot;&gt;
							&lt;valueCodeableConcept&gt;
								&lt;coding&gt;
									&lt;system value=&quot;http://hl7.
									
									org/fhir/ValueSet/v2-0085&quot;/&gt;
									&lt;code value=&quot;F&quot;/&gt;
									&lt;display value=&quot;Final results; can only be changed with a corrected result&quot;/&gt;
								&lt;/coding&gt;
							&lt;/valueCodeableConcept&gt;
						&lt;/extension&gt;
					&lt;/status&gt;
					&lt;code&gt;
						&lt;extension url=&quot;http://www.questdiagnostics.com&quot;&gt;
							&lt;valueCoding&gt;
								&lt;system value=&quot;&quot;/&gt;
								&lt;code value=&quot;&quot;/&gt;
								&lt;display value=&quot;&quot;/&gt;
							&lt;/valueCoding&gt;
						&lt;/extension&gt;
						&lt;coding&gt;
							&lt;system value=&quot;http://loinc.org&quot;/&gt;
							&lt;code value=&quot;&quot;/&gt;
							&lt;display value=&quot;&quot;/&gt;
						&lt;/coding&gt;
					&lt;/code&gt;
					&lt;effectiveDateTime value=&quot;&quot;/&gt;
					&lt;issued value=&quot;&quot;/&gt;
					&lt;performer&gt;
						&lt;reference value=&quot;Practitioner/obx-performing-organization&quot;/&gt;
					&lt;/performer&gt;
					&lt;valueString value=&quot;&quot;/&gt;
					&lt;interpretation&gt;
						&lt;text value=&quot;&quot;/&gt;
					&lt;/interpretation&gt;
					&lt;referenceRange&gt;
						&lt;meaning&gt;
							&lt;coding&gt;
								&lt;system value=&quot;&quot;/&gt;
								&lt;code value=&quot;&quot;/&gt;
								&lt;display value=&quot;&quot;/&gt;
							&lt;/coding&gt;
						&lt;/meaning&gt;
						&lt;text value=&quot;&quot;/&gt;
					&lt;/referenceRange&gt;
				&lt;/Observation&gt;;

	obsResource.id.@value= obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString();

	obsResource.identifier.@id = obs[&apos;OBX.1&apos;].toString();

	// Result Status - the status of the result value
	// March 25 2017: updated to pass API validation (see Terminology Mapping spreadsheet)	
	var statusCode = obs[&apos;OBX.11&apos;].toString();
	if (statusCode) {
		 obsResource.status.extension.valueCodeableConcept.coding.code.@value = statusCode;
		 obsResource.status.extension.valueCodeableConcept.coding.display.@value = getHL7v2CodeDescription(&quot;0085&quot;, statusCode);
	}

	
	
	if (obs[&apos;OBX.3&apos;][&apos;CE.6&apos;].toString() == &quot;LN&quot;) {
		// Care360 own coding
		obsResource.code.extension.valueCoding.system.@value = obs[&apos;OBX.3&apos;][&apos;CE.3&apos;].toString();
		obsResource.code.extension.valueCoding.code.@value = obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString();
		obsResource.code.extension.valueCoding.display.@value = obs[&apos;OBX.3&apos;][&apos;CE.2&apos;].toString();

		// LOINC coding
		obsResource.code.coding.system.@value = &quot;http://loinc.org&quot;;
		obsResource.code.coding.code.@value = obs[&apos;OBX.3&apos;][&apos;CE.4&apos;].toString();
		obsResource.code.coding.display.@value = obs[&apos;OBX.3&apos;][&apos;CE.5&apos;].toString();		
	} else {
		delete obsResource.code.extension;
		obsResource.code.coding.system.@value = obs[&apos;OBX.3&apos;][&apos;CE.3&apos;].toString();
		obsResource.code.coding.code.@value = obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString();
		obsResource.code.coding.display.@value = obs[&apos;OBX.3&apos;][&apos;CE.2&apos;].toString();			
	}

	var dateTimeOfObservation = obs[&apos;OBX.14&apos;][&apos;TS.1&apos;].toString();
	if (dateTimeOfObservation) {
		obsResource.effectiveDateTime.@value = convertHL7DateTime(dateTimeOfObservation);
	} else {
		delete obsResource.effectiveDateTime;
	}

	var dateTimeOfAnalysis = obs[&apos;OBX.19&apos;][&apos;TS.1&apos;].toString();
	if (dateTimeOfAnalysis) {
		obsResource.issued.@value = convertHL7DateTime(dateTimeOfAnalysis);
	} else {
		delete obsResource.issued;
	}

	// March 15: Issues #13: OBX.5 [Observation Value] using SN (Structured Numeric) data type
	var observationValue = &quot;&quot;;
	if (obs[&apos;OBX.5&apos;][&apos;SN.3&apos;]) {
		for each (var sn in obs[&apos;OBX.5&apos;].children()) {
			if (sn.toString()) observationValue += sn.toString(); 
		}
	} else {
		observationValue = obs[&apos;OBX.5&apos;].toString();
	}
	
	if (observationValue) {
		obsResource.valueString.@value = observationValue;
	} else {
		delete obsResource.valueString;
	}

	var abnormalFlags = obs[&apos;OBX.8&apos;].toString();
	if (abnormalFlags) {
		obsResource.interpretation.text.@value = abnormalFlags;
	} else {
		delete obsResource.interpretation;
	}

	var unitsOfMeasure = obs[&apos;OBX.6&apos;][&apos;CE.1&apos;].toString();
	var meaningPresent = true;
	if (unitsOfMeasure) {
		obsResource.referenceRange.meaning.coding.code.@value = unitsOfMeasure;
		if (obs[&apos;OBX.6&apos;][&apos;CE.3&apos;].toString() != &quot;&quot;) {
			obsResource.referenceRange.meaning.coding.system.@value = obs[&apos;OBX.6&apos;][&apos;CE.3&apos;].toString();
		} else {
			delete obsResource.referenceRange.meaning.coding.system;
		}
		if (obs[&apos;OBX.6&apos;][&apos;CE.2&apos;].toString() != &quot;&quot;) {
			obsResource.referenceRange.meaning.coding.display.@value = obs[&apos;OBX.6&apos;][&apos;CE.2&apos;].toString();
		} else {
			delete obsResource.referenceRange.meaning.coding.display;
		}
	} else {
		delete obsResource.referenceRange.meaning;
		meaningPresent = false;
	}
	
	var referencesRange = obs[&apos;OBX.7&apos;].toString();
	var rangePresent = true;
	if (referencesRange) {
		obsResource.referenceRange.text.@value = referencesRange;
	} else {
		delete obsResource.referenceRange.text;
		rangePresent = false;
	}

	if (!meaningPresent &amp;&amp; !rangePresent) delete obsResource.referenceRange;

	// Reference to performing organization
	obsResource.performer.reference.@value=&quot;Practitioner/obx-performing-organization-&quot; + obs[&apos;OBX.23&apos;][&apos;XON.10&apos;].toString();
	
	return obsResource.toString();
	
}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>/**
	Creates the DiagnosticOrder resourse with OBR segment mappings

	@param {String} obs - original ORU_R01.ORDER_OBSERVATION XML string
	@return {String} return DiagnosticOrder XML string
*/
/*
function getDiagnosticOrder(obs) {


(SN) Following fields are not mapped in this version:
* OBR.26 [Parent Result] - Optional - If OBR.11 (Specimen Action Code) is populated, then this field is populated with the data in the parent OBX.03 (Observation Identifier) subfield.
* OBR.29 [Parent] - Optional - This field is populated if OBR.11 (Specimen Action Code) is populated.
* OBR.50 [Parent Universal Service Identifier] - Optional - The universal service identifier of the parent order. This field is populated if OBR.11 (Specimen Action Code) is populated.

	var diagnosticOrder = &lt;DiagnosticOrder&gt;
					&lt;id value=&quot;obr-observation-request&quot;/&gt;
					&lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/diagnosticorder-precondition&quot;&gt;
						&lt;valueDateTime value=&quot;&quot;/&gt;
					&lt;/extension&gt;
					&lt;subject id=&quot;Patient&quot;/&gt;
					&lt;event&gt;
						&lt;status value=&quot;completed&quot;&gt;
							&lt;extension url=&quot;http://hl7.org/fhir/ValueSet&quot;&gt;
								&lt;valueCodeableConcept&gt;
									&lt;coding&gt;
										&lt;system value=&quot;http://hl7.org/fhir/ValueSet/v2-0123&quot;/&gt;
										&lt;code value=&quot;&quot;/&gt;
										&lt;display value=&quot;&quot;/&gt;
									&lt;/coding&gt;
								&lt;/valueCodeableConcept&gt;
							&lt;/extension&gt;
						&lt;/status&gt;
						&lt;dateTime value=&quot;&quot;/&gt;
						&lt;actor&gt;
							&lt;reference value=&quot;Practitioner/ordering-provider&quot;/&gt;
						&lt;/actor&gt;
					&lt;/event&gt;
					&lt;item&gt;
						&lt;code&gt;
							&lt;coding&gt;
								&lt;system value=&quot;&quot;/&gt;
								&lt;code value=&quot;&quot;/&gt;
								&lt;display value=&quot;&quot;/&gt;
							&lt;/coding&gt;
						&lt;/code&gt;
						&lt;specimen&gt;
							&lt;display value=&quot;G&quot;/&gt;
						&lt;/specimen&gt;
					&lt;/item&gt;
				&lt;/DiagnosticOrder&gt;;

	diagnosticOrder.extension.valueDateTime.@value = convertHL7DateTime(obs[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;TS.1&apos;].toString());

	var resultHandling = obs[&apos;OBR&apos;][&apos;OBR.49&apos;].toString();
	if (resultHandling) {
		diagnosticOrder.supportingInformation.display.@value = obs[&apos;OBR&apos;][&apos;OBR.49&apos;].toString();
	} else {
		delete diagnosticOrder.supportingInformation;
	}

	// Result Status - Indicates whether the result is partial or final.
	// March 25 2017: updated to pass API validation (see Terminology Mapping spreadsheet)	
	var statusCode = obs[&apos;OBR&apos;][&apos;OBR.25&apos;].toString();
	if (statusCode) {
		 diagnosticOrder.event.status.extension.valueCodeableConcept.coding.code.@value = statusCode;
		 diagnosticOrder.event.status.extension.valueCodeableConcept.coding.display.@value = getHL7v2CodeDescription(&quot;0123&quot;, statusCode);
	}

	//  The date/time the results were reported or status changed
	diagnosticOrder.event.dateTime.@value = convertHL7DateTime(obs[&apos;OBR&apos;][&apos;OBR.22&apos;][&apos;TS.1&apos;].toString());

	// Quest samples contain local and LOINC codes
	diagnosticOrder.item.code.coding.system.@value = obs[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;CE.3&apos;].toString();
	diagnosticOrder.item.code.coding.code.@value = obs[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;CE.1&apos;].toString();
	diagnosticOrder.item.code.coding.display.@value = obs[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;CE.2&apos;].toString();

	// Specimen Action Code
	var specimenActionCode = obs[&apos;OBR&apos;][&apos;OBR.11&apos;].toString();
	if (specimenActionCode) {
		diagnosticOrder.item.specimen.display.@value = specimenActionCode;
	} else {
		delete diagnosticOrder.item.specimen;
	}

	return diagnosticOrder.toString();
}
*/

/**
	Creates the Observation resourse with a single OBX segment mappings

	@param {String} obs - original ORU_R01.OBSERVATION XML string
	@return {String} return Observation XML string
*/
function getObservationResource(obs) {

	var obsResource = &lt;Observation&gt;
					&lt;id value=&quot;OBX-observation-result&quot;/&gt;					
					&lt;identifier id=&quot;&quot;/&gt;
					&lt;status value=&quot;final&quot;&gt;
						&lt;extension url=&quot;http://hl7.org/fhir/ValueSet&quot;&gt;
							&lt;valueCodeableConcept&gt;
								&lt;coding&gt;
									&lt;system value=&quot;http://hl7.
									
									org/fhir/ValueSet/v2-0085&quot;/&gt;
									&lt;code value=&quot;F&quot;/&gt;
									&lt;display value=&quot;Final results; can only be changed with a corrected result&quot;/&gt;
								&lt;/coding&gt;
							&lt;/valueCodeableConcept&gt;
						&lt;/extension&gt;
					&lt;/status&gt;
					&lt;code&gt;
						&lt;extension url=&quot;http://www.questdiagnostics.com&quot;&gt;
							&lt;valueCoding&gt;
								&lt;system value=&quot;&quot;/&gt;
								&lt;code value=&quot;&quot;/&gt;
								&lt;display value=&quot;&quot;/&gt;
							&lt;/valueCoding&gt;
						&lt;/extension&gt;
						&lt;coding&gt;
							&lt;system value=&quot;http://loinc.org&quot;/&gt;
							&lt;code value=&quot;&quot;/&gt;
							&lt;display value=&quot;&quot;/&gt;
						&lt;/coding&gt;
					&lt;/code&gt;
					&lt;effectiveDateTime value=&quot;&quot;/&gt;
					&lt;issued value=&quot;&quot;/&gt;
					&lt;performer&gt;
						&lt;reference value=&quot;Practitioner/obx-performing-organization&quot;/&gt;
					&lt;/performer&gt;
					&lt;valueString value=&quot;&quot;/&gt;
					&lt;interpretation&gt;
						&lt;text value=&quot;&quot;/&gt;
					&lt;/interpretation&gt;
					&lt;referenceRange&gt;
						&lt;meaning&gt;
							&lt;coding&gt;
								&lt;system value=&quot;&quot;/&gt;
								&lt;code value=&quot;&quot;/&gt;
								&lt;display value=&quot;&quot;/&gt;
							&lt;/coding&gt;
						&lt;/meaning&gt;
						&lt;text value=&quot;&quot;/&gt;
					&lt;/referenceRange&gt;
				&lt;/Observation&gt;;

	obsResource.id.@value= obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString();

	obsResource.identifier.@id = obs[&apos;OBX.1&apos;].toString();

	// Result Status - the status of the result value
	// March 25 2017: updated to pass API validation (see Terminology Mapping spreadsheet)	
	var statusCode = obs[&apos;OBX.11&apos;].toString();
	if (statusCode) {
		 obsResource.status.extension.valueCodeableConcept.coding.code.@value = statusCode;
		 obsResource.status.extension.valueCodeableConcept.coding.display.@value = getHL7v2CodeDescription(&quot;0085&quot;, statusCode);
	}

	
	
	if (obs[&apos;OBX.3&apos;][&apos;CE.6&apos;].toString() == &quot;LN&quot;) {
		// Care360 own coding
		obsResource.code.extension.valueCoding.system.@value = obs[&apos;OBX.3&apos;][&apos;CE.3&apos;].toString();
		obsResource.code.extension.valueCoding.code.@value = obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString();
		obsResource.code.extension.valueCoding.display.@value = obs[&apos;OBX.3&apos;][&apos;CE.2&apos;].toString();

		// LOINC coding
		obsResource.code.coding.system.@value = &quot;http://loinc.org&quot;;
		obsResource.code.coding.code.@value = obs[&apos;OBX.3&apos;][&apos;CE.4&apos;].toString();
		obsResource.code.coding.display.@value = obs[&apos;OBX.3&apos;][&apos;CE.5&apos;].toString();		
	} else {
		delete obsResource.code.extension;
		obsResource.code.coding.system.@value = obs[&apos;OBX.3&apos;][&apos;CE.3&apos;].toString();
		obsResource.code.coding.code.@value = obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString();
		obsResource.code.coding.display.@value = obs[&apos;OBX.3&apos;][&apos;CE.2&apos;].toString();			
	}

	var dateTimeOfObservation = obs[&apos;OBX.14&apos;][&apos;TS.1&apos;].toString();
	if (dateTimeOfObservation) {
		obsResource.effectiveDateTime.@value = convertHL7DateTime(dateTimeOfObservation);
	} else {
		delete obsResource.effectiveDateTime;
	}

	var dateTimeOfAnalysis = obs[&apos;OBX.19&apos;][&apos;TS.1&apos;].toString();
	if (dateTimeOfAnalysis) {
		obsResource.issued.@value = convertHL7DateTime(dateTimeOfAnalysis);
	} else {
		delete obsResource.issued;
	}

	// March 15: Issues #13: OBX.5 [Observation Value] using SN (Structured Numeric) data type
	var observationValue = &quot;&quot;;
	if (obs[&apos;OBX.5&apos;][&apos;SN.3&apos;]) {
		for each (var sn in obs[&apos;OBX.5&apos;].children()) {
			if (sn.toString()) observationValue += sn.toString(); 
		}
	} else {
		observationValue = obs[&apos;OBX.5&apos;].toString();
	}
	
	if (observationValue) {
		obsResource.valueString.@value = observationValue;
	} else {
		delete obsResource.valueString;
	}

	var abnormalFlags = obs[&apos;OBX.8&apos;].toString();
	if (abnormalFlags) {
		obsResource.interpretation.text.@value = abnormalFlags;
	} else {
		delete obsResource.interpretation;
	}

	var unitsOfMeasure = obs[&apos;OBX.6&apos;][&apos;CE.1&apos;].toString();
	var meaningPresent = true;
	if (unitsOfMeasure) {
		obsResource.referenceRange.meaning.coding.code.@value = unitsOfMeasure;
		if (obs[&apos;OBX.6&apos;][&apos;CE.3&apos;].toString() != &quot;&quot;) {
			obsResource.referenceRange.meaning.coding.system.@value = obs[&apos;OBX.6&apos;][&apos;CE.3&apos;].toString();
		} else {
			delete obsResource.referenceRange.meaning.coding.system;
		}
		if (obs[&apos;OBX.6&apos;][&apos;CE.2&apos;].toString() != &quot;&quot;) {
			obsResource.referenceRange.meaning.coding.display.@value = obs[&apos;OBX.6&apos;][&apos;CE.2&apos;].toString();
		} else {
			delete obsResource.referenceRange.meaning.coding.display;
		}
	} else {
		delete obsResource.referenceRange.meaning;
		meaningPresent = false;
	}
	
	var referencesRange = obs[&apos;OBX.7&apos;].toString();
	var rangePresent = true;
	if (referencesRange) {
		obsResource.referenceRange.text.@value = referencesRange;
	} else {
		delete obsResource.referenceRange.text;
		rangePresent = false;
	}

	if (!meaningPresent &amp;&amp; !rangePresent) delete obsResource.referenceRange;

	// Reference to performing organization
	obsResource.performer.reference.@value=&quot;Practitioner/obx-performing-organization-&quot; + obs[&apos;OBX.23&apos;][&apos;XON.10&apos;].toString();
	
	return obsResource.toString();
	
}</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>4</sequenceNumber>
            <name>Practitioner (Ordering Provider) resource</name>
            <script>/**
	Creates the Practitioner resourse for Ordering Provider with ORC segment mappings

	@param {String} obs - original ORU_R01.ORDER_OBSERVATION XML string
	@return {String} return Practitioner XML string
*/
function getOrderingProvider(obs) {

	// Mar 16 update: /Practitioner/practitionerRole/organization is changed to 
	// /Practitioner/practitionerRole/managingOrganization - tooling issue on the &quot;left side&quot;
	// Note: this breaks STU3 1.4.0 XML Schema validation

	var resPractitioner = &lt;Practitioner&gt;
						&lt;id value=&quot;ordering-provider&quot;/&gt;
						&lt;contained&gt;
							&lt;Organization&gt;
								&lt;id value=&quot;orc21-ordering-facility-1&quot;/&gt;
								&lt;identifier&gt;
									&lt;value value=&quot;&quot;/&gt;
								&lt;/identifier&gt;
								&lt;name value=&quot;&quot;/&gt;
								&lt;telecom&gt;
									&lt;system value=&quot;phone&quot;/&gt;
									&lt;value value=&quot;&quot;/&gt;
									&lt;use value=&quot;work&quot;/&gt;
								&lt;/telecom&gt;
								&lt;address&gt;
									&lt;line value=&quot;&quot;/&gt;
									&lt;city value=&quot;&quot;/&gt;
									&lt;state value=&quot;&quot;/&gt;
									&lt;postalCode value=&quot;&quot;/&gt;
								&lt;/address&gt;
							&lt;/Organization&gt;
						&lt;/contained&gt;
						&lt;identifier&gt;
							&lt;system value=&quot;NPI&quot;/&gt;
							&lt;value value=&quot;&quot;/&gt;
						&lt;/identifier&gt;
						&lt;name/&gt;
						&lt;practitionerRole&gt;
							&lt;managingOrganization&gt;
								&lt;reference value=&quot;Organization/orc21-ordering-facility-1&quot;/&gt;
							&lt;/managingOrganization&gt;
						&lt;/practitionerRole&gt;
					&lt;/Practitioner&gt;;

	// Practitioner&apos;s own ID
	resPractitioner.identifier.value.@value = obs[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.1&apos;].toString();
	resPractitioner.identifier.system.@value = obs[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.13&apos;].toString();

	// Organization this Practitioner belongs to
	resPractitioner.contained.Organization.identifier.value.@value = obs[&apos;ORC&apos;][&apos;ORC.21&apos;][&apos;XON.10&apos;].toString();
	resPractitioner.contained.Organization.name.@value = obs[&apos;ORC&apos;][&apos;ORC.21&apos;][&apos;XON.1&apos;].toString();

	// Organization telecom
	var telecom = &quot;(&quot; + obs[&apos;ORC&apos;][&apos;ORC.23&apos;][&apos;XTN.6&apos;].toString() + &quot;) &quot; + convertPhone(obs[&apos;ORC&apos;][&apos;ORC.23&apos;][&apos;XTN.7&apos;].toString());
	if (telecom.length &gt; 4) {
		resPractitioner.contained.Organization.telecom.value.@value = telecom;
	} else delete resPractitioner.contained.Organization.telecom;

	// Organization address
	var addressInUse = false;
	var line = obs[&apos;ORC&apos;][&apos;ORC.22&apos;][&apos;XAD.1&apos;][&apos;SAD.1&apos;].toString();
	if (line) {
		addressInUse = true;
		resPractitioner.contained.Organization.address.line.@value = line;
	}

	var city = obs[&apos;ORC&apos;][&apos;ORC.22&apos;][&apos;XAD.3&apos;].toString();
	if (city) {
		addressInUse = true;		
		resPractitioner.contained.Organization.address.city.@value = city;
	}

	var state = obs[&apos;ORC&apos;][&apos;ORC.22&apos;][&apos;XAD.4&apos;].toString();
	if (state) {
		addressInUse = true;		
		resPractitioner.contained.Organization.address.state.@value = state;
	}	

	var postalCode = obs[&apos;ORC&apos;][&apos;ORC.22&apos;][&apos;XAD.5&apos;].toString();
	if (postalCode) {
		addressInUse = true;		
		resPractitioner.contained.Organization.address.postalCode.@value = postalCode;
	}

	if (!addressInUse) delete resPractitioner.contained.Organization.address;

	// Practitioner name
	var familyName = obs[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.2&apos;][&apos;FN.1&apos;].toString();
	if (familyName) {
		resPractitioner.name.* = new XMLList();
		resPractitioner.name.* += new XML(&apos;&lt;family value=&quot;&apos; + familyName +&apos;&quot;/&gt;&apos;);
		if (obs[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.3&apos;].toString())
			resPractitioner.name.* += new XML(&apos;&lt;given value=&quot;&apos; + obs[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.3&apos;].toString() +&apos;&quot;/&gt;&apos;);
		if (obs[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.4&apos;].toString())
			resPractitioner.name.* += new XML(&apos;&lt;given value=&quot;&apos; + obs[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.4&apos;].toString() +&apos;&quot;/&gt;&apos;);	
	} else {
		delete resPractitioner.name;
	}

	return resPractitioner.toString();	
}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>/**
	Creates the Practitioner resourse for Ordering Provider with ORC segment mappings

	@param {String} obs - original ORU_R01.ORDER_OBSERVATION XML string
	@return {String} return Practitioner XML string
*/
function getOrderingProvider(obs) {

	// Mar 16 update: /Practitioner/practitionerRole/organization is changed to 
	// /Practitioner/practitionerRole/managingOrganization - tooling issue on the &quot;left side&quot;
	// Note: this breaks STU3 1.4.0 XML Schema validation

	var resPractitioner = &lt;Practitioner&gt;
						&lt;id value=&quot;ordering-provider&quot;/&gt;
						&lt;contained&gt;
							&lt;Organization&gt;
								&lt;id value=&quot;orc21-ordering-facility-1&quot;/&gt;
								&lt;identifier&gt;
									&lt;value value=&quot;&quot;/&gt;
								&lt;/identifier&gt;
								&lt;name value=&quot;&quot;/&gt;
								&lt;telecom&gt;
									&lt;system value=&quot;phone&quot;/&gt;
									&lt;value value=&quot;&quot;/&gt;
									&lt;use value=&quot;work&quot;/&gt;
								&lt;/telecom&gt;
								&lt;address&gt;
									&lt;line value=&quot;&quot;/&gt;
									&lt;city value=&quot;&quot;/&gt;
									&lt;state value=&quot;&quot;/&gt;
									&lt;postalCode value=&quot;&quot;/&gt;
								&lt;/address&gt;
							&lt;/Organization&gt;
						&lt;/contained&gt;
						&lt;identifier&gt;
							&lt;system value=&quot;NPI&quot;/&gt;
							&lt;value value=&quot;&quot;/&gt;
						&lt;/identifier&gt;
						&lt;name/&gt;
						&lt;practitionerRole&gt;
							&lt;managingOrganization&gt;
								&lt;reference value=&quot;Organization/orc21-ordering-facility-1&quot;/&gt;
							&lt;/managingOrganization&gt;
						&lt;/practitionerRole&gt;
					&lt;/Practitioner&gt;;

	// Practitioner&apos;s own ID
	resPractitioner.identifier.value.@value = obs[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.1&apos;].toString();
	resPractitioner.identifier.system.@value = obs[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.13&apos;].toString();

	// Organization this Practitioner belongs to
	resPractitioner.contained.Organization.identifier.value.@value = obs[&apos;ORC&apos;][&apos;ORC.21&apos;][&apos;XON.10&apos;].toString();
	resPractitioner.contained.Organization.name.@value = obs[&apos;ORC&apos;][&apos;ORC.21&apos;][&apos;XON.1&apos;].toString();

	// Organization telecom
	var telecom = &quot;(&quot; + obs[&apos;ORC&apos;][&apos;ORC.23&apos;][&apos;XTN.6&apos;].toString() + &quot;) &quot; + convertPhone(obs[&apos;ORC&apos;][&apos;ORC.23&apos;][&apos;XTN.7&apos;].toString());
	if (telecom.length &gt; 4) {
		resPractitioner.contained.Organization.telecom.value.@value = telecom;
	} else delete resPractitioner.contained.Organization.telecom;

	// Organization address
	var addressInUse = false;
	var line = obs[&apos;ORC&apos;][&apos;ORC.22&apos;][&apos;XAD.1&apos;][&apos;SAD.1&apos;].toString();
	if (line) {
		addressInUse = true;
		resPractitioner.contained.Organization.address.line.@value = line;
	}

	var city = obs[&apos;ORC&apos;][&apos;ORC.22&apos;][&apos;XAD.3&apos;].toString();
	if (city) {
		addressInUse = true;		
		resPractitioner.contained.Organization.address.city.@value = city;
	}

	var state = obs[&apos;ORC&apos;][&apos;ORC.22&apos;][&apos;XAD.4&apos;].toString();
	if (state) {
		addressInUse = true;		
		resPractitioner.contained.Organization.address.state.@value = state;
	}	

	var postalCode = obs[&apos;ORC&apos;][&apos;ORC.22&apos;][&apos;XAD.5&apos;].toString();
	if (postalCode) {
		addressInUse = true;		
		resPractitioner.contained.Organization.address.postalCode.@value = postalCode;
	}

	if (!addressInUse) delete resPractitioner.contained.Organization.address;

	// Practitioner name
	var familyName = obs[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.2&apos;][&apos;FN.1&apos;].toString();
	if (familyName) {
		resPractitioner.name.* = new XMLList();
		resPractitioner.name.* += new XML(&apos;&lt;family value=&quot;&apos; + familyName +&apos;&quot;/&gt;&apos;);
		if (obs[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.3&apos;].toString())
			resPractitioner.name.* += new XML(&apos;&lt;given value=&quot;&apos; + obs[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.3&apos;].toString() +&apos;&quot;/&gt;&apos;);
		if (obs[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.4&apos;].toString())
			resPractitioner.name.* += new XML(&apos;&lt;given value=&quot;&apos; + obs[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.4&apos;].toString() +&apos;&quot;/&gt;&apos;);	
	} else {
		delete resPractitioner.name;
	}

	return resPractitioner.toString();	
}</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>5</sequenceNumber>
            <name>Practitioner (Performing Organization) resource</name>
            <script>/**
	Creates the Practitioner resourse for OBX.23 [Performing Organization Name],
	OBX.24 [Performing Organization Address] and OBX.25[Performing Organization Medical Director] for each OBX segment

	@param {String} obs - original ORU_R01.ORDER_OBSERVATION XML string
	@return {String} return Practitioner XML string
*/
function getPerformingProvider(obs) {

	var resPractitioner = &lt;Practitioner&gt;
						&lt;id value=&quot;obx-performing-organization&quot;/&gt;
						&lt;contained&gt;
							&lt;Organization&gt;
								&lt;identifier&gt;
									&lt;value value=&quot;&quot;/&gt;
									&lt;assigner id=&quot;CLIA&quot;/&gt;
								&lt;/identifier&gt;
								&lt;type&gt;
									&lt;text value=&quot;FI&quot;/&gt;
								&lt;/type&gt;
								&lt;name value=&quot;&quot;/&gt;
								&lt;address&gt;
									&lt;line value=&quot;&quot;/&gt;
									&lt;city value=&quot;&quot;/&gt;
									&lt;state value=&quot;&quot;/&gt;
									&lt;postalCode value=&quot;&quot;/&gt;
								&lt;/address&gt;
							&lt;/Organization&gt;
						&lt;/contained&gt;
						&lt;identifier&gt;
							&lt;type&gt;
								&lt;text value=&quot;NPI&quot;/&gt;
							&lt;/type&gt;
							&lt;value value=&quot;&quot;/&gt;
							&lt;assigner id=&quot;EN&quot;/&gt;
						&lt;/identifier&gt;
						&lt;name/&gt;
					&lt;/Practitioner&gt;;

	// Performing Organization Name
	resPractitioner.id.@value = &quot;obx-performing-organization-&quot; + obs[&apos;OBX.23&apos;][&apos;XON.10&apos;].toString();
	resPractitioner.contained.Organization.identifier.value.@value = obs[&apos;OBX.23&apos;][&apos;XON.10&apos;].toString();
	resPractitioner.contained.Organization.name.@value = obs[&apos;OBX.23&apos;][&apos;XON.1&apos;].toString();
	

	// Performing Organization Address
	var addressInUse = false;
	var line = obs[&apos;OBX.24&apos;][&apos;XAD.1&apos;][&apos;SAD.1&apos;].toString();
	if (line) {
		addressInUse = true;
		resPractitioner.contained.Organization.address.line.@value = line;
	}

	var city = obs[&apos;OBX.24&apos;][&apos;XAD.3&apos;].toString();
	if (city) {
		addressInUse = true;		
		resPractitioner.contained.Organization.address.city.@value = city;
	}

	var state = obs[&apos;OBX.24&apos;][&apos;XAD.4&apos;].toString();
	if (state) {
		addressInUse = true;		
		resPractitioner.contained.Organization.address.state.@value = state;
	}	

	var postalCode = obs[&apos;OBX.24&apos;][&apos;XAD.5&apos;].toString();
	if (postalCode) {
		addressInUse = true;		
		resPractitioner.contained.Organization.address.postalCode.@value = postalCode;
	}

	if (!addressInUse) delete resPractitioner.contained.Organization.address;


	// Medical Director
	resPractitioner.identifier.value.@value = obs[&apos;OBX.25&apos;][&apos;XCN.1&apos;].toString();
	resPractitioner.identifier.assigner.@id = obs[&apos;OBX.25&apos;][&apos;XCN.14&apos;][&apos;HD.1&apos;].toString()

	// Medical Director Name
	var familyName = obs[&apos;OBX.25&apos;][&apos;XCN.2&apos;][&apos;FN.1&apos;].toString();
	if (familyName) {
		resPractitioner.name.* = new XMLList();
		resPractitioner.name.* += new XML(&apos;&lt;family value=&quot;&apos; + familyName +&apos;&quot;/&gt;&apos;);
		if (obs[&apos;OBX.25&apos;][&apos;XCN.3&apos;].toString())
			resPractitioner.name.* += new XML(&apos;&lt;given value=&quot;&apos; + obs[&apos;OBX.25&apos;][&apos;XCN.3&apos;].toString() +&apos;&quot;/&gt;&apos;);
		if (obs[&apos;OBX.25&apos;][&apos;XCN.4&apos;].toString())
			resPractitioner.name.* += new XML(&apos;&lt;given value=&quot;&apos; + obs[&apos;OBX.25&apos;][&apos;XCN.4&apos;].toString() +&apos;&quot;/&gt;&apos;);
		if (obs[&apos;OBX.25&apos;][&apos;XCN.5&apos;].toString())
			resPractitioner.name.* += new XML(&apos;&lt;suffix value=&quot;&apos; + obs[&apos;OBX.25&apos;][&apos;XCN.5&apos;].toString() +&apos;&quot;/&gt;&apos;);				
	} else {
		delete resPractitioner.name;
	}

	
	return resPractitioner.toString();		
}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>/**
	Creates the Practitioner resourse for OBX.23 [Performing Organization Name],
	OBX.24 [Performing Organization Address] and OBX.25[Performing Organization Medical Director] for each OBX segment

	@param {String} obs - original ORU_R01.ORDER_OBSERVATION XML string
	@return {String} return Practitioner XML string
*/
function getPerformingProvider(obs) {

	var resPractitioner = &lt;Practitioner&gt;
						&lt;id value=&quot;obx-performing-organization&quot;/&gt;
						&lt;contained&gt;
							&lt;Organization&gt;
								&lt;identifier&gt;
									&lt;value value=&quot;&quot;/&gt;
									&lt;assigner id=&quot;CLIA&quot;/&gt;
								&lt;/identifier&gt;
								&lt;type&gt;
									&lt;text value=&quot;FI&quot;/&gt;
								&lt;/type&gt;
								&lt;name value=&quot;&quot;/&gt;
								&lt;address&gt;
									&lt;line value=&quot;&quot;/&gt;
									&lt;city value=&quot;&quot;/&gt;
									&lt;state value=&quot;&quot;/&gt;
									&lt;postalCode value=&quot;&quot;/&gt;
								&lt;/address&gt;
							&lt;/Organization&gt;
						&lt;/contained&gt;
						&lt;identifier&gt;
							&lt;type&gt;
								&lt;text value=&quot;NPI&quot;/&gt;
							&lt;/type&gt;
							&lt;value value=&quot;&quot;/&gt;
							&lt;assigner id=&quot;EN&quot;/&gt;
						&lt;/identifier&gt;
						&lt;name/&gt;
					&lt;/Practitioner&gt;;

	// Performing Organization Name
	resPractitioner.id.@value = &quot;obx-performing-organization-&quot; + obs[&apos;OBX.23&apos;][&apos;XON.10&apos;].toString();
	resPractitioner.contained.Organization.identifier.value.@value = obs[&apos;OBX.23&apos;][&apos;XON.10&apos;].toString();
	resPractitioner.contained.Organization.name.@value = obs[&apos;OBX.23&apos;][&apos;XON.1&apos;].toString();
	

	// Performing Organization Address
	var addressInUse = false;
	var line = obs[&apos;OBX.24&apos;][&apos;XAD.1&apos;][&apos;SAD.1&apos;].toString();
	if (line) {
		addressInUse = true;
		resPractitioner.contained.Organization.address.line.@value = line;
	}

	var city = obs[&apos;OBX.24&apos;][&apos;XAD.3&apos;].toString();
	if (city) {
		addressInUse = true;		
		resPractitioner.contained.Organization.address.city.@value = city;
	}

	var state = obs[&apos;OBX.24&apos;][&apos;XAD.4&apos;].toString();
	if (state) {
		addressInUse = true;		
		resPractitioner.contained.Organization.address.state.@value = state;
	}	

	var postalCode = obs[&apos;OBX.24&apos;][&apos;XAD.5&apos;].toString();
	if (postalCode) {
		addressInUse = true;		
		resPractitioner.contained.Organization.address.postalCode.@value = postalCode;
	}

	if (!addressInUse) delete resPractitioner.contained.Organization.address;


	// Medical Director
	resPractitioner.identifier.value.@value = obs[&apos;OBX.25&apos;][&apos;XCN.1&apos;].toString();
	resPractitioner.identifier.assigner.@id = obs[&apos;OBX.25&apos;][&apos;XCN.14&apos;][&apos;HD.1&apos;].toString()

	// Medical Director Name
	var familyName = obs[&apos;OBX.25&apos;][&apos;XCN.2&apos;][&apos;FN.1&apos;].toString();
	if (familyName) {
		resPractitioner.name.* = new XMLList();
		resPractitioner.name.* += new XML(&apos;&lt;family value=&quot;&apos; + familyName +&apos;&quot;/&gt;&apos;);
		if (obs[&apos;OBX.25&apos;][&apos;XCN.3&apos;].toString())
			resPractitioner.name.* += new XML(&apos;&lt;given value=&quot;&apos; + obs[&apos;OBX.25&apos;][&apos;XCN.3&apos;].toString() +&apos;&quot;/&gt;&apos;);
		if (obs[&apos;OBX.25&apos;][&apos;XCN.4&apos;].toString())
			resPractitioner.name.* += new XML(&apos;&lt;given value=&quot;&apos; + obs[&apos;OBX.25&apos;][&apos;XCN.4&apos;].toString() +&apos;&quot;/&gt;&apos;);
		if (obs[&apos;OBX.25&apos;][&apos;XCN.5&apos;].toString())
			resPractitioner.name.* += new XML(&apos;&lt;suffix value=&quot;&apos; + obs[&apos;OBX.25&apos;][&apos;XCN.5&apos;].toString() +&apos;&quot;/&gt;&apos;);				
	} else {
		delete resPractitioner.name;
	}

	
	return resPractitioner.toString();		
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>HL7V2</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.4.2">
            <handleRepetitions>true</handleRepetitions>
            <handleSubcomponents>true</handleSubcomponents>
            <useStrictParser>true</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <stripNamespaces>true</stripNamespaces>
            <segmentDelimiter>\r</segmentDelimiter>
            <convertLineBreaks>true</convertLineBreaks>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.4.2">
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <segmentDelimiter>\r</segmentDelimiter>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.4.2">
            <splitType>MSH_Segment</splitType>
            <batchScript></batchScript>
          </batchProperties>
          <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.4.2">
            <segmentDelimiter>\r</segmentDelimiter>
            <successfulACKCode>AA</successfulACKCode>
            <successfulACKMessage></successfulACKMessage>
            <errorACKCode>AE</errorACKCode>
            <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
            <rejectedACKCode>AR</rejectedACKCode>
            <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
            <msh15ACKAccept>false</msh15ACKAccept>
            <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
          </responseGenerationProperties>
          <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.4.2">
            <successfulACKCode>AA,CA</successfulACKCode>
            <errorACKCode>AE,CE</errorACKCode>
            <rejectedACKCode>AR,CR</rejectedACKCode>
            <validateMessageControlId>true</validateMessageControlId>
            <originalMessageControlId>Destination_Encoded</originalMessageControlId>
            <originalIdMapVariable></originalIdMapVariable>
          </responseValidationProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.2">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.2">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.2">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.2">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.2">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.2">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules/>
      </filter>
      <transportName>Channel Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>2</metaDataId>
      <name>ORU_R01_2.3.x</name>
      <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <channelId>none</channelId>
        <channelTemplate>${message.encodedData}</channelTemplate>
        <mapVariables/>
      </properties>
      <transformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>HL7V2</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.4.2">
            <handleRepetitions>true</handleRepetitions>
            <handleSubcomponents>true</handleSubcomponents>
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <stripNamespaces>true</stripNamespaces>
            <segmentDelimiter>\r</segmentDelimiter>
            <convertLineBreaks>true</convertLineBreaks>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.4.2">
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <segmentDelimiter>\r</segmentDelimiter>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.4.2">
            <splitType>MSH_Segment</splitType>
            <batchScript></batchScript>
          </batchProperties>
          <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.4.2">
            <segmentDelimiter>\r</segmentDelimiter>
            <successfulACKCode>AA</successfulACKCode>
            <successfulACKMessage></successfulACKMessage>
            <errorACKCode>AE</errorACKCode>
            <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
            <rejectedACKCode>AR</rejectedACKCode>
            <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
            <msh15ACKAccept>false</msh15ACKAccept>
            <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
          </responseGenerationProperties>
          <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.4.2">
            <successfulACKCode>AA,CA</successfulACKCode>
            <errorACKCode>AE,CE</errorACKCode>
            <rejectedACKCode>AR,CR</rejectedACKCode>
            <validateMessageControlId>true</validateMessageControlId>
            <originalMessageControlId>Destination_Encoded</originalMessageControlId>
            <originalIdMapVariable></originalIdMapVariable>
          </responseValidationProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.2">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.2">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.2">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.2">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.2">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.2">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules/>
      </filter>
      <transportName>Channel Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>3</metaDataId>
      <name>FHIR_submit</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <host>${SparkURL}</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>post</method>
        <headers class="linked-hash-map"/>
        <parameters class="linked-hash-map"/>
        <responseXmlBody>true</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes>application/xml</responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>false</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
        <username></username>
        <password></password>
        <content>${ORUBundle}</content>
        <contentType>application/xml</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>Construct Bundle</name>
            <script>var resBundle = &lt;Bundle xmlns=&quot;http://hl7.org/fhir&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;
		&lt;type value=&quot;message&quot;/&gt;
	&lt;/Bundle&gt;;

// Patient resource
default xml namespace = &quot;http://hl7.org/fhir&quot;;
var resPatient = new XML(&quot;&lt;entry&gt;&lt;resource&gt;&quot; + channelMap.get(&quot;Patient&quot;) + &quot;&lt;/resource&gt;&lt;/entry&gt;&quot;);
resBundle.appendChild(resPatient);

// DiagnosticReport resource
addEntry(&quot;DiagnosticReport&quot;);

// Practitioner resource for Ordering Provider
addEntry(&quot;Practitioner&quot;);

// Specimen resource
addEntry(&quot;Specimen&quot;);

// Binary resourse with original HL7v2 ORU_R01 message
default xml namespace = &quot;http://hl7.org/fhir&quot;;
var resBinary = new XML(&quot;&lt;entry&gt;&lt;resource&gt;&quot; + globalChannelMap.get(&quot;Binary&quot;) + &quot;&lt;/resource&gt;&lt;/entry&gt;&quot;);
resBinary.resource.Binary.id.@value = &quot;oru-r01-&quot; + channelMap.get(&quot;MessageControlID&quot;);
resBundle.appendChild(resBinary);

// Bundle settings
//resBundle.id.@value = channelMap.get(&quot;MessageControlID&quot;);</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>var resBundle = &lt;Bundle xmlns=&quot;http://hl7.org/fhir&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;
		&lt;type value=&quot;message&quot;/&gt;
	&lt;/Bundle&gt;;

// Patient resource
default xml namespace = &quot;http://hl7.org/fhir&quot;;
var resPatient = new XML(&quot;&lt;entry&gt;&lt;resource&gt;&quot; + channelMap.get(&quot;Patient&quot;) + &quot;&lt;/resource&gt;&lt;/entry&gt;&quot;);
resBundle.appendChild(resPatient);

// DiagnosticReport resource
addEntry(&quot;DiagnosticReport&quot;);

// Practitioner resource for Ordering Provider
addEntry(&quot;Practitioner&quot;);

// Specimen resource
addEntry(&quot;Specimen&quot;);

// Binary resourse with original HL7v2 ORU_R01 message
default xml namespace = &quot;http://hl7.org/fhir&quot;;
var resBinary = new XML(&quot;&lt;entry&gt;&lt;resource&gt;&quot; + globalChannelMap.get(&quot;Binary&quot;) + &quot;&lt;/resource&gt;&lt;/entry&gt;&quot;);
resBinary.resource.Binary.id.@value = &quot;oru-r01-&quot; + channelMap.get(&quot;MessageControlID&quot;);
resBundle.appendChild(resBinary);

// Bundle settings
//resBundle.id.@value = channelMap.get(&quot;MessageControlID&quot;);</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>1</sequenceNumber>
            <name>Send to Left Side</name>
            <script>//logger.debug(&quot;Bundle: &quot; + resBundle.toString());

channelMap.put(&quot;ORUBundle&quot;, resBundle.toString());</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>//logger.debug(&quot;Bundle: &quot; + resBundle.toString());

channelMap.put(&quot;ORUBundle&quot;, resBundle.toString());</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>2</sequenceNumber>
            <name>Add Entry function</name>
            <script>/**
	Constructs multiple resource entries from the storred array.
	This function uses the global resBundle variable.

	@param {String} arrName - array name to extract from the channel map
*/
function addEntry(arrName) {
	var arrResource = channelMap.get(arrName);
	for (var i = 0; i &lt; arrResource.length; i++) {
		default xml namespace = &quot;http://hl7.org/fhir&quot;;
		var resource = new XML(&quot;&lt;entry&gt;&lt;resource&gt;&quot; + arrResource[i] + &quot;&lt;/resource&gt;&lt;/entry&gt;&quot;);
		resBundle.appendChild(resource);	
	}
	channelMap.remove(arrName);
	arrResource.length = 0;
}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>/**
	Constructs multiple resource entries from the storred array.
	This function uses the global resBundle variable.

	@param {String} arrName - array name to extract from the channel map
*/
function addEntry(arrName) {
	var arrResource = channelMap.get(arrName);
	for (var i = 0; i &lt; arrResource.length; i++) {
		default xml namespace = &quot;http://hl7.org/fhir&quot;;
		var resource = new XML(&quot;&lt;entry&gt;&lt;resource&gt;&quot; + arrResource[i] + &quot;&lt;/resource&gt;&lt;/entry&gt;&quot;);
		resBundle.appendChild(resource);	
	}
	channelMap.remove(arrName);
	arrResource.length = 0;
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>HL7V2</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.4.2">
            <handleRepetitions>true</handleRepetitions>
            <handleSubcomponents>true</handleSubcomponents>
            <useStrictParser>true</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <stripNamespaces>true</stripNamespaces>
            <segmentDelimiter>\r</segmentDelimiter>
            <convertLineBreaks>true</convertLineBreaks>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.4.2">
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <segmentDelimiter>\r</segmentDelimiter>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.4.2">
            <splitType>MSH_Segment</splitType>
            <batchScript></batchScript>
          </batchProperties>
          <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.4.2">
            <segmentDelimiter>\r</segmentDelimiter>
            <successfulACKCode>AA</successfulACKCode>
            <successfulACKMessage></successfulACKMessage>
            <errorACKCode>AE</errorACKCode>
            <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
            <rejectedACKCode>AR</rejectedACKCode>
            <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
            <msh15ACKAccept>false</msh15ACKAccept>
            <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
          </responseGenerationProperties>
          <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.4.2">
            <successfulACKCode>AA,CA</successfulACKCode>
            <errorACKCode>AE,CE</errorACKCode>
            <rejectedACKCode>AR,CR</rejectedACKCode>
            <validateMessageControlId>true</validateMessageControlId>
            <originalMessageControlId>Destination_Encoded</originalMessageControlId>
            <originalIdMapVariable></originalIdMapVariable>
          </responseValidationProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.2">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.2">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>Validate Spark Server response</name>
            <script>var resp =  $(&apos;responseStatusLine&apos;);

//logger.info(&quot;ORU Processing: Destination - Response - &quot; + msg.toString());
//logger.info(&quot;ORU Processing: Destination - Response - &quot; + resp);</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>var resp =  $(&apos;responseStatusLine&apos;);

//logger.info(&quot;ORU Processing: Destination - Response - &quot; + msg.toString());
//logger.info(&quot;ORU Processing: Destination - Response - &quot; + resp);</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.2">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.2">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.2">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.2">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules/>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data

message = stripNonValidXMLChars(message);

return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data

globalMap.put(&quot;ORUProcessingChannelId&quot;, channelId);

return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.4.2">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>false</storeAttachments>
    <tags class="linked-hash-set"/>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.4.2">
      <className>com.mirth.connect.server.attachments.javascript.JavaScriptAttachmentHandlerProvider</className>
      <type>JavaScript</type>
      <properties>
        <entry>
          <string>javascript.script</string>
          <string>// Modify the message variable below to create attachments

// Create Binary resourse with the original HL7v2 message
var resBinary = &lt;Binary&gt;				
				&lt;id value=&quot;&quot;/&gt;				
				&lt;contentType value=&quot;application/hl7-v2&quot;/&gt;
				&lt;content value=&quot;&quot;/&gt;
			&lt;/Binary&gt;;

// Encode original ORU message
var bytes = new java.lang.String(message.toString()).getBytes();
resBinary.content.@value = FileUtil.encode(bytes).replaceAll(&apos;\r\n|\r|\n&apos;, &apos;&apos;);

// Store to be processed by the FHIR_submit destination
globalChannelMap.put(&quot;Binary&quot;, resBinary.toString());


return message;</string>
        </entry>
      </properties>
    </attachmentProperties>
    <archiveEnabled>true</archiveEnabled>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <codeTemplateLibraries>
    <codeTemplateLibrary version="3.4.2">
      <id>aa9b2404-fbde-4bbe-851f-a0a19ca6ae36</id>
      <name>DEX Library</name>
      <revision>5</revision>
      <lastModified>
        <time>1493415645281</time>
        <timezone>UTC</timezone>
      </lastModified>
      <description>Last updated: March 25, 2017</description>
      <includeNewChannels>true</includeNewChannels>
      <enabledChannelIds>
        <string>b73a73d9-b589-4dd7-8a5b-d24fe9ed522d</string>
        <string>afa52ba3-bd0a-4634-8ae5-b9c91c4dc3b9</string>
        <string>9eeed45d-4613-4501-86f1-236e91808742</string>
        <string>4c7bc0bd-aede-4e90-9ce8-cde50750f1e8</string>
        <string>041540bc-16e7-43fe-a9eb-1ca3c5ea17db</string>
        <string>ae149084-1aaa-4867-a7e3-b66860874f05</string>
        <string>829fe0c9-9229-4cb3-9cc3-1250213f284f</string>
        <string>e0f422e1-0550-40f1-8a37-e148e0b5f636</string>
      </enabledChannelIds>
      <disabledChannelIds>
        <string>f24a2bfd-8f45-4170-b6d6-6410f426ec66</string>
      </disabledChannelIds>
      <codeTemplates>
        <codeTemplate version="3.4.2">
          <id>5e2f9cc3-3b23-4967-9fd1-6a9c602dd29e</id>
          <name>Convert FHIR to HL7v2 code</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077779</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Converts FHIR code to HL7v2 code as defined by the conversion table according to the HL7v2 specification

	@param {String} table - HL7v2 Table code as per specification
	@param {String] value - value to convert
	@return {String} return code according to conversion table
*/
function convertTable(table, value) {

	switch(table) {
		
		// Table 0001 - Administrative Sex
		case &quot;0001&quot;:
			if (value.toString() == &quot;male&quot;) return &quot;M&quot;
			else if (value.toString() == &quot;female&quot;) return &quot;F&quot;
			else if (value.toString() == &quot;other&quot;) return &quot;O&quot;
			else return &quot;U&quot;;
			break;
	}

	return &quot;&quot;;
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>025ece06-d4ad-47d7-8047-67acaf3072a5</id>
          <name>Convert HL7 Date Time</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077689</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Converts date, time and time zone from HL7v2 to ISO 8601 (JSON) format.
	Possible input string format: yyyymmddhhmm[ss[.s[s[s[s]]]]][+/-zzzz]

	@param {String} date - datetime to be converted
	@return {String} return JSON representation of the datetime
*/
function convertHL7DateTime(datetime) {

/*
	Format: yyyymmddhhmm[ss[.s[s[s[s]]]]][+/-zzzz]
	The date and time elements are populated as follows:
	yyyy = Required
	mm = Required if yyyy is not 0000.
	dd = Required if yyyy is not 0000.
	hh = Required if yyyy is not 0000.
	mm = Required if yyyy is not 0000.
	[ss[.s[s[s[s]]]]] = Conditional. Optional if yyyy is not 0000.
	[+/-zzzz] = Optional
*/


	if (datetime == null || datetime.length == 0 || typeof datetime === &quot;undefined&quot;) return &quot;&quot;;

	try {
		var strDateTime = new Packages.java.lang.StringBuffer(datetime.toString());
	
		// Extract time zone
		var index;
		var symbol;
		var timeZone;
		
		if (strDateTime.indexOf(&quot;-&quot;) &gt; 0) {
			index = strDateTime.indexOf(&quot;-&quot;);
		} else if (strDateTime.indexOf(&quot;+&quot;) &gt; 0) {
			index = strDateTime.indexOf(&quot;+&quot;);
		} else
			index = -1;
	
		if (index &gt; 0) {		
			symbol = strDateTime.substring(index, index+1);
			timeZone = new Packages.java.lang.StringBuffer(strDateTime.substring(index+1));
			if (timeZone.length() &gt; 2)
				timeZone.insert(2,&quot;:&quot;);
			strDateTime.delete(index, strDateTime.length());		
		} else {
			symbol = &quot;&quot;;
			timeZone = &quot;&quot;;
		}
	
		// Extract decimal fraction of a second
		var fraction = strDateTime.indexOf(&quot;.&quot;);
		var milliseconds;
		if (fraction &gt; 0) {
			milliseconds = strDateTime.substring(fraction, strDateTime.length());
			strDateTime.delete(fraction, strDateTime.length());
		} else {
			milliseconds = &quot;&quot;;
		}
	
		// Convert the main part
		var jsonDateTime = new Packages.java.lang.StringBuffer(strDateTime);
		
		// yyyyMMdd
		if (strDateTime.length() &gt;= &quot;yyyyMMdd&quot;.length) {
			jsonDateTime.insert(4,&quot;-&quot;);
			jsonDateTime.insert(7,&quot;-&quot;);
		}
	
		// yyyyMMddhh
		if (strDateTime.length() &gt;= &quot;yyyyMMddhh&quot;.length) {
			jsonDateTime.insert(10,&quot;T&quot;);
		}
	
		// yyyyMMddhhmm
		if (strDateTime.length() &gt;= &quot;yyyyMMddhhmm&quot;.length) {
			jsonDateTime.insert(13,&quot;:&quot;);
			
		}
		
		// yyyymmddhhmmss
		if (strDateTime.length() &gt;= &quot;yyyymmddhhmmss&quot;.length) {
			jsonDateTime.insert(16,&quot;:&quot;);		
		}
	
	} catch(ex) {
		jsonDateTime = &quot;0000-00-00&quot;
		milliseconds = &quot;&quot;;
		symbol = &quot;&quot;;
		timeZone = &quot;&quot;;
		logger.error(&quot;convertHL7DateTime(&quot; + datetime + &quot;) exception: &quot; + ex);	
	} finally {
		return jsonDateTime.toString() + milliseconds.toString() + symbol.toString() + timeZone.toString();
	}
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>3d9a32c6-2d37-49d2-afe4-e309356085b7</id>
          <name>Convert JSON Date Time</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609078075</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Converts date, time and time zone from ISO 8601 (JSON) to HL7v2 format.
	Possible input string format: yyyy-mm-ddThh:mm:ss.nnnnnn+|-hh:mm

	@param {String} date - datetime to be converted
	@return {String} return HL7v2 representation of the datetime
*/
function convertJSONDateTime(datetime) {

/*
	Format: yyyy-mm-dd[Thh:mm[:ss[.nnnnnn[+|-hh:mm]]]]
*/

	var date;
	var time;
	
	var arrDateTime = datetime.split(&quot;T&quot;);
	
	if (arrDateTime.length == 1) {
		date = arrDateTime[0];
		time = &quot;&quot;;
	} else if (arrDateTime.length == 2) {
		date = arrDateTime[0];
		time = arrDateTime[1];
	} else 
		return &quot;&quot;;

	date = date.replace(/\-/g, &quot;&quot;);
	time = time.replace(/\:/g, &quot;&quot;);

	return date + time;

}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>a758235b-06a9-4c9d-8256-e9cd70d38bb1</id>
          <name>Convert Phone</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077936</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Inserts hyphens into the phone number if it is 7 digits in length

	@param {String} phone - initial string to convert
	@return {String} return phone number
*/
function convertPhone(phone) {

	try {
		var strPhone = new Packages.java.lang.StringBuffer(phone.toString());	
		
		if (strPhone.length() == 7) {			
			strPhone.insert(3,&quot;-&quot;);
			strPhone.insert(6,&quot;-&quot;);
			return strPhone.toString();			
		} else 
			return phone.toString();
		
	} catch(ex) {
		return phone.toString();		
	} 
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>dc6049ce-02d8-4022-b10e-6bc9978ab3bd</id>
          <name>Convert XML to JSON</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077867</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Converts a string in XML format into its JSON representation.
	This function requires org.json.jar to be deployed to the /custom-lib folder on Mirth

	@param {String} input - A string in XML format
	@return {String} return a string representing initial XML feed but in JSON format
*/
function convertXMLtoJSON(input) {
	var strJSON = Packages.org.json.XML.toJSONObject(input.toString());
	return strJSON.toString(2);	
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>2f174050-3927-4c30-a984-26c98e29bd61</id>
          <name>Converts Administrative Gender</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609078148</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Verifies and converts HL7v2 administrative gender value to FHIR value set defined by
	http://hl7.org/fhir/administrative-gender
	
	@param {String} code - HL7v2 PID.8 [Administrative Sex] code
	@return {String} return FHIR value set code
*/
function getGenderValue(code) {

	var gender;

	switch(code) {
		case &quot;M&quot;:
			gender = &quot;male&quot;;
			break;
		case &quot;F&quot;:
			gender = &quot;female&quot;;
		 	break;
		case &quot;O&quot;:
		case &quot;A&quot;:
		case &quot;N&quot;:
			gender = &quot;other&quot;;
			break; 	
		default:
			gender = &quot;unknown&quot;;		 	
	}

	return gender;	
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>943f9793-83e0-403a-84e9-40ea3fcd92d6</id>
          <name>Converts Phone string to XTN</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609078031</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Converts phone number string with caret dividers into XTN data type.
	Supported formats: 1-314-8727127 or 314-8727127
	Returned formats: ^^PH^^1^314^8727127 or ^^PH^^^314^8727127 or ^^PH^^^^8727127

	@param {String} phone - Phone string in one of the supported format
	@return {String} return Phone string as per XTN data type
*/
function convertPhoneXTN(phone) {

	phone = phone.replace(/\+/g,&quot;&quot;);

	// XTN data type example: ^^PH^^^734^6777777

	//	    916-3000		\d{3}-\d{4}			^^PH^^^^9163000
	//	    9163000		\d{7}				^^PH^^^^9163000
	//   972-9163000		\d{3}-\d{7}			^^PH^^^972^9163000
	//   972-916-3000  		\d{3}-\d{3}-\d{4}		^^PH^^^972^9163000
	// 1-972-9163000 		\d{1}-\d{3}-\d{7}		^^PH^^1^972^9163000
	// 1-972-916-3000 		\d{1}-\d{3}-\d{3}-\d{4}	^^PH^^1^972^9163000

	var arrPhone = phone.split(&quot;-&quot;);
	if (arrPhone.length &lt;= 1) return &quot;^^^^^^^^&quot; + phone;

	// 1-972-9163000
	if (phone.match(/\d{1}-\d{3}-\d{7}/) != null) {
		// ^^PH^^1^734^6777777
		return &quot;^^PH^^&quot; + arrPhone[0] + &quot;^&quot; + arrPhone[1] + &quot;^&quot; + arrPhone[2];

	// 1-972-916-3000	
	} else if (phone.match(/\d{1}-\d{3}-\d{3}-\d{4}/) != null) {
		// ^^PH^^1^734^6777777
		return &quot;^^PH^^&quot; + arrPhone[0] + &quot;^&quot; + arrPhone[1] + &quot;^&quot; + arrPhone[2] + arrPhone[3];

	// 972-9163000	
	} else if (phone.match(/\d{3}-\d{7}/) != null) {
		// ^^PH^^^734^6777777
		return &quot;^^PH^^^&quot; + arrPhone[0] + &quot;^&quot; + arrPhone[1];

	// 972-916-3000
	} else if (phone.match(/\d{3}-\d{3}-\d{4}/) != null) {
		// ^^PH^^^972^9163000
		return &quot;^^PH^^^&quot; + arrPhone[0] + &quot;^&quot; + arrPhone[1] + arrPhone[2];

	// 9163000
	} else if (phone.match(/\d{7}/) != null) {
		// ^^PH^^^^9163000
		return &quot;^^PH^^^^&quot; + arrPhone[0];

	// 916-3000
	} else if (phone.match(/\d{3}-\d{4}/) != null) {
		// ^^PH^^^^9163000
		return &quot;^^PH^^^^&quot; + arrPhone[0] + arrPhone[1];
		
	} else
		return &quot;^^^^^^^^&quot; + phone; 

}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>58a19daa-aada-46ac-ae7f-2b5e5848405b</id>
          <name>Create OperationOutcome resource</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077663</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Creates OperationOutcome resource to inform about validation errors
	
	@param {Array} error - A list of errors or comments
	@param {Object} issue - An object with severity, code and details associated with outcome
	@param {Object} messages - An object with inbounb and outbound messages to be logged
	@param {String} uuid - A string with uuid to pair request and response FHIR feeds	
	@param {String} format - A resource output format (xml | json)	
	@return {String} outcome - OperationOutcome resource in required format
*/
function getOperationOutcome(error, issue, messages, uuid, format) {

	// Expected issue object format:
	// var issue = {severity: &quot;&quot;, code: &quot;&quot;, details: &quot;&quot;};

	// Expected messages object format:
	// var messages = {request: &quot;&quot;, resp: &quot;&quot;};

	// Namespaces are required to validate against FHIR XML Schema
	if (format.toUpperCase() != &quot;JSON&quot;) 
		default xml namespace = &quot;http://hl7.org/fhir&quot;;
		
	var outcome = &lt;OperationOutcome&gt;
				&lt;id value=&quot;responsestatus&quot;/&gt;
				&lt;extension url=&quot;request&quot;&gt;
					&lt;valueBase64Binary value=&quot;&quot;/&gt;
				&lt;/extension&gt;
				&lt;extension url=&quot;response&quot;&gt;
					&lt;valueBase64Binary value=&quot;&quot;/&gt;
				&lt;/extension&gt;
				&lt;issue&gt;
					&lt;severity value=&quot;&quot;/&gt;
					&lt;code value=&quot;&quot;/&gt;
					&lt;details&gt;
						&lt;text value=&quot;&quot;/&gt;
					&lt;/details&gt;
				&lt;/issue&gt;
			&lt;/OperationOutcome&gt;;

	if (uuid != null &amp;&amp; uuid != undefined &amp;&amp; uuid.toString() != &quot;&quot;) 
		outcome.id.@value = &quot;responsestatus&quot; + uuid;
		
	outcome.issue.severity.@value = issue.severity;
	outcome.issue.code.@value = issue.code;
	outcome.issue.details.text.@value = issue.details;

	// xhtml namespace is intentionally removed
	var text = &lt;text&gt;
			    	&lt;status value=&quot;generated&quot;/&gt;
			    	&lt;div/&gt;
			  &lt;/text&gt;;

	text.div.* = new XMLList();
	error.forEach(function(n){
	  text.div.* += new XML(&quot;&lt;p&gt;&quot; + n +&quot;&lt;/p&gt;&quot;);
	});

	outcome.id += text;

	// If request or response messages are available, encode them
	if (messages.request != undefined &amp;&amp; messages.request.toString() != &quot;&quot;) 
		outcome.extension.(@url == &quot;request&quot;)[0].valueBase64Binary.@value = getBase64Encoded(messages.request.toString());	
	else
		delete outcome.extension.(@url == &quot;request&quot;)[0];


	if (messages.resp != undefined &amp;&amp; messages.resp.toString() != &quot;&quot;) 	
		outcome.extension.(@url == &quot;response&quot;)[0].valueBase64Binary.@value = getBase64Encoded(messages.resp.toString());
	else
		delete outcome.extension.(@url == &quot;response&quot;)[0];

	// Convert to a requested format
	if (format.toUpperCase() == &quot;JSON&quot;) {
		return convertXMLtoJSON(outcome.toString());		
	} else {
		// Namespace is required to validate FHIR XML
		outcome = outcome.toString().replace(&apos;&lt;div&gt;&apos;, &apos;&lt;div  xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&apos;);
		return outcome.toString();
	}
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>52360391-d3f2-4714-8bd3-98c53c85c387</id>
          <name>Fix HL7v2 node order</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077814</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.
	@param {String} node - The node to be fixed
	@return {String} return - E4X node
*/
/*
	Author: Nick Rupley
	Date Modified: 4/18/2012
*/
function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

// Helper function for fixHL7NodeOrder
function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>711f9e92-9872-4718-83aa-f8e62e3885b2</id>
          <name>Get Base64 encoded string</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077840</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Encodes given string into a Base64 string.

	@param {String} strData - String to be encoded
	@return {String} return Base64 encoded string
*/
function getBase64Encoded(strData) {
	
	try {
		
		if (null == strData) strData = &apos;&apos;;
		var byteData = new Packages.java.lang.String(strData).getBytes();
		return FileUtil.encode(byteData).replaceAll(&apos;\r\n|\r|\n&apos;, &apos;&apos;);

	} catch(err) {
		logger.error(err);
		return &quot;&quot;;
	}
}
</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>872dae30-3381-458c-a4e5-4f412e21b1fa</id>
          <name>Get HL7v2 Code Description</name>
          <revision>1</revision>
          <lastModified>
            <time>1490476779449</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Retrieve code description for a given HL7v2 table (to be used for ORC, OBR and OBX segments)

	@param {String} table - HL7v2 Table code as per specification
	@param {String] value - value to convert
	@return {String} return code description
*/
function getHL7v2CodeDescription(table, value) {

	switch(table) {
		
		// Table 0038 - Order Status
		case &quot;0038&quot;:
			if (&quot;CM&quot; === value.toString()) return &quot;Order complete&quot;
			else if (&quot;IP&quot; === value.toString()) return &quot;Order incomplete, or contains pending items&quot;
			else if (&quot;CA&quot; === value.toString()) return &quot;Order was canceled&quot;
			else if (&quot;DC&quot; === value.toString()) return &quot;Order was discontinued&quot;
			else if (&quot;ER&quot; === value.toString()) return &quot;Error, order not found&quot;
			else if (&quot;HD&quot; === value.toString()) return &quot;Order is on hold&quot;
			else if (&quot;RP&quot; === value.toString()) return &quot;Order has been replaced&quot;
			else if (&quot;SC&quot; === value.toString()) return &quot;In process, scheduled&quot;
			else if (&quot;&quot; === value.toString()) return &quot;&quot;
			else return &quot;&quot;;
			break;

		// Table 0123 - Result Status
		case &quot;0123&quot;:
			if (&quot;F&quot; === value.toString()) return &quot;Final results&quot;
			else if (&quot;A&quot; === value.toString()) return &quot;Partial results&quot;
			else if (&quot;C&quot; === value.toString()) return &quot;Correction to results&quot;
			else if (&quot;I&quot; === value.toString()) return &quot;No results available. The specimen was received, but the procedure is incomplete.&quot;
			else if (&quot;O&quot; === value.toString()) return &quot;Specimen not yet received&quot;
			else if (&quot;P&quot; === value.toString()) return &quot;Preliminary results&quot;
			else if (&quot;R&quot; === value.toString()) return &quot;Results stored&quot;
			else if (&quot;S&quot; === value.toString()) return &quot;No results available. The procedure is scheduled, but has not been performed.&quot;
			else if (&quot;X&quot; === value.toString()) return &quot;No results available. The order was canceled.&quot;
			else return &quot;&quot;;		
			break;

		// Table 0085 - Observation Result Status
		case &quot;0085&quot;:
			if (&quot;F&quot; === value.toString()) return &quot;Final results; can only be changed with a corrected result.&quot;
			else if (&quot;D&quot; === value.toString()) return &quot;Deletes the OBX record&quot;
			else if (&quot;I&quot; === value.toString()) return &quot;Specimen in lab; results pending.&quot;
			else if (&quot;N&quot; === value.toString()) return &quot;Not asked; used to affirmatively document that the observation identified in the OBX was not sought when the universal service ID in OBR.04 implies that it would be sought.&quot;
			else if (&quot;O&quot; === value.toString()) return &quot;Order detail description only (no result)&quot;
			else if (&quot;P&quot; === value.toString()) return &quot;Preliminary results&quot;
			else if (&quot;R&quot; === value.toString()) return &quot;Results entered but not verified&quot;
			else if (&quot;X&quot; === value.toString()) return &quot;Results cannot be obtained for this observation&quot;
			else if (&quot;U&quot; === value.toString()) return &quot;Results status change to final without retransmitting results already sent as preliminary. For example, radiology changes status from preliminary to final.&quot;
			else if (&quot;W&quot; === value.toString()) return &quot;Post original as wrong. For example, transmitted for wrong patient.&quot;
			else return &quot;&quot;;
			break;
	}

	return &quot;&quot;;
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>53e03352-fda6-455a-bc6a-54f1b3287838</id>
          <name>Get NTE segment</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077721</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Builds NTE segment with the comment entry from a single /text/div/p resource element
	Expected comment entry object is {&quot;class&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;}

	// TODO: may require a flag to NOT restrict comment line longer than 60 chars as required for the Order message

	@param {String} entry - JSON object with comment entries
	@param {String} count - total NTE segment count i.e., NTE.1 [Set ID]	
	@return {String} return NTE segment string in XML format
*/
function getNTESegment(entry, count) {

	if (entry != undefined) {

		var nte = &lt;NTE&gt;
					&lt;NTE.1&gt;
						&lt;NTE.1.1&gt;&lt;/NTE.1.1&gt;
					&lt;/NTE.1&gt;
					&lt;NTE.2&gt;
						&lt;NTE.2.1&gt;&lt;/NTE.2.1&gt;
					&lt;/NTE.2&gt;
					&lt;NTE.3&gt;
						&lt;NTE.3.1&gt;&lt;/NTE.3.1&gt;
					&lt;/NTE.3&gt;
				&lt;/NTE&gt;;

		// NTE.1 [Set ID]		
		nte[&apos;NTE.1&apos;][&apos;NTE.1.1&apos;] = count;
			
		// NTE.2 [Source of Comment]
		nte[&apos;NTE.2&apos;][&apos;NTE.2.1&apos;] = entry.class.toString();

		// NTE.3 [Comment]
		// Comment shall be no longer than 60 characters for the OML_O21 Submit Order message
		if (entry.content.toString().length &gt; 60)
			entry.content = entry.content.toString().substring(0,60);
			
		nte[&apos;NTE.3&apos;][&apos;NTE.3.1&apos;] = entry.content.toString();

		return nte.toString();
		
	} else 
		return &quot;&quot;;
		
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>0f2c8346-d098-49b3-8e97-184eef9fc7b4</id>
          <name>HTTP Response Code indications</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077971</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Add the HTTP response status code description to the HTTP code

	@param {Integer} code - HTTP response status code
	@return {String} return HTTP response status code and its description
*/
function getHttpCodeDescription(code) {

	var text;
	
	switch(code) {
		case 200:
			text = &quot;OK&quot;;
			break;
		case 400:
			text = &quot;The request was not properly constructed&quot;;
			break;
		case 401:
			text = &quot;The user credentials submitted are not authorized&quot;;
			break;
		case 403:
			text = &quot;The user name submitted does not have permission to access the Results RESTful web service&quot;;
			break;
		case 404:
			text = &quot;The user credentials submitted are not authorized&quot;;
			break;
		case 500:
			text = &quot;An internal server error occurred&quot;;
			break;	        
		default:
			text = &quot;This response status code is undefined in the DEX spec&quot;;
	}

	return (code + &quot; - &quot; + text);
	
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>5032a64e-7da6-4885-83e2-348e5ab75600</id>
          <name>Parse person&apos;s name node</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077624</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Process Person.name element with zero or multiple given names with possible DEX name length limitation

	@param {Object} item - JSON representation of /resource/Person/name node
	@param {Boolean} lengthLimit - If person&apos;s name limitation applies according to DEX spec (true - apply, false - does not)	
	@return {Object} return name parts object with family and given names
*/
function processPersonName(item, lengthLimit) {

	var nameParts = {family: &quot;&quot;, given1: &quot;&quot;, given2: &quot;&quot;};

	if (item.family != null &amp;&amp; item.family != undefined) {
		
		// Last name of the person
		var family = item.family.value.toString();
		
		// If Quest&apos;s length limit applies
		if (lengthLimit) {
			// The last name can be a maximum of 20 characters. (p.201)
			if (family.length &gt; 20) 
				family = family.substring(0, 20);
			// The entire patient name cannot exceed 24 characters (p.201)
			var limit = 24 - family.length;
		}
		nameParts.family = family;
	}

	if (item.given == null || item.given == undefined) return nameParts;
		
	if (item.given.length != undefined) {
		
		var count = 0;
		item.given.forEach(function(entry){
			var given = entry.value.toString();
			
			if (given.length &gt; 0) {					
				if (0 == count) {
					// The first name is limited to the difference between the number of characters in the last name and 24.				
					if (given.length &gt; limit &amp;&amp; lengthLimit) given = given.substring(0, limit);
					nameParts.given1 = given;
					limit -= given.length;
				} else {
					// if the limit is exceeded, a minimum of the first character of the middle initial is always returned in the result message.
					if (given.length &gt; limit &amp;&amp; lengthLimit) given = given.substring(0, 1);
					nameParts.given2 = given;
				}
			}
			count++;
		});			
	} else {
		var given = item.given.value.toString();
		if (given.length &gt; limit &amp;&amp; lengthLimit) given = given.substring(0, limit);
		nameParts.given1 = given;
	}

	return nameParts;
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>08f30179-5465-4895-a2d3-4933f182035e</id>
          <name>Remove illegal XML chanracters</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609078114</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Strip non valid XML characters from a given text string.
	CAUTION: This is not a full-fledged function for XML input sanitization 

	@param {String} text - text string that may contain illegal XML characters
	@return {String} return text string with illegal XML characters replaced
*/
function stripNonValidXMLChars(text) {

	if (text == null || text == undefined || text.toString().length == 0) return &quot;&quot;;

	//text = comment.replace(/&amp;/g,&quot;&amp;amp;&quot;);// ampersand - (SN) temporary disabled
	text = text.replace(/&lt;/g,&quot;&amp;lt;&quot;); // less than
	text = text.replace(/&gt;/g,&quot;&amp;gt;&quot;); // greater than
	text = text.replace(/&apos;/g,&quot;&amp;apos;&quot;); // single quotes
	text = text.replace(/&quot;/g,&quot;&amp;apos;&quot;); // double quotes

	// (SN) Issue #6, #11: unexpected &quot;%&quot; in field
	text = text.replace(/\|%/g, &quot;|&quot;);

	return text;
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>15559e88-2f64-415a-8544-9cbbc2742c79</id>
          <name>Verifies if Lab test is STD</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077902</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Verifies if the submitted Lab test code is in the list of STD lab tests

	@param {String} code - Lab test code
	@return {String} return true if Lab test code in the list of STD codes, false otherwise
*/
function isSTDLabTest(code) {

	// Check for LOINC codes
	switch(code) {
		// 86631, 86632 Chlamydia trachomatis Antibodies 
		case &quot;1833274&quot;:
		case &quot;1832970&quot;:
		case &quot;1833579&quot;:
		case &quot;44079-2&quot;:
		// 87591 Neisseria gonorrhoeae
		case &quot;43305-2&quot;:
		// 86704	Hepatitis A
		case &quot;13951-9&quot;:
		// 87340	Hepatitis B
		case &quot;1203841&quot;:
		case &quot;2193342&quot;:
		case &quot;10900-9&quot;:
		case &quot;13952-7&quot;:
		// 81001	Hepatitis C (Urinalysis, Complete)
		case &quot;13955-0&quot;:
		case &quot;48159-8&quot;:
		// 86695	Herpes Simplex Virus 1 (IgG)
		case &quot;1207706&quot;:
		// 86696	Herpes Simplex Virus 2 (IgG)
		case &quot;1208621&quot;:
		// 86592	VDRL, Serum (Syphilis)
		case &quot;1239118&quot;:
		// 86701	HIV-1 Antibody
		case &quot;29893-5&quot;:
		// 86702	HIV-2 Antibody
		case &quot;30361-0&quot;:
		// 87389	HIV-1/2 Antig. and Antib.,4th Gen
		case &quot;56888-1&quot;:
			return true;
			break;
	}

	return false;
	
}</code>
        </codeTemplate>
      </codeTemplates>
    </codeTemplateLibrary>
  </codeTemplateLibraries>
  <dependentIds/>
</channel>