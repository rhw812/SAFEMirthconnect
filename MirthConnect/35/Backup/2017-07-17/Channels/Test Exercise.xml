<channel version="3.4.2">
  <id>e38ce6d8-cdfc-4a8a-877a-6688edb368ee</id>
  <nextMetaDataId>4</nextMetaDataId>
  <name>Test Exercise</name>
  <description>LRI ORU_R01 processing downstream channel.
The channel receives ORU_R01 messages routed from the LRI getResults channel.

(SN) This channel should use Strict Parser for incoming HL7v2 ORU messages.

Last updated: March 25, 2017</description>
  <enabled>false</enabled>
  <lastModified>
    <time>1497207049534</time>
    <timezone>America/New_York</timezone>
  </lastModified>
  <revision>16</revision>
  <sourceConnector version="3.4.2">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.4.2">
      <pluginProperties/>
      <sourceConnectorProperties version="3.4.2">
        <responseVariable>None</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
    </properties>
    <transformer version="3.4.2">
      <steps/>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>HL7V2</inboundDataType>
      <outboundDataType>HL7V2</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.4.2">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.4.2">
          <handleRepetitions>true</handleRepetitions>
          <handleSubcomponents>true</handleSubcomponents>
          <useStrictParser>true</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <stripNamespaces>true</stripNamespaces>
          <segmentDelimiter>\r</segmentDelimiter>
          <convertLineBreaks>true</convertLineBreaks>
        </serializationProperties>
        <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.4.2">
          <useStrictParser>false</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <segmentDelimiter>\r</segmentDelimiter>
        </deserializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.4.2">
          <splitType>MSH_Segment</splitType>
          <batchScript></batchScript>
        </batchProperties>
        <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.4.2">
          <segmentDelimiter>\r</segmentDelimiter>
          <successfulACKCode>AA</successfulACKCode>
          <successfulACKMessage></successfulACKMessage>
          <errorACKCode>AE</errorACKCode>
          <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
          <rejectedACKCode>AR</rejectedACKCode>
          <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
          <msh15ACKAccept>false</msh15ACKAccept>
          <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
        </responseGenerationProperties>
        <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.4.2">
          <successfulACKCode>AA,CA</successfulACKCode>
          <errorACKCode>AE,CE</errorACKCode>
          <rejectedACKCode>AR,CR</rejectedACKCode>
          <validateMessageControlId>true</validateMessageControlId>
          <originalMessageControlId>Destination_Encoded</originalMessageControlId>
          <originalIdMapVariable></originalIdMapVariable>
        </responseValidationProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.4.2">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.4.2">
          <handleRepetitions>true</handleRepetitions>
          <handleSubcomponents>true</handleSubcomponents>
          <useStrictParser>true</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <stripNamespaces>true</stripNamespaces>
          <segmentDelimiter>\r</segmentDelimiter>
          <convertLineBreaks>true</convertLineBreaks>
        </serializationProperties>
        <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.4.2">
          <useStrictParser>true</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <segmentDelimiter>\r</segmentDelimiter>
        </deserializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.4.2">
          <splitType>MSH_Segment</splitType>
          <batchScript></batchScript>
        </batchProperties>
        <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.4.2">
          <segmentDelimiter>\r</segmentDelimiter>
          <successfulACKCode>AA</successfulACKCode>
          <successfulACKMessage></successfulACKMessage>
          <errorACKCode>AE</errorACKCode>
          <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
          <rejectedACKCode>AR</rejectedACKCode>
          <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
          <msh15ACKAccept>false</msh15ACKAccept>
          <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
        </responseGenerationProperties>
        <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.4.2">
          <successfulACKCode>AA,CA</successfulACKCode>
          <errorACKCode>AE,CE</errorACKCode>
          <rejectedACKCode>AR,CR</rejectedACKCode>
          <validateMessageControlId>true</validateMessageControlId>
          <originalMessageControlId>Destination_Encoded</originalMessageControlId>
          <originalIdMapVariable></originalIdMapVariable>
        </responseValidationProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.4.2">
      <rules>
        <rule>
          <sequenceNumber>0</sequenceNumber>
          <name>Check for ORU messages</name>
          <data>
            <entry>
              <string>Script</string>
              <string>// Continue processing only if the incoming message is ORU_R01
if(&quot;ORU&quot; == msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSG.1&apos;].toString() &amp;&amp; &quot;R01&quot; == msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSG.2&apos;].toString()) {
	return true;
} else {
	logger.error(&quot;ORU Processing: non-ORU message is rejected &quot; + msg.toString());
	return false;
}</string>
            </entry>
          </data>
          <type>JavaScript</type>
          <script>// Continue processing only if the incoming message is ORU_R01
if(&quot;ORU&quot; == msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSG.1&apos;].toString() &amp;&amp; &quot;R01&quot; == msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSG.2&apos;].toString()) {
	return true;
} else {
	logger.error(&quot;ORU Processing: non-ORU message is rejected &quot; + msg.toString());
	return false;
}</script>
          <operator>NONE</operator>
        </rule>
      </rules>
    </filter>
    <transportName>Channel Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.4.2">
      <metaDataId>1</metaDataId>
      <name>ORU_R01_2.5.1</name>
      <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <channelId>none</channelId>
        <channelTemplate>${DR}</channelTemplate>
        <mapVariables/>
      </properties>
      <transformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>DiagnosticReport resource</name>
            <script>var arrDiagnosticReport = [];
var arrOrderingProvider = [];
var arrProviderID = [];

/*
* (SN) Practitioner resource for Performing Organization or Medical Doctor is not mapped (see comments below)
*
*/ 

//logger.error( msg.toString() );
//logger.error( msg[&apos;ORU_R01.PATIENT_RESULT&apos;].toString() );
//logger.error( msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.ORDER_OBSERVATION&apos;][0].toString() );
//logger.error( msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.ORDER_OBSERVATION&apos;][0][&apos;ORU_R01.OBSERVATION&apos;][0].toString() );
//logger.error( msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.ORDER_OBSERVATION&apos;][0][&apos;ORU_R01.OBSERVATION&apos;][0][&apos;OBX&apos;][0].toString() );
//logger.error( msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.ORDER_OBSERVATION&apos;][0][&apos;ORU_R01.OBSERVATION&apos;][0][&apos;OBX&apos;][0].toString() );

for each (var observation in msg[&apos;ORU_R01.PATIENT_RESULT&apos;].children()) {

	var resDiagnosticReport = &lt;DiagnosticReport&gt;&lt;text&gt;&lt;status value=&quot;generated&quot;/&gt;&lt;xhtml:div xmlns:xhtml=&quot;http://www.w3.org/1999/xhtml&quot;/&gt;&lt;/text&gt;&lt;/DiagnosticReport&gt;;
	
	for each (var obs in observation[&apos;ORU_R01.OBSERVATION&apos;].children()) 
	{
		var containedObservation = &lt;contained&gt;&lt;/contained&gt;;		
		if (&quot;OBX&quot; == obs.name().toString() &amp;&amp; obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString() != &quot;&quot;)
		{
			containedObservation.appendChild( getObservationResourcePopulated( obs ) );
			resDiagnosticReport.appendChild(containedObservation);	
		}
	}

	logger.error( resDiagnosticReport.toString() );
}

/*
for each (var observation in msg[&apos;ORU_R01.PATIENT_RESULT&apos;].children()) {

	// Process only ORC-OBR-OBX group
	if (observation[&apos;ORC&apos;][&apos;ORC.1&apos;].toString() != &quot;RE&quot;) { continue; }

	// Ignore &quot;comment&quot; or PDF results
	var invokeContinue = false;
	for each (var obs in observation[&apos;ORU_R01.OBSERVATION&apos;].children()) 
	{
		if (&quot;OBX&quot; == obs.name().toString() &amp;&amp; ( obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString() == &quot;ClinicalPDFReport1&quot; || obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString() == &quot;EnhancedPDFReport1&quot; ))
		{
			invokeContinue = true;
		}
	}	
	
	if( invokeContinue ){ continue; }; 
	
// logger.error( &quot;Processing Observation&quot; );

	var PlacerOrderNumber = observation[&apos;ORC&apos;][&apos;ORC.2&apos;][&apos;EI.1&apos;].toString();
	var PlacerNamespace   = observation[&apos;ORC&apos;][&apos;ORC.2&apos;][&apos;EI.2&apos;].toString();
	var FillerOrderNumber = observation[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;EI.1&apos;].toString();
	var FillerNamespace   = observation[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;EI.2&apos;].toString();

	var StatusCode = observation[&apos;ORC&apos;][&apos;ORC.5&apos;].toString();
	
	var TestCode    = observation[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;CE.1&apos;].toString();
	var TestHasParent     = false;

	// Does result have a parent?
	if( TestCode.indexOf( &quot;%&quot; ) &gt; -1 )
	{
		TestCode = TestCode.replace( &apos;%&apos;, &apos;&apos; );
		TestHasParent = true;	
	}
	
	var resDiagnosticReport = &lt;DiagnosticReport&gt;&lt;text&gt;&lt;status value=&quot;generated&quot;/&gt;&lt;xhtml:div xmlns:xhtml=&quot;http://www.w3.org/1999/xhtml&quot;/&gt;&lt;/text&gt;&lt;/DiagnosticReport&gt;;

	var contained = 0;
	
//msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.ORDER_OBSERVATION&apos;][0][&apos;ORU_R01.OBSERVATION&apos;][0][&apos;OBX&apos;][&apos;OBX.3&apos;][&apos;CE.1&apos;].toString()

	var resultReference = &lt;contained&gt;&lt;/contained&gt;;
	// Reference to contained observations
	for each (var obs in observation[&apos;ORU_R01.OBSERVATION&apos;].children()) 
	{
		if (&quot;OBX&quot; == obs.name().toString() &amp;&amp; obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString() != &quot;&quot;)
		{
			resultReference.appendChild( getObservationResourcePopulated( obs ) );
			logger.error( &quot;Observation: &quot; + getObservationResourcePopulated( obs ).toString() );			
		}
	}	
	
	resDiagnosticReport.appendChild(resultReference);

		
	// Order Status - Indicates whether the result is partial or final.
	if (StatusCode){
		var statusXML = &lt;status value=&quot;final&quot;&gt;&lt;/status&gt;;
		resDiagnosticReport.appendChild(statusXML);
	}

	resDiagnosticReport.code.@id = TestCode;

	// Hard-coded, required by FHIR
	var subXML = &lt;subject&gt;&lt;reference value=&quot;Patient&quot;/&gt;&lt;/subject&gt;;
	subXML.reference.@value = &quot;Patient/&quot; + $(&apos;PatientResourceID&apos;);
	resDiagnosticReport.appendChild(subXML);
	

	var resultReference = &lt;result&gt;&lt;/result&gt;;

	// Reference to observation this report is based on
	for each (var obs in observation[&apos;ORU_R01.OBSERVATION&apos;].children()) 
	{
		if (&quot;OBX&quot; == obs.name().toString() &amp;&amp; obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString() != &quot;&quot;) 
		{
			var obsReference = &lt;reference value=&quot;&quot;/&gt;;
			obsReference.@value =  &quot;#&quot; + obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString();
			resultReference.appendChild(obsReference);	
		}	
	}

	resDiagnosticReport.appendChild(resultReference);	

	logger.error( resDiagnosticReport.toString() );
	
//	arrDiagnosticReport.push(resDiagnosticReport.toString());


}
*/

function getObservationResourcePopulated(obs) {

	importPackage( Packages.java.util );
	importPackage( Packages.org.hl7.fhir.instance.model );
	importPackage( Packages.ca.uhn.fhir.model.dstu2.resource );
	importPackage( Packages.ca.uhn.fhir.model.dstu2.valueset );
	importPackage( Packages.ca.uhn.fhir.model.primitive );
	importPackage( Packages.ca.uhn.fhir.model.dstu2.composite );
	importPackage( Packages.java.text );

	var ctx = Packages.ca.uhn.fhir.context.FhirContext.forDstu2();	

	var HL7DateFormat = new SimpleDateFormat(&quot;yyyyMMdd&quot;);

	var obsResource = new Observation();

	obsResource.setId( obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString());				
		
	obsResource.addIdentifier().setValue(obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString());

	switch( obs[&apos;OBX.11&apos;].toString() + &apos;&apos; )
	{
		case &quot;F&quot;:
			obsResource.setStatus(ObservationStatusEnum.FINAL);				
		break;

		case &quot;P&quot;:
			obsResource.setStatus(ObservationStatusEnum.PRELIMINARY);			
		break;

		case &quot;S&quot;:
			obsResource.setStatus(ObservationStatusEnum.AMENDED);	
		break;

		case &quot;C&quot;:
			obsResource.setStatus(ObservationStatusEnum.CANCELLED);
		break;

		case &quot;X&quot;:
			obsResource.setStatus(ObservationStatusEnum.UNKNOWN_STATUS);
		break;
					
		default:
			obsResource.setStatus(ObservationStatusEnum.UNKNOWN_STATUS);
			logger.error( &quot;Unrecognized Status Code: &quot; + obs[&apos;OBX.11&apos;].toString() );	
	}

	var theCodeableConcept = new CodeableConceptDt();
	var theLoincCoding = new CodingDt();
	var theQuestCoding = new CodingDt();
	
	if (obs[&apos;OBX.3&apos;][&apos;CE.6&apos;].toString() == &quot;LN&quot;) 
	{
		// LOINC coding
		theLoincCoding.setSystem(&quot;http://loinc.org&quot;);
		theLoincCoding.setCode(obs[&apos;OBX.3&apos;][&apos;CE.4&apos;].toString());
		theLoincCoding.setDisplay(obs[&apos;OBX.3&apos;][&apos;CE.5&apos;].toString());
		theCodeableConcept.addCoding(theLoincCoding );		
	}

	theQuestCoding.setSystem(obs[&apos;OBX.3&apos;][&apos;CE.3&apos;].toString());
	theQuestCoding.setCode(obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString());
	theQuestCoding.setDisplay(obs[&apos;OBX.3&apos;][&apos;CE.2&apos;].toString());
	theCodeableConcept.addCoding(theQuestCoding );				

	obsResource.setCode(theCodeableConcept );

	var HL7TimestampFormatWithTZ = new SimpleDateFormat( &quot;yyyyMMddHHmmss.SSSZ&quot;);

	if( obs[&apos;OBX.19&apos;][&apos;TS.1&apos;].toString() )
	{
		obsResource.setIssuedWithMillisPrecision(HL7TimestampFormatWithTZ.parse(obs[&apos;OBX.19&apos;][&apos;TS.1&apos;].toString()));
	}
	obsResource.setValue( new StringDt( obs[&apos;OBX.5&apos;][&apos;SN.1&apos;].toString() +  obs[&apos;OBX.5&apos;][&apos;SN.2&apos;].toString() +  obs[&apos;OBX.5&apos;][&apos;SN.3&apos;].toString() +  obs[&apos;OBX.5&apos;][&apos;SN.4&apos;].toString() ) );

	var theInterpretation = new CodeableConceptDt();
	theInterpretation.setText(obs[&apos;OBX.8&apos;].toString());	
	obsResource.setInterpretation(theInterpretation );	

	var theReferenceRange = new Observation.ReferenceRange();
	var theMeaningCoding = new CodeableConceptDt();
	var theReferenceRangeMeaningCoding = new CodingDt();	

	theReferenceRangeMeaningCoding.setCode(obs[&apos;OBX.6&apos;][&apos;CE.1&apos;].toString());
	theReferenceRangeMeaningCoding.setSystem(obs[&apos;OBX.6&apos;][&apos;CE.3&apos;].toString());
	theReferenceRangeMeaningCoding.setDisplay(obs[&apos;OBX.6&apos;][&apos;CE.2&apos;].toString());

	theMeaningCoding.addCoding(theReferenceRangeMeaningCoding );
	theReferenceRange.setText(obs[&apos;OBX.7&apos;].toString());
		
	theReferenceRange.setMeaning(theMeaningCoding );
	obsResource.addReferenceRange(theReferenceRange);	

//	logger.error( &quot;Contained Observation: \n&quot; + obsResource.toString() );
	return new XML( ctx.newXmlParser().encodeResourceToString(obsResource) );
}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>var arrDiagnosticReport = [];
var arrOrderingProvider = [];
var arrProviderID = [];

/*
* (SN) Practitioner resource for Performing Organization or Medical Doctor is not mapped (see comments below)
*
*/ 

//logger.error( msg.toString() );
//logger.error( msg[&apos;ORU_R01.PATIENT_RESULT&apos;].toString() );
//logger.error( msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.ORDER_OBSERVATION&apos;][0].toString() );
//logger.error( msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.ORDER_OBSERVATION&apos;][0][&apos;ORU_R01.OBSERVATION&apos;][0].toString() );
//logger.error( msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.ORDER_OBSERVATION&apos;][0][&apos;ORU_R01.OBSERVATION&apos;][0][&apos;OBX&apos;][0].toString() );
//logger.error( msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.ORDER_OBSERVATION&apos;][0][&apos;ORU_R01.OBSERVATION&apos;][0][&apos;OBX&apos;][0].toString() );

for each (var observation in msg[&apos;ORU_R01.PATIENT_RESULT&apos;].children()) {

	var resDiagnosticReport = &lt;DiagnosticReport&gt;&lt;text&gt;&lt;status value=&quot;generated&quot;/&gt;&lt;xhtml:div xmlns:xhtml=&quot;http://www.w3.org/1999/xhtml&quot;/&gt;&lt;/text&gt;&lt;/DiagnosticReport&gt;;
	
	for each (var obs in observation[&apos;ORU_R01.OBSERVATION&apos;].children()) 
	{
		var containedObservation = &lt;contained&gt;&lt;/contained&gt;;		
		if (&quot;OBX&quot; == obs.name().toString() &amp;&amp; obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString() != &quot;&quot;)
		{
			containedObservation.appendChild( getObservationResourcePopulated( obs ) );
			resDiagnosticReport.appendChild(containedObservation);	
		}
	}

	logger.error( resDiagnosticReport.toString() );
}

/*
for each (var observation in msg[&apos;ORU_R01.PATIENT_RESULT&apos;].children()) {

	// Process only ORC-OBR-OBX group
	if (observation[&apos;ORC&apos;][&apos;ORC.1&apos;].toString() != &quot;RE&quot;) { continue; }

	// Ignore &quot;comment&quot; or PDF results
	var invokeContinue = false;
	for each (var obs in observation[&apos;ORU_R01.OBSERVATION&apos;].children()) 
	{
		if (&quot;OBX&quot; == obs.name().toString() &amp;&amp; ( obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString() == &quot;ClinicalPDFReport1&quot; || obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString() == &quot;EnhancedPDFReport1&quot; ))
		{
			invokeContinue = true;
		}
	}	
	
	if( invokeContinue ){ continue; }; 
	
// logger.error( &quot;Processing Observation&quot; );

	var PlacerOrderNumber = observation[&apos;ORC&apos;][&apos;ORC.2&apos;][&apos;EI.1&apos;].toString();
	var PlacerNamespace   = observation[&apos;ORC&apos;][&apos;ORC.2&apos;][&apos;EI.2&apos;].toString();
	var FillerOrderNumber = observation[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;EI.1&apos;].toString();
	var FillerNamespace   = observation[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;EI.2&apos;].toString();

	var StatusCode = observation[&apos;ORC&apos;][&apos;ORC.5&apos;].toString();
	
	var TestCode    = observation[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;CE.1&apos;].toString();
	var TestHasParent     = false;

	// Does result have a parent?
	if( TestCode.indexOf( &quot;%&quot; ) &gt; -1 )
	{
		TestCode = TestCode.replace( &apos;%&apos;, &apos;&apos; );
		TestHasParent = true;	
	}
	
	var resDiagnosticReport = &lt;DiagnosticReport&gt;&lt;text&gt;&lt;status value=&quot;generated&quot;/&gt;&lt;xhtml:div xmlns:xhtml=&quot;http://www.w3.org/1999/xhtml&quot;/&gt;&lt;/text&gt;&lt;/DiagnosticReport&gt;;

	var contained = 0;
	
//msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.ORDER_OBSERVATION&apos;][0][&apos;ORU_R01.OBSERVATION&apos;][0][&apos;OBX&apos;][&apos;OBX.3&apos;][&apos;CE.1&apos;].toString()

	var resultReference = &lt;contained&gt;&lt;/contained&gt;;
	// Reference to contained observations
	for each (var obs in observation[&apos;ORU_R01.OBSERVATION&apos;].children()) 
	{
		if (&quot;OBX&quot; == obs.name().toString() &amp;&amp; obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString() != &quot;&quot;)
		{
			resultReference.appendChild( getObservationResourcePopulated( obs ) );
			logger.error( &quot;Observation: &quot; + getObservationResourcePopulated( obs ).toString() );			
		}
	}	
	
	resDiagnosticReport.appendChild(resultReference);

		
	// Order Status - Indicates whether the result is partial or final.
	if (StatusCode){
		var statusXML = &lt;status value=&quot;final&quot;&gt;&lt;/status&gt;;
		resDiagnosticReport.appendChild(statusXML);
	}

	resDiagnosticReport.code.@id = TestCode;

	// Hard-coded, required by FHIR
	var subXML = &lt;subject&gt;&lt;reference value=&quot;Patient&quot;/&gt;&lt;/subject&gt;;
	subXML.reference.@value = &quot;Patient/&quot; + $(&apos;PatientResourceID&apos;);
	resDiagnosticReport.appendChild(subXML);
	

	var resultReference = &lt;result&gt;&lt;/result&gt;;

	// Reference to observation this report is based on
	for each (var obs in observation[&apos;ORU_R01.OBSERVATION&apos;].children()) 
	{
		if (&quot;OBX&quot; == obs.name().toString() &amp;&amp; obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString() != &quot;&quot;) 
		{
			var obsReference = &lt;reference value=&quot;&quot;/&gt;;
			obsReference.@value =  &quot;#&quot; + obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString();
			resultReference.appendChild(obsReference);	
		}	
	}

	resDiagnosticReport.appendChild(resultReference);	

	logger.error( resDiagnosticReport.toString() );
	
//	arrDiagnosticReport.push(resDiagnosticReport.toString());


}
*/

function getObservationResourcePopulated(obs) {

	importPackage( Packages.java.util );
	importPackage( Packages.org.hl7.fhir.instance.model );
	importPackage( Packages.ca.uhn.fhir.model.dstu2.resource );
	importPackage( Packages.ca.uhn.fhir.model.dstu2.valueset );
	importPackage( Packages.ca.uhn.fhir.model.primitive );
	importPackage( Packages.ca.uhn.fhir.model.dstu2.composite );
	importPackage( Packages.java.text );

	var ctx = Packages.ca.uhn.fhir.context.FhirContext.forDstu2();	

	var HL7DateFormat = new SimpleDateFormat(&quot;yyyyMMdd&quot;);

	var obsResource = new Observation();

	obsResource.setId( obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString());				
		
	obsResource.addIdentifier().setValue(obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString());

	switch( obs[&apos;OBX.11&apos;].toString() + &apos;&apos; )
	{
		case &quot;F&quot;:
			obsResource.setStatus(ObservationStatusEnum.FINAL);				
		break;

		case &quot;P&quot;:
			obsResource.setStatus(ObservationStatusEnum.PRELIMINARY);			
		break;

		case &quot;S&quot;:
			obsResource.setStatus(ObservationStatusEnum.AMENDED);	
		break;

		case &quot;C&quot;:
			obsResource.setStatus(ObservationStatusEnum.CANCELLED);
		break;

		case &quot;X&quot;:
			obsResource.setStatus(ObservationStatusEnum.UNKNOWN_STATUS);
		break;
					
		default:
			obsResource.setStatus(ObservationStatusEnum.UNKNOWN_STATUS);
			logger.error( &quot;Unrecognized Status Code: &quot; + obs[&apos;OBX.11&apos;].toString() );	
	}

	var theCodeableConcept = new CodeableConceptDt();
	var theLoincCoding = new CodingDt();
	var theQuestCoding = new CodingDt();
	
	if (obs[&apos;OBX.3&apos;][&apos;CE.6&apos;].toString() == &quot;LN&quot;) 
	{
		// LOINC coding
		theLoincCoding.setSystem(&quot;http://loinc.org&quot;);
		theLoincCoding.setCode(obs[&apos;OBX.3&apos;][&apos;CE.4&apos;].toString());
		theLoincCoding.setDisplay(obs[&apos;OBX.3&apos;][&apos;CE.5&apos;].toString());
		theCodeableConcept.addCoding(theLoincCoding );		
	}

	theQuestCoding.setSystem(obs[&apos;OBX.3&apos;][&apos;CE.3&apos;].toString());
	theQuestCoding.setCode(obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString());
	theQuestCoding.setDisplay(obs[&apos;OBX.3&apos;][&apos;CE.2&apos;].toString());
	theCodeableConcept.addCoding(theQuestCoding );				

	obsResource.setCode(theCodeableConcept );

	var HL7TimestampFormatWithTZ = new SimpleDateFormat( &quot;yyyyMMddHHmmss.SSSZ&quot;);

	if( obs[&apos;OBX.19&apos;][&apos;TS.1&apos;].toString() )
	{
		obsResource.setIssuedWithMillisPrecision(HL7TimestampFormatWithTZ.parse(obs[&apos;OBX.19&apos;][&apos;TS.1&apos;].toString()));
	}
	obsResource.setValue( new StringDt( obs[&apos;OBX.5&apos;][&apos;SN.1&apos;].toString() +  obs[&apos;OBX.5&apos;][&apos;SN.2&apos;].toString() +  obs[&apos;OBX.5&apos;][&apos;SN.3&apos;].toString() +  obs[&apos;OBX.5&apos;][&apos;SN.4&apos;].toString() ) );

	var theInterpretation = new CodeableConceptDt();
	theInterpretation.setText(obs[&apos;OBX.8&apos;].toString());	
	obsResource.setInterpretation(theInterpretation );	

	var theReferenceRange = new Observation.ReferenceRange();
	var theMeaningCoding = new CodeableConceptDt();
	var theReferenceRangeMeaningCoding = new CodingDt();	

	theReferenceRangeMeaningCoding.setCode(obs[&apos;OBX.6&apos;][&apos;CE.1&apos;].toString());
	theReferenceRangeMeaningCoding.setSystem(obs[&apos;OBX.6&apos;][&apos;CE.3&apos;].toString());
	theReferenceRangeMeaningCoding.setDisplay(obs[&apos;OBX.6&apos;][&apos;CE.2&apos;].toString());

	theMeaningCoding.addCoding(theReferenceRangeMeaningCoding );
	theReferenceRange.setText(obs[&apos;OBX.7&apos;].toString());
		
	theReferenceRange.setMeaning(theMeaningCoding );
	obsResource.addReferenceRange(theReferenceRange);	

//	logger.error( &quot;Contained Observation: \n&quot; + obsResource.toString() );
	return new XML( ctx.newXmlParser().encodeResourceToString(obsResource) );
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">TVNIfF5+XCZ8UUxTfFRNRV4wNUQwNjQyODI3XkNMSUF8fDkwMDQ2MDAzfDIwMTcwNTExMTEyODM1
LjAwMC0wNzAwfHxPUlVeUjAxXk9SVV9SMDF8ODAwMDAwMDAwMDAwMDEwMzMyMDB8UHwyLjUuMXwx
fHxBTHxORXx8fHx8TFJJX05HX1JOX1Byb2ZpbGVeXjIuMTYuODQwLjEuMTEzODgzLjkuMjBeSVNP
ClBJRHwxfHxTQUZFLjExMTExMTExXl5eXlBUfjg1NjcxMDA5NjAyODQ0NjdeXl5eQU58fFNNSVRI
XkpJTExeXl5eXkx8fDE5NTgxMjI4fE18fHwxMTExIE1JTEwgU1ReXlJPU1dFTExeR0FeMzAwNzZe
VVNBCk5URXwxfEx8RkFTVElORzpOTwpPUkN8UkV8OV5RVUVTVF9UTUVfOTAwNDYwMDN8V0gzNTA5
NTFUXlFVRVNUX1RNRXx8Q018fHx8fHx8MTQ5Nzg3NTAyNV5LQVdFU0NIXkdBUlleXl5eXl5eXl5e
TlBJfHx8fHx8fHx8U0FGRSBJUEMsQSBQUk9GRVNTSU9OQUwgQ09SUC5eXl5eXl5eXl45MDA0NjAw
M3w3OTA0IFNBTlRBIE1PTklDQSBCTFZEIFNURSAzMDBeTUFJTDAwMF5XRVNUIEhPTExZV09PRF5D
QV45MDA0Ni01MTcwXl5PXl5VU0F8Xl5eXl4zMTBeNTc5Mjc3OApPQlJ8MXw5XlFVRVNUX1RNRV85
MDA0NjAwM3xXSDM1MDk1MVReUVVFU1RfVE1FfDQ5OF5IQlNBRyBXL1JGTCBDT05GXjk5UURJfHx8
MjAxNzA1MTAxMzM2MDAuMDAwLTA3MDB8fHx8fHx8fHwxNDk3ODc1MDI1XktBV0VTQ0heR0FSWV5e
Xl5eXl5eXl5OUEl8fHx8fHwyMDE3MDUxMTExMjgzNS4wMDAtMDcwMHx8fEYKT0JYfDF8U1R8NTUw
MTkzMDBeSEVQQVRJVElTIEIgU1VSRkFDRSBBTlRJR0VOXjk5UURJXjUxOTYtMV5IQlYgc3VyZmFj
ZSBBZyBTZXJQbCBRbCBJQV5MTnwxfFJFQUNUSVZFfHxOT04tUkVBQ1RJVkV8QXx8fEZ8fHwyMDE3
MDUxMTExMjgzNS4wMDAtMDcwMHx8fHx8MjAxNzA1MTEwODMzMTQuMDAwLTA3MDB8fHx8UVVFU1Qg
RElBR05PU1RJQ1MtV0VTVCBISUxMU15eXl5eXkZJXkNMSUFeXjA1RDA2NDI4Mjd8ODQwMSBGQUxM
QlJPT0sgQVZFTlVFXl5XRVNUIEhJTExTXkNBXjkxMzA0LTMyMjZ8MTM2NjQ3OTA5OV5URVJSQVpB
U15FTlJJUVVFXl5NRF5eXl5eXl5eTlBJXkVOCk9CWHwyfFNUfDU1MDE5NjAwXkNPTkZJUk1BVElP
Tl45OVFESV43OTA1LTNeSEJWIHN1cmZhY2UgQWcgU2VyUGwgUWwgTnReTE58MXxETlJ8fHxOfHx8
WHx8fDIwMTcwNTExMTEyODM1LjAwMC0wNzAwfHx8fHwyMDE3MDUxMTA4MzMxNC4wMDAtMDcwMHx8
fHxRVUVTVCBESUFHTk9TVElDUy1XRVNUIEhJTExTXl5eXl5eRkleQ0xJQV5eMDVEMDY0MjgyN3w4
NDAxIEZBTExCUk9PSyBBVkVOVUVeXldFU1QgSElMTFNeQ0FeOTEzMDQtMzIyNnwxMzY2NDc5MDk5
XlRFUlJBWkFTXkVOUklRVUVeXk1EXl5eXl5eXl5OUEleRU4KU1BNfDF8MDNeMDN8fFVTUEVDXlNv
dXJjZSwgVW5zcGVjaWZpZWReSEw3MDQ4N3x8fHx8fHx8fHx8fHwyMDE3MDUxMDEzMzYwMC4wMDAt
MDcwMHwyMDE3MDUxMTA4MDExOC4wMDAtMDcwMApPUkN8UkV8OV5RVUVTVF9UTUVfOTAwNDYwMDN8
V0gzNTA5NTFUXlFVRVNUX1RNRXx8Q018fHx8fHx8MTQ5Nzg3NTAyNV5LQVdFU0NIXkdBUlleXl5e
Xl5eXl5eTlBJfHx8fHx8fHx8U0FGRSBJUEMsQSBQUk9GRVNTSU9OQUwgQ09SUC5eXl5eXl5eXl45
MDA0NjAwM3w3OTA0IFNBTlRBIE1PTklDQSBCTFZEIFNURSAzMDBeTUFJTDAwMF5XRVNUIEhPTExZ
V09PRF5DQV45MDA0Ni01MTcwXl5PXl5VU0F8Xl5eXl4zMTBeNTc5Mjc3OApPQlJ8Mnw5XlFVRVNU
X1RNRV85MDA0NjAwM3xXSDM1MDk1MVReUVVFU1RfVE1FfDg0NzJeSEVQIEMgQUIgVy9SRUZMIEhD
Vl45OVFESXx8fDIwMTcwNTEwMTMzNjAwLjAwMC0wNzAwfHx8fHx8fHx8MTQ5Nzg3NTAyNV5LQVdF
U0NIXkdBUlleXl5eXl5eXl5eTlBJfHx8fHx8MjAxNzA1MTExMTI4MzUuMDAwLTA3MDB8fHxGCk9C
WHwxfFNUfDU1MDcxNjAwXkhFUEFUSVRJUyBDIEFOVElCT0RZXjk5UURJXjEzOTU1LTBeSENWIEFi
IFNlclBsIFFsIElBXkxOfDF8UkVBQ1RJVkV8fE5PTi1SRUFDVElWRXxBfHx8Rnx8fDIwMTcwNTEx
MTEyODM1LjAwMC0wNzAwfHx8fHwyMDE3MDUxMTA4MzM0NC4wMDAtMDcwMHx8fHxRVUVTVCBESUFH
Tk9TVElDUy1XRVNUIEhJTExTXl5eXl5eRkleQ0xJQV5eMDVEMDY0MjgyN3w4NDAxIEZBTExCUk9P
SyBBVkVOVUVeXldFU1QgSElMTFNeQ0FeOTEzMDQtMzIyNnwxMzY2NDc5MDk5XlRFUlJBWkFTXkVO
UklRVUVeXk1EXl5eXl5eXl5OUEleRU4KT0JYfDJ8Tk18NTUwNzE3MDVeU0lHTkFMIFRPIENVVC1P
RkZeOTlRREleNDgxNTktOF5IQ1YgQWIgcy9jbyBTZXJQbCBJQV5MTnwxfDEwLjAwfHw8MS4wMHxI
fHx8Rnx8fDIwMTcwNTExMTEyODM1LjAwMC0wNzAwfHx8fHwyMDE3MDUxMTA4MzM0NC4wMDAtMDcw
MHx8fHxRVUVTVCBESUFHTk9TVElDUy1XRVNUIEhJTExTXl5eXl5eRkleQ0xJQV5eMDVEMDY0Mjgy
N3w4NDAxIEZBTExCUk9PSyBBVkVOVUVeXldFU1QgSElMTFNeQ0FeOTEzMDQtMzIyNnwxMzY2NDc5
MDk5XlRFUlJBWkFTXkVOUklRVUVeXk1EXl5eXl5eXl5OUEleRU4KTlRFfDF8THwgCk5URXwyfEx8
Rm9sbG93aW5nIENEQyByZWNvbW1lbmRhdGlvbnMgKE1NV1IgTm8uIDYyLCAyMDEzKSwgdGhpcwpO
VEV8M3xMfHBhdGllbnQncyBIQ1YgQW50aWJvZHkgUmVhY3RpdmUgc2FtcGxlIHdpbGwgYmUgdGVz
dGVkIGZvcgpOVEV8NHxMfHRoZSBwcmVzZW5jZSBvZiBIQ1YgUk5BIGJ5IGEgTnVjbGVpYyBBY2lk
IEFtcGxpZmljYXRpb24KTlRFfDV8THxUZXN0IChOQUFUKSB0byBkZXRlcm1pbmUgaWYgdGhlIHBh
dGllbnQgaGFzIGFuIGFjdGl2ZSBIQ1YKTlRFfDZ8THxpbmZlY3Rpb24uCk5URXw3fEx8IApTUE18
MXwwM14wM3x8VVNQRUNeU291cmNlLCBVbnNwZWNpZmllZF5ITDcwNDg3fHx8fHx8fHx8fHx8fDIw
MTcwNTEwMTMzNjAwLjAwMC0wNzAwfDIwMTcwNTExMDgwMTE4LjAwMC0wNzAwCk9SQ3xSRXw5XlFV
RVNUX1RNRV85MDA0NjAwM3xXSDM1MDk1MVReUVVFU1RfVE1FfHxDTXx8fHx8fHwxNDk3ODc1MDI1
XktBV0VTQ0heR0FSWV5eXl5eXl5eXl5OUEl8fHx8fHx8fHxTQUZFIElQQyxBIFBST0ZFU1NJT05B
TCBDT1JQLl5eXl5eXl5eXjkwMDQ2MDAzfDc5MDQgU0FOVEEgTU9OSUNBIEJMVkQgU1RFIDMwMF5N
QUlMMDAwXldFU1QgSE9MTFlXT09EXkNBXjkwMDQ2LTUxNzBeXk9eXlVTQXxeXl5eXjMxMF41Nzky
Nzc4fHx8fHx8fHw4NDcyXkhFUCBDIEFCIFcvUkVGTCBIQ1ZeOTlRREleNTYwMDAwODQ3Ml5eVU5J
VENPREUKT0JSfDN8OV5RVUVTVF9UTUVfOTAwNDYwMDN8V0gzNTA5NTFUXlFVRVNUX1RNRXwlMzU2
NDVeSENWIFJOQSwgUU4gUENSXjk5UURJfHx8MjAxNzA1MTAxMzM2MDAuMDAwLTA3MDB8fHx8R3x8
fHx8MTQ5Nzg3NTAyNV5LQVdFU0NIXkdBUlleXl5eXl5eXl5eTlBJfHx8fHx8MjAxNzA1MTExMTI4
MzUuMDAwLTA3MDB8fHxGfDU1MDcxNjAwJkhFUEFUSVRJUyBDIEFOVElCT0RZJjk5UURJJjEzOTU1
LTAmSENWIEFiIFNlclBsIFFsIElBJkxOfHx8OSZRVUVTVF9UTUVfOTAwNDYwMDNeV0gzNTA5NTFU
JlFVRVNUX1RNRXx8fHx8fHx8fHx8fHx8fHx8fHx8fDg0NzJeSEVQIEMgQUIgVy9SRUZMIEhDVl45
OVFESV41NjAwMDA4NDcyXl5VTklUQ09ERQpOVEV8MXxMfFRoZSBhbmFseXRpY2FsIHBlcmZvcm1h
bmNlIGNoYXJhY3RlcmlzdGljcyBvZiB0aGlzCk5URXwyfEx8YXNzYXkgaGF2ZSBiZWVuIGRldGVy
bWluZWQgYnkgUXVlc3QgRGlhZ25vc3RpY3MuIApOVEV8M3xMfFRoZSBtb2RpZmljYXRpb25zIGhh
dmUgbm90IGJlZW4gY2xlYXJlZCBvciBhcHByb3ZlZCBieQpOVEV8NHxMfHRoZSBGREEuIFRoaXMg
YXNzYXkgaGFzIGJlZW4gdmFsaWRhdGVkIHB1cnN1YW50IHRvIHRoZSAKTlRFfDV8THxDTElBIHJl
Z3VsYXRpb25zIGFuZCBpcyB1c2VkIGZvciBjbGluaWNhbCBwdXJwb3Nlcy4gIApOVEV8NnxMfCAK
TlRFfDd8THxUaGlzIHRlc3Qgd2FzIHBlcmZvcm1lZCB1c2luZyB0aGUgQ09CQVMoUilBbXBsaVBy
ZXAvCk5URXw4fEx8Q09CQVMoUilUYXFNYW4oUilIQ1YgVGVzdCx2Mi4wLgpOVEV8OXxMfCAKTlRF
fDEwfEx8Rm9yIG1vcmUgaW5mb3JtYXRpb24gb24gdGhpcyB0ZXN0LCBnbyB0bzoKTlRFfDExfEx8
aHR0cDovL2VkdWNhdGlvbi5xdWVzdGRpYWdub3N0aWNzLmNvbS9mYXEvRkFRMjJ2MQpOVEV8MTJ8
THwoVGhpcyBsaW5rIGlzIGJlaW5nIHByb3ZpZGVkIGZvciBpbmZvcm1hdGlvbmFsLwpOVEV8MTN8
THxlZHVjYXRpb25hbCBwdXJwb3NlcyBvbmx5LikKTlRFfDE0fEx8IApPQlh8MXxOTXw1NTE5NDI1
NV5IQ1YgUk5BLCBRVUFOVElUQVRJVkUgUkVBTCBUSU1FIFBDUl45OVFESV4xMTAxMS00XkhDViBS
TkEgU2VyUGwgUENSLWFDbmNeTE58MXwxNXxJVS9tTF5eOTlRREl8PDE1fEh8fHxGfHx8MjAxNzA1
MTExMTI4MzUuMDAwLTA3MDB8fHx8fDIwMTcwNTExMDgzNDE1LjAwMC0wNzAwfHx8fFFVRVNUIERJ
QUdOT1NUSUNTLVdFU1QgSElMTFNeXl5eXl5GSV5DTElBXl4wNUQwNjQyODI3fDg0MDEgRkFMTEJS
T09LIEFWRU5VRV5eV0VTVCBISUxMU15DQV45MTMwNC0zMjI2fDEzNjY0NzkwOTleVEVSUkFaQVNe
RU5SSVFVRV5eTUReXl5eXl5eXk5QSV5FTgpPQlh8MnxOTXw1NTE5NDI2NV5IQ1YgUk5BLCBRVUFO
VElUQVRJVkUgUkVBTCBUSU1FIFBDUl45OVFESV4zODE4MC02XkhDViBSTkEgU2VyUGwgUENSLUxv
ZyBJVV5MTnwxfDEuMTh8TG9nIElVL21MXkxvZyBJVS9tTF45OVFESXw8MS4xOHxIfHx8Rnx8fDIw
MTcwNTExMTEyODM1LjAwMC0wNzAwfHx8fHwyMDE3MDUxMTA4MzQxNS4wMDAtMDcwMHx8fHxRVUVT
VCBESUFHTk9TVElDUy1XRVNUIEhJTExTXl5eXl5eRkleQ0xJQV5eMDVEMDY0MjgyN3w4NDAxIEZB
TExCUk9PSyBBVkVOVUVeXldFU1QgSElMTFNeQ0FeOTEzMDQtMzIyNnwxMzY2NDc5MDk5XlRFUlJB
WkFTXkVOUklRVUVeXk1EXl5eXl5eXl5OUEleRU4KTlRFfDF8THwgCk5URXwyfEx8UGxlYXNlIG5v
dGU6IFBhdGllbnRzIHdpdGggY2lyY3VsYXRpbmcgYW50aS1IQ1YKTlRFfDN8THxhbnRpYm9kaWVz
IHRoYXQgaGF2ZSBkZXRlY3RhYmxlIEhDViBSTkEgYXMgZGV0ZXJtaW5lZApOVEV8NHxMfGJ5IE5B
VCwgc2hvdWxkIGJlIGNvbnNpZGVyZWQgdG8gaGF2ZSBhbiBhY3RpdmUgSENWCk5URXw1fEx8aW5m
ZWN0aW9uLiBQbGVhc2UgY29ycmVsYXRlIHRoZXNlIGZpbmRpbmdzIHdpdGggdGhlCk5URXw2fEx8
cGF0aWVudCdzIGNsaW5pY2FsIGhpc3RvcnkgYW5kIGFueSBvdGhlciBkaWFnbm9zdGljcwpOVEV8
N3xMfGZpbmRpbmdzLCBpbmNsdWRpbmcgYW55IGV2aWRlbmNlIG9mIGxpdmVyIGR5c2Z1bmN0aW9u
LgpOVEV8OHxMfFBsZWFzZSBjb25zaWRlciB0aGUgY3VycmVudCBUcmVhdG1lbnQgR3VpZGVsaW5l
cyBmb3IKTlRFfDl8THx0aGUgbWFuYWdlbWVudCBvZiB0aGVzZSBwYXRpZW50cyAoSiBIZXBhdG9s
LCAxNDMzLTE0NDQsCk5URXwxMHxMfE9jdDIwMTEpLgpOVEV8MTF8THwgClNQTXwxfDAzXjAzfHxV
U1BFQ15Tb3VyY2UsIFVuc3BlY2lmaWVkXkhMNzA0ODd8fHx8fHx8fHx8fHx8MjAxNzA1MTAxMzM2
MDAuMDAwLTA3MDB8MjAxNzA1MTEwODAxMDAuMDAwLTA3MDAKT1JDfFJFfDleUVVFU1RfVE1FXzkw
MDQ2MDAzfFdIMzUwOTUxVF5RVUVTVF9UTUV8fENNfHx8fHx8fDE0OTc4NzUwMjVeS0FXRVNDSF5H
QVJZXl5eXl5eXl5eXk5QSXx8fHx8fHx8fFNBRkUgSVBDLEEgUFJPRkVTU0lPTkFMIENPUlAuXl5e
Xl5eXl5eOTAwNDYwMDN8NzkwNCBTQU5UQSBNT05JQ0EgQkxWRCBTVEUgMzAwXk1BSUwwMDBeV0VT
VCBIT0xMWVdPT0ReQ0FeOTAwNDYtNTE3MF5eT15eVVNBfF5eXl5eMzEwXjU3OTI3NzgKT0JSfDR8
OV5RVUVTVF9UTUVfOTAwNDYwMDN8V0gzNTA5NTFUXlFVRVNUX1RNRXwzNjQwXkhTViAyIElHR145
OVFESXx8fDIwMTcwNTEwMTMzNjAwLjAwMC0wNzAwfHx8fHx8fHx8MTQ5Nzg3NTAyNV5LQVdFU0NI
XkdBUlleXl5eXl5eXl5eTlBJfHx8fHx8MjAxNzA1MTExMTI4MzUuMDAwLTA3MDB8fHxGCk9CWHwx
fE5NfDcwMDIwNjAwXkhTViAyIElHRywgVFlQRSBTUEVDSUZJQyBBQl45OVFESV41MjA5LTJeSFNW
MiBJZ0cgU2VyIElBLWFDbmNeTE58MXwxMi4wMHxpbmRleF5eOTlRREl8fEh8fHxGfHx8MjAxNzA1
MTExMTI4MzUuMDAwLTA3MDB8fHx8fDIwMTcwNTExMDg0MDAyLjAwMC0wNzAwfHx8fFFVRVNUIERJ
QUdOT1NUSUNTLVdFU1QgSElMTFNeXl5eXl5GSV5DTElBXl4wNUQwNjQyODI3fDg0MDEgRkFMTEJS
T09LIEFWRU5VRV5eV0VTVCBISUxMU15DQV45MTMwNC0zMjI2fDEzNjY0NzkwOTleVEVSUkFaQVNe
RU5SSVFVRV5eTUReXl5eXl5eXk5QSV5FTgpOVEV8MXxMfCAgICAgICAgICAgICAgICAgICAgICAg
ICAgSW5kZXggICAgICAgICAgSW50ZXJwcmV0YXRpb24KTlRFfDJ8THwgICAgICAgICAgICAgICAg
ICAgICAgICAgIC0tLS0tICAgICAgICAgIC0tLS0tLS0tLS0tLS0tCk5URXwzfEx8ICAgICAgICAg
ICAgICAgICAgICAgICAgICA8MC45MCAgICAgICAgICBOZWdhdGl2ZQpOVEV8NHxMfCAgICAgICAg
ICAgICAgICAgICAgICAgICAgMC45MC0xLjA5ICAgICAgRXF1aXZvY2FsCk5URXw1fEx8ICAgICAg
ICAgICAgICAgICAgICAgICAgICA+MS4wOSAgICAgICAgICBQb3NpdGl2ZQpOVEV8NnxMfCAKTlRF
fDd8THxUaGlzIGFzc2F5IHV0aWxpemVzIHJlY29tYmluYW50IHR5cGUtc3BlY2lmaWMgYW50aWdl
bnMKTlRFfDh8THx0byBkaWZmZXJlbnRpYXRlIEhTVi0xIGZyb20gSFNWLTIgaW5mZWN0aW9ucy4g
QQpOVEV8OXxMfHBvc2l0aXZlIHJlc3VsdCBjYW5ub3QgZGlzdGluZ3Vpc2ggYmV0d2VlbiByZWNl
bnQgYW5kCk5URXwxMHxMfHBhc3QgaW5mZWN0aW9uLiBJZiByZWNlbnQgSFNWIGluZmVjdGlvbiBp
cyBzdXNwZWN0ZWQKTlRFfDExfEx8YnV0IHRoZSByZXN1bHRzIGFyZSBuZWdhdGl2ZSBvciBlcXVp
dm9jYWwsIHRoZSBhc3NheQpOVEV8MTJ8THxzaG91bGQgYmUgcmVwZWF0ZWQgaW4gNC02IHdlZWtz
LiBUaGUgcGVyZm9ybWFuY2UKTlRFfDEzfEx8Y2hhcmFjdGVyaXN0aWNzIG9mIHRoZSBhc3NheSBo
YXZlIG5vdCBiZWVuIGVzdGFibGlzaGVkCk5URXwxNHxMfGZvciBwZWRpYXRyaWMgcG9wdWxhdGlv
bnMsIGltbXVub2NvbXByb21pc2VkIHBhdGllbnRzLApOVEV8MTV8THxvciBuZW9uYXRhbCBzY3Jl
ZW5pbmcuClNQTXwxfDAyXjAyfHxVU1BFQ15Tb3VyY2UsIFVuc3BlY2lmaWVkXkhMNzA0ODd8fHx8
fHx8fHx8fHx8MjAxNzA1MTAxMzM2MDAuMDAwLTA3MDB8MjAxNzA1MTEwODAxMTguMDAwLTA3MDAK
T1JDfFJFfDleUVVFU1RfVE1FXzkwMDQ2MDAzfFdIMzUwOTUxVF5RVUVTVF9UTUV8fENNfHx8fHx8
fDE0OTc4NzUwMjVeS0FXRVNDSF5HQVJZXl5eXl5eXl5eXk5QSXx8fHx8fHx8fFNBRkUgSVBDLEEg
UFJPRkVTU0lPTkFMIENPUlAuXl5eXl5eXl5eOTAwNDYwMDN8NzkwNCBTQU5UQSBNT05JQ0EgQkxW
RCBTVEUgMzAwXk1BSUwwMDBeV0VTVCBIT0xMWVdPT0ReQ0FeOTAwNDYtNTE3MF5eT15eVVNBfF5e
Xl5eMzEwXjU3OTI3NzgKT0JSfDV8OV5RVUVTVF9UTUVfOTAwNDYwMDN8V0gzNTA5NTFUXlFVRVNU
X1RNRXw5MTQzMV5ISVYxLzIgQUcvQUIsNCBXL1JGTF45OVFESXx8fDIwMTcwNTEwMTMzNjAwLjAw
MC0wNzAwfHx8fHx8fHx8MTQ5Nzg3NTAyNV5LQVdFU0NIXkdBUlleXl5eXl5eXl5eTlBJfHx8fHx8
MjAxNzA1MTExMTI4MzUuMDAwLTA3MDB8fHxGCk9CWHwxfFNUfDg2MDA5MDUyXkhJViBBRy9BQiwg
NFRIIEdFTl45OVFESV41Njg4OC0xXkhJViAxKzIgQWIrSElWMSBwMjQgQWcgU2VyUGwgUWwgSUFe
TE58MXxOT04tUkVBQ1RJVkV8fE5PTi1SRUFDVElWRXxOfHx8Rnx8fDIwMTcwNTExMTEyODM1LjAw
MC0wNzAwfHx8fHwyMDE3MDUxMTA4NDEzOC4wMDAtMDcwMHx8fHxRVUVTVCBESUFHTk9TVElDUy1X
RVNUIEhJTExTXl5eXl5eRkleQ0xJQV5eMDVEMDY0MjgyN3w4NDAxIEZBTExCUk9PSyBBVkVOVUVe
XldFU1QgSElMTFNeQ0FeOTEzMDQtMzIyNnwxMzY2NDc5MDk5XlRFUlJBWkFTXkVOUklRVUVeXk1E
Xl5eXl5eXl5OUEleRU4KTlRFfDF8THxUaGUgcmVwZWF0ZWRseSByZWFjdGl2ZSBzY3JlZW5pbmcg
YXNzYXkgcmVzdWx0IGlzCk5URXwyfEx8Y29uZmlybWVkIGJ5IGR1cGxpY2F0ZSByZXBlYXQgdGVz
dGluZywgYW5kIGluZGljYXRlcwpOVEV8M3xMfGEgUE9TU0lCTEUgcHJlc2VuY2Ugb2YgSElWLTEg
YW50aWJvZGllcyBvciBISVYtMiAKTlRFfDR8THxhbnRpYm9kaWVzLCBhbmQvb3IgSElWLTEgcDI0
IGFudGlnZW4uIEFkZGl0aW9uYWwKTlRFfDV8THx0ZXN0aW5nIGlzIHJlcXVpcmVkIGZvciBkaWFn
bm9zaXMuIApOVEV8NnxMfCAKTlRFfDd8THxUaGVyZWZvcmUsIHRoZXNlIHNjcmVlbmluZyByZXN1
bHRzIG11c3QgYmUgY29ycmVsYXRlZCAKTlRFfDh8THx3aXRoIHJlc3VsdHMgb2YgcmVmbGV4IGNv
bmZpcm1hdG9yeSB0ZXN0cywgaW5jbHVkaW5nCk5URXw5fEx8dGhlIEhJVi0xL0hJVi0yIGFudGli
b2R5IGRpZmZlcmVudGlhdGlvbiBhc3NheSBhbmQsIGlmIApOVEV8MTB8THxuZWNlc3NhcnksIHRo
ZSBISVYtMSBSTkEgcXVhbGl0YXRpdmUgVE1BLgpOVEV8MTF8THwgCk5URXwxMnxMfFRoZSA0dGgg
Z2VuZXJhdGlvbiBISVYtMS8yIEFudGlnZW4vQW50aWJvZHkKTlRFfDEzfEx8Y29tYmluYXRpb24g
aW1tdW5vYXNzYXkgaXMgYSBzY3JlZW5pbmcgdGVzdCBhbmQKTlRFfDE0fEx8c2hvdWxkIG5vdCBi
ZSB1c2VkIGFsb25lIGZvciBkaWFnbm9zaXMuICBSZXBlYXRlZGx5Ck5URXwxNXxMfHJlYWN0aXZl
IHJlc3VsdHMgZnJvbSB0aGUgNHRoIGdlbmVyYXRpb24gc2NyZWVuaW5nCk5URXwxNnxMfHRlc3Qg
YXJlIG9ubHkgaW5kaWNhdGl2ZSBvZiBISVYgaW5mZWN0aW9uIHdoZW4gdGhvc2UKTlRFfDE3fEx8
c2NyZWVuaW5nIHJlc3VsdHMgYXJlIGNvbmZpcm1lZCB0byBiZSBwb3NpdGl2ZSBieQpOVEV8MTh8
THxlaXRoZXIgdGhlIEhJVi0xLzIgQW50aWJvZHkgRGlmZmVyZW50aWF0aW9uIEFzc2F5IG9yCk5U
RXwxOXxMfHRoZSBISVYtMSBSTkEgdGVzdCBieSBUTUEuCk5URXwyMHxMfCAKTlRFfDIxfEx8UExF
QVNFIE5PVEU6IFRoaXMgaW5mb3JtYXRpb24gaGFzIGJlZW4gZGlzY2xvc2VkIHRvCk5URXwyMnxM
fHlvdSBmcm9tIHJlY29yZHMgd2hvc2UgY29uZmlkZW50aWFsaXR5IG1heSBiZQpOVEV8MjN8THxw
cm90ZWN0ZWQgYnkgc3RhdGUgbGF3LiAgSWYgeW91ciBzdGF0ZSByZXF1aXJlcyBzdWNoCk5URXwy
NHxMfHByb3RlY3Rpb24sIHRoZW4gdGhlIHN0YXRlIGxhdyBwcm9oaWJpdHMgeW91IGZyb20KTlRF
fDI1fEx8bWFraW5nIGFueSBmdXJ0aGVyIGRpc2Nsb3N1cmUgb2YgdGhlIGluZm9ybWF0aW9uCk5U
RXwyNnxMfHdpdGhvdXQgdGhlIHNwZWNpZmljIHdyaXR0ZW4gY29uc2VudCBvZiB0aGUgcGVyc29u
Ck5URXwyN3xMfHRvIHdob20gaXQgcGVydGFpbnMsIG9yIGFzIG90aGVyd2lzZSBwZXJtaXR0ZWQg
YnkgbGF3LgpOVEV8Mjh8THxBIGdlbmVyYWwgYXV0aG9yaXphdGlvbiBmb3IgdGhlIHJlbGVhc2Ug
b2YgbWVkaWNhbCBvcgpOVEV8Mjl8THxvdGhlciBpbmZvcm1hdGlvbiBpcyBOT1Qgc3VmZmljaWVu
dCBmb3IgdGhpcyBwdXJwb3NlLgpOVEV8MzB8THwgCk5URXwzMXxMfFRoZSBwZXJmb3JtYW5jZSBv
ZiB0aGlzIGFzc2F5IGhhcyBub3QgYmVlbiBjbGluaWNhbGx5Ck5URXwzMnxMfHZhbGlkYXRlZCBp
biBwYXRpZW50cyBsZXNzIHRoYW4gMiB5ZWFycyBvbGQuCk5URXwzM3xMfCAKU1BNfDF8fHxVU1BF
Q15Tb3VyY2UsIFVuc3BlY2lmaWVkXkhMNzA0ODd8fHx8fHx8fHx8fHx8MjAxNzA1MTAxMzM2MDAu
MDAwLTA3MDB8MjAxNzA1MTEwODAxMTguMDAwLTA3MDAKT1JDfFJFfDleUVVFU1RfVE1FXzkwMDQ2
MDAzfFdIMzUwOTUxVF5RVUVTVF9UTUV8fENNfHx8fHx8fDE0OTc4NzUwMjVeS0FXRVNDSF5HQVJZ
Xl5eXl5eXl5eXk5QSXx8fHx8fHx8fFNBRkUgSVBDLEEgUFJPRkVTU0lPTkFMIENPUlAuXl5eXl5e
Xl5eOTAwNDYwMDN8NzkwNCBTQU5UQSBNT05JQ0EgQkxWRCBTVEUgMzAwXk1BSUwwMDBeV0VTVCBI
T0xMWVdPT0ReQ0FeOTAwNDYtNTE3MF5eT15eVVNBfF5eXl5eMzEwXjU3OTI3Nzh8fHx8fHx8fCVT
QkhJVjIzXkhJViA0VEggR0VOIFNDUiAyLDNeOTlRREleNzAwOTk5MTQzMV5eVU5JVENPREUKT0JS
fDZ8OV5RVUVTVF9UTUVfOTAwNDYwMDN8V0gzNTA5NTFUXlFVRVNUX1RNRXwlOTE0MzJeSElWIDEv
MiBBQiBESUZGXjk5UURJfHx8MjAxNzA1MTAxMzM2MDAuMDAwLTA3MDB8fHx8R3x8fHx8MTQ5Nzg3
NTAyNV5LQVdFU0NIXkdBUlleXl5eXl5eXl5eTlBJfHx8fHx8MjAxNzA1MTExMTI4MzUuMDAwLTA3
MDB8fHxGfDg2MDExNjEyJkhJViBSRVBFQVQgQSY5OVFESXx8fDkmUVVFU1RfVE1FXzkwMDQ2MDAz
XldIMzUwOTUxVCZRVUVTVF9UTUV8fHx8fHx8fHx8fHx8fHx8fHx8fHwlU0JISVYyM15ISVYgNFRI
IEdFTiBTQ1IgMiwzXjk5UURJXjcwMDk5OTE0MzFeXlVOSVRDT0RFCk9CWHwxfFNUfDg2MDA5MDU2
XkhJViAxIEFOVElCT0RZXjk5UURJXjI5ODkzLTVeSElWMSBBYiBTZXJQbCBRbCBJQV5MTnwxfFBP
U0lUSVZFfHxORUdBVElWRXxBfHx8Rnx8fDIwMTcwNTExMTEyODM1LjAwMC0wNzAwfHx8fHwyMDE3
MDUxMTA4NDEzNy4wMDAtMDcwMHx8fHxRVUVTVCBESUFHTk9TVElDUy1XRVNUIEhJTExTXl5eXl5e
RkleQ0xJQV5eMDVEMDY0MjgyN3w4NDAxIEZBTExCUk9PSyBBVkVOVUVeXldFU1QgSElMTFNeQ0Fe
OTEzMDQtMzIyNnwxMzY2NDc5MDk5XlRFUlJBWkFTXkVOUklRVUVeXk1EXl5eXl5eXl5OUEleRU4K
T0JYfDJ8U1R8ODYwMDkwNTdeSElWIDIgQU5USUJPRFleOTlRREleMzAzNjEtMF5ISVYgMiBBYiBT
ZXJQbCBRbCBJQV5MTnwxfE5FR0FUSVZFfHxORUdBVElWRXxOfHx8Rnx8fDIwMTcwNTExMTEyODM1
LjAwMC0wNzAwfHx8fHwyMDE3MDUxMTA4NDEzNy4wMDAtMDcwMHx8fHxRVUVTVCBESUFHTk9TVElD
Uy1XRVNUIEhJTExTXl5eXl5eRkleQ0xJQV5eMDVEMDY0MjgyN3w4NDAxIEZBTExCUk9PSyBBVkVO
VUVeXldFU1QgSElMTFNeQ0FeOTEzMDQtMzIyNnwxMzY2NDc5MDk5XlRFUlJBWkFTXkVOUklRVUVe
Xk1EXl5eXl5eXl5OUEleRU4KTlRFfDF8THwgCk5URXwyfEx8UG9zaXRpdmUgZm9yIEhJVi0xIGFu
dGlib2RpZXMuCk5URXwzfEx8IApOVEV8NHxMfExhYm9yYXRvcnkgZXZpZGVuY2Ugb2YgSElWLTEg
aW5mZWN0aW9uIGlzIHByZXNlbnQgaW4gCk5URXw1fEx8cGF0aWVudHMgZ3JlYXRlciB0aGFuIDI0
IG1vbnRocyBvZiBhZ2UuIApOVEV8NnxMfCAKTlRFfDd8THxJbiBwYXRpZW50cyBsZXNzIHRoYW4g
MjQgbW9udGhzIG9mIGFnZSwgYSBwb3NpdGl2ZSBISVYtMQpOVEV8OHxMfEFudGlib2R5IERpZmZl
cmVudGlhdGlvbiBhc3NheSByZXN1bHQgbWF5IHJlcHJlc2VudCAKTlRFfDl8THxwYXNzaXZlIHRy
YW5zZmVyIG9mIG1hdGVybmFsIGFudGlib2R5LiBJbiBwYXRpZW50cyBsZXNzCk5URXwxMHxMfHRo
YW4gMjQgbW9udGhzIG9mIGFnZSwgdGVzdGluZyB0aGUgcGF0aWVudCdzIHNwZWNpbWVuCk5URXwx
MXxMfHdpdGggdGhlIEhJVi0xIFJOQSBRdWFsaXRhdGl2ZSBUTUEgYXNzYXkgKHRlc3QgY29kZSAK
TlRFfDEyfEx8MTYxODUpIG9yIHRoZSBISVYtMSBETkEsIFF1YWxpdGF0aXZlLCBQQ1IgYXNzYXkg
KHRlc3QgCk5URXwxM3xMfGNvZGUgODQwMSkgaXMgcmVjb21tZW5kZWQgdG8gY29uZmlybSBISVYt
MSBpbmZlY3Rpb24uCk5URXwxNHxMfCAKTlRFfDE1fEx8UExFQVNFIE5PVEU6IFRoaXMgaW5mb3Jt
YXRpb24gaGFzIGJlZW4gZGlzY2xvc2VkIHRvCk5URXwxNnxMfHlvdSBmcm9tIHJlY29yZHMgd2hv
c2UgY29uZmlkZW50aWFsaXR5IG1heSBiZQpOVEV8MTd8THxwcm90ZWN0ZWQgYnkgc3RhdGUgbGF3
LiAgSWYgeW91ciBzdGF0ZSByZXF1aXJlcyBzdWNoCk5URXwxOHxMfHByb3RlY3Rpb24sIHRoZW4g
dGhlIHN0YXRlIGxhdyBwcm9oaWJpdHMgeW91IGZyb20gCk5URXwxOXxMfG1ha2luZyBhbnkgZnVy
dGhlciBkaXNjbG9zdXJlIG9mIHRoZSBpbmZvcm1hdGlvbgpOVEV8MjB8THx3aXRob3V0IHRoZSBz
cGVjaWZpYyB3cml0dGVuIGNvbnNlbnQgb2YgdGhlIHBlcnNvbgpOVEV8MjF8THx0byB3aG9tIGl0
IHBlcnRhaW5zLCBvciBhcyBvdGhlcndpc2UgcGVybWl0dGVkIGJ5IGxhdy4KTlRFfDIyfEx8QSBn
ZW5lcmFsIGF1dGhvcml6YXRpb24gZm9yIHRoZSByZWxlYXNlIG9mIG1lZGljYWwgb3IKTlRFfDIz
fEx8b3RoZXIgaW5mb3JtYXRpb24gaXMgTk9UIHN1ZmZpY2llbnQgZm9yIHRoaXMgcHVycG9zZS4K
TlRFfDI0fEx8IApOVEV8MjV8THxGb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBwbGVhc2UgcmVm
ZXIgdG8KTlRFfDI2fEx8aHR0cDovL2VkdWNhdGlvbi5xdWVzdGRpYWdub3N0aWNzLmNvbS9mYXEv
RkFRMTA2Ck5URXwyN3xMfChUaGlzIGxpbmsgaXMgYmVpbmcgcHJvdmlkZWQgZm9yIGluZm9ybWF0
aW9uYWwvCk5URXwyOHxMfGVkdWNhdGlvbmFsIHB1cnBvc2VzIG9ubHkuKQpOVEV8Mjl8THwgClNQ
TXwxfDA0XjA0fHxVU1BFQ15Tb3VyY2UsIFVuc3BlY2lmaWVkXkhMNzA0ODd8fHx8fHx8fHx8fHx8
MjAxNzA1MTAxMzM2MDAuMDAwLTA3MDB8MjAxNzA1MTEwODAxMDAuMDAwLTA3MDAKT1JDfFJFfDle
UVVFU1RfVE1FXzkwMDQ2MDAzfFdIMzUwOTUxVF5RVUVTVF9UTUV8fENNfHx8fHx8fDE0OTc4NzUw
MjVeS0FXRVNDSF5HQVJZXl5eXl5eXl5eXk5QSXx8fHx8fHx8fFNBRkUgSVBDLEEgUFJPRkVTU0lP
TkFMIENPUlAuXl5eXl5eXl5eOTAwNDYwMDN8NzkwNCBTQU5UQSBNT05JQ0EgQkxWRCBTVEUgMzAw
Xk1BSUwwMDBeV0VTVCBIT0xMWVdPT0ReQ0FeOTAwNDYtNTE3MF5eT15eVVNBfF5eXl5eMzEwXjU3
OTI3NzgKT0JSfDd8OV5RVUVTVF9UTUVfOTAwNDYwMDN8V0gzNTA5NTFUXlFVRVNUX1RNRXwxNzEz
NF5TUEVDIElEIE5PVElGSUNBVElPTl45OVFESXx8fDIwMTcwNTEwMTMzNjAwLjAwMC0wNzAwfHx8
fHx8fHx8MTQ5Nzg3NTAyNV5LQVdFU0NIXkdBUlleXl5eXl5eXl5eTlBJfHx8fHx8MjAxNzA1MTEx
MTI4MzUuMDAwLTA3MDB8fHxGCk9CWHwxfHw4NjAwNjU1Nl5DT01NRU5UOl45OVFESV44MjUxLTFe
U2VydmljZSBDbW50IFhYWC1JbXBeTE58MXx8fHx8fHxGfHx8MjAxNzA1MTExMTI4MzUuMDAwLTA3
MDB8fHx8fDIwMTcwNTExMDgwMTE4LjAwMC0wNzAwfHx8fFFVRVNUIERJQUdOT1NUSUNTLVdFU1Qg
SElMTFNeXl5eXl5GSV5DTElBXl4wNUQwNjQyODI3fDg0MDEgRkFMTEJST09LIEFWRU5VRV5eV0VT
VCBISUxMU15DQV45MTMwNC0zMjI2fDEzNjY0NzkwOTleVEVSUkFaQVNeRU5SSVFVRV5eTUReXl5e
Xl5eXk5QSV5FTgpOVEV8MXxMfFNwZWNpbWVuIGxhYmVscyBtdXN0IGluY2x1ZGUgdHdvIGZvcm1z
IG9mIHBhdGllbnQgCk5URXwyfEx8SUQuIE9ubHkgb25lIHVuaXF1ZSBpZGVudGlmaWVyIHdhcyBw
cmVzZW50IG9uIHRoZSAKTlRFfDN8THxzYW1wbGUocykuIFRoZSB0ZXN0aW5nIHlvdSByZXF1ZXN0
ZWQgd2lsbCBiZSAKTlRFfDR8THxwcm9jZXNzZWQ7IGhvd2V2ZXIsIGdvaW5nIGZvcndhcmQgcGxl
YXNlIHByb3ZpZGUgCk5URXw1fEx8dHdvIGlkZW50aWZpZXJzIGFzIHJlcXVpcmVkIGJ5IHRoZSBD
b2xsZWdlIG9mIApOVEV8NnxMfEFtZXJpY2FuIFBhdGhvbG9naXN0cyAoQ0FQKS4KU1BNfDF8fHxV
U1BFQ15Tb3VyY2UsIFVuc3BlY2lmaWVkXkhMNzA0ODd8fHx8fHx8fHx8fHx8MjAxNzA1MTAxMzM2
MDAuMDAwLTA3MDB8MjAxNzA1MTEwODAxMTguMDAwLTA3MDAKT1JDfFJFfDleUVVFU1RfVE1FXzkw
MDQ2MDAzfFdIMzUwOTUxVF5RVUVTVF9UTUV8fENNfHx8fHx8fDE0OTc4NzUwMjVeS0FXRVNDSF5H
QVJZXl5eXl5eXl5eXk5QSXx8fHx8fHx8fFNBRkUgSVBDLEEgUFJPRkVTU0lPTkFMIENPUlAuXl5e
Xl5eXl5eOTAwNDYwMDN8NzkwNCBTQU5UQSBNT05JQ0EgQkxWRCBTVEUgMzAwXk1BSUwwMDBeV0VT
VCBIT0xMWVdPT0ReQ0FeOTAwNDYtNTE3MF5eT15eVVNBfF5eXl5eMzEwXjU3OTI3NzgKT0JSfDh8
OV5RVUVTVF9UTUVfOTAwNDYwMDN8V0gzNTA5NTFUXlFVRVNUX1RNRXw3OTleUlBSIChNT05JVE9S
KSBXL1JFRkxeOTlRREl8fHwyMDE3MDUxMDEzMzYwMC4wMDAtMDcwMHx8fHx8fHx8fDE0OTc4NzUw
MjVeS0FXRVNDSF5HQVJZXl5eXl5eXl5eXk5QSXx8fHx8fDIwMTcwNTExMTEyODM1LjAwMC0wNzAw
fHx8RgpPQlh8MXxTVHw0MDAxMDEwMF5SUFIgKE1PTklUT1IpIFcvUkVGTCBUSVRFUl45OVFESV4y
MDUwNy0wXlJQUiBTZXIgUWxeTE58MXxSRUFDVElWRXx8Tk9OLVJFQUNUSVZFfEF8fHxGfHx8MjAx
NzA1MTExMTI4MzUuMDAwLTA3MDB8fHx8fDIwMTcwNTExMDg0MDE1LjAwMC0wNzAwfHx8fFFVRVNU
IERJQUdOT1NUSUNTLVdFU1QgSElMTFNeXl5eXl5GSV5DTElBXl4wNUQwNjQyODI3fDg0MDEgRkFM
TEJST09LIEFWRU5VRV5eV0VTVCBISUxMU15DQV45MTMwNC0zMjI2fDEzNjY0NzkwOTleVEVSUkFa
QVNeRU5SSVFVRV5eTUReXl5eXl5eXk5QSV5FTgpOVEV8MXxMfFRoZSBSUFIgaXMgYSBub24tdHJl
cG9uZW1hbC1zcGVjaWZpYyB0ZXN0OyB0aGVyZWZvcmUsIApOVEV8MnxMfGEgdHJlcG9uZW1hbC1z
cGVjaWZpYyBjb25maXJtYXRvcnkgdGVzdCBzaG91bGQgYmUgCk5URXwzfEx8cGVyZm9ybWVkIHVu
bGVzcyBwcmlvciBzeXBoaWxpcyBpbmZlY3Rpb24gaGFzIGJlZW4gCk5URXw0fEx8ZG9jdW1lbnRl
ZCBmb3IgdGhpcyBwYXRpZW50LgpTUE18MXwwMV4wMXx8VVNQRUNeU291cmNlLCBVbnNwZWNpZmll
ZF5ITDcwNDg3fHx8fHx8fHx8fHx8fDIwMTcwNTEwMTMzNjAwLjAwMC0wNzAwfDIwMTcwNTExMDgw
MTE4LjAwMC0wNzAwCk9SQ3xSRXw5XlFVRVNUX1RNRV85MDA0NjAwM3xXSDM1MDk1MVReUVVFU1Rf
VE1FfHxDTXx8fHx8fHwxNDk3ODc1MDI1XktBV0VTQ0heR0FSWV5eXl5eXl5eXl5OUEl8fHx8fHx8
fHxTQUZFIElQQyxBIFBST0ZFU1NJT05BTCBDT1JQLl5eXl5eXl5eXjkwMDQ2MDAzfDc5MDQgU0FO
VEEgTU9OSUNBIEJMVkQgU1RFIDMwMF5NQUlMMDAwXldFU1QgSE9MTFlXT09EXkNBXjkwMDQ2LTUx
NzBeXk9eXlVTQXxeXl5eXjMxMF41NzkyNzc4fHx8fHx8fHw3OTleUlBSIChNT05JVE9SKSBXL1JF
RkxeOTlRREleNDEwMDAwMDc5OV5eVU5JVENPREUKT0JSfDl8OV5RVUVTVF9UTUVfOTAwNDYwMDN8
V0gzNTA5NTFUXlFVRVNUX1RNRXwlMzYyMDNeUlBSIFRJVEVSXjk5UURJfHx8MjAxNzA1MTAxMzM2
MDAuMDAwLTA3MDB8fHx8R3x8fHx8MTQ5Nzg3NTAyNV5LQVdFU0NIXkdBUlleXl5eXl5eXl5eTlBJ
fHx8fHx8MjAxNzA1MTExMTI4MzUuMDAwLTA3MDB8fHxGfDQwMDEwMTAwJlJQUiAoTU9OSVRPUikg
Vy9SRUZMIFRJVEVSJjk5UURJJjIwNTA3LTAmUlBSIFNlciBRbCZMTnx8fDkmUVVFU1RfVE1FXzkw
MDQ2MDAzXldIMzUwOTUxVCZRVUVTVF9UTUV8fHx8fHx8fHx8fHx8fHx8fHx8fHw3OTleUlBSIChN
T05JVE9SKSBXL1JFRkxeOTlRREleNDEwMDAwMDc5OV5eVU5JVENPREUKT0JYfDF8U058ODYwMDc0
MDheUlBSIFRJVEVSXjk5UURJXjMxMTQ3LTJeUlBSIFNlci1UaXRyXkxOfDF8XjFeOl4xNnx8fEh8
fHxGfHx8MjAxNzA1MTExMTI4MzUuMDAwLTA3MDB8fHx8fDIwMTcwNTExMDg0MDM0LjAwMC0wNzAw
fHx8fFFVRVNUIERJQUdOT1NUSUNTLVdFU1QgSElMTFNeXl5eXl5GSV5DTElBXl4wNUQwNjQyODI3
fDg0MDEgRkFMTEJST09LIEFWRU5VRV5eV0VTVCBISUxMU15DQV45MTMwNC0zMjI2fDEzNjY0Nzkw
OTleVEVSUkFaQVNeRU5SSVFVRV5eTUReXl5eXl5eXk5QSV5FTgpTUE18MXwwMV4wMXx8VVNQRUNe
U291cmNlLCBVbnNwZWNpZmllZF5ITDcwNDg3fHx8fHx8fHx8fHx8fDIwMTcwNTEwMTMzNjAwLjAw
MC0wNzAwfDIwMTcwNTExMDgwMTAwLjAwMC0wNzAwCk9SQ3xSRXw5XlFVRVNUX1RNRV85MDA0NjAw
M3xXSDM1MDk1MVReUVVFU1RfVE1FfHxDTXx8fHx8fHwxNDk3ODc1MDI1XktBV0VTQ0heR0FSWV5e
Xl5eXl5eXl5OUEl8fHx8fHx8fHxTQUZFIElQQyxBIFBST0ZFU1NJT05BTCBDT1JQLl5eXl5eXl5e
XjkwMDQ2MDAzfDc5MDQgU0FOVEEgTU9OSUNBIEJMVkQgU1RFIDMwMF5NQUlMMDAwXldFU1QgSE9M
TFlXT09EXkNBXjkwMDQ2LTUxNzBeXk9eXlVTQXxeXl5eXjMxMF41NzkyNzc4Ck9CUnwxMHw5XlFV
RVNUX1RNRV85MDA0NjAwM3xXSDM1MDk1MVReUVVFU1RfVE1FfEVuaGFuY2VkUERGUmVwb3J0MV5F
bmhhbmNlZCBQREYgUmVwb3J0IFdIMzUwOTUxVC0xXjk5UURJfHx8MjAxNzA1MTAxMzM2MDAuMDAw
LTA3MDB8fHx8fHx8fHwxNDk3ODc1MDI1XktBV0VTQ0heR0FSWV5eXl5eXl5eXl5OUEl8fHx8fHwy
MDE3MDUxMTExMjgzNS4wMDAtMDcwMHx8fEYKT0JYfDF8RUR8RW5oYW5jZWRQREZSZXBvcnQxXkVu
aGFuY2VkIFBERiBSZXBvcnQgV0gzNTA5NTFULTFeOTlRREl8fFRNRV5JTV5eQmFzZTY0XkpWQkVS
aTB4TGpVS0plTGp6OU1LTXlBd0lHOWlhZ284UEM5TVpXNW5kR2dnTVRBdlJtbHNkR1Z5TDBac1lY
UmxSR1ZqYjJSbFBqNXpkSEpsWVcwS2VKd3I1QUlBQU80QWZBcGxibVJ6ZEhKbFlXMEtaVzVrYjJK
cUNqUWdNQ0J2WW1vS1BEd3ZUR1Z1WjNSb0lEWXpMMFpwYkhSbGNpOUdiR0YwWlVSbFkyOWtaVDQr
YzNSeVpXRnRDbmljVXdqa0t1UnlDdUhTajhnMFViQlVDRW5qTWxRd0FFSkRCVk5qSXdWakE0V1FY
QzZOQUVkM1Z3VlRCWDgzQlZQTmtDd3UxeEN1UUM0QVZra0wxUXBsYm1SemRISmxZVzBLWlc1a2Iy
SnFDalVnTUNCdlltb0tQRHd2VEdWdVozUm9JREV3TDBacGJIUmxjaTlHYkdGMFpVUmxZMjlrWlQ0
K2MzUnlaV0Z0Q25pY0srUUNBQUR1QUh3S1pXNWtjM1J5WldGdENtVnVaRzlpYWdvMklEQWdiMkpx
Q2p3OEwweGxibWQwYUNBMk15OUdhV3gwWlhJdlJteGhkR1ZFWldOdlpHVStQbk4wY21WaGJRcDRu
Rk1JNUNya2Nncmgwby9JTkZLd1ZBaEo0ekpVTUFCQ1F3VlRZeU1GWXdPRmtGd3VqUUJIZDFjRll3
Vi9Od1ZUelpBc0x0Y1Fya0F1QUZYUEM5RUtaVzVrYzNSeVpXRnRDbVZ1Wkc5aWFnbzNJREFnYjJK
cUNqdzhMMHhsYm1kMGFDQXhNQzlHYVd4MFpYSXZSbXhoZEdWRVpXTnZaR1UrUG5OMGNtVmhiUXA0
bkN2a0FnQUE3Z0I4Q21WdVpITjBjbVZoYlFwbGJtUnZZbW9LT0NBd0lHOWlhZ284UEM5TVpXNW5k
R2dnTmpNdlJtbHNkR1Z5TDBac1lYUmxSR1ZqYjJSbFBqNXpkSEpsWVcwS2VKeFRDT1FxNUhJSzRk
S1B5RFJVc0ZRSVNlTXlWREFBUWtNRlUyTWpCV01EaFpCY0xvMEFSM2RYQlNNRmZ6Y0ZVODJRTEM3
WEVLNUFMZ0JWa2d2UENtVnVaSE4wY21WaGJRcGxibVJ2WW1vS09TQXdJRzlpYWdvOFBDOU1aVzVu
ZEdnZ01UQXZSbWxzZEdWeUwwWnNZWFJsUkdWamIyUmxQajV6ZEhKbFlXMEtlSndyNUFJQUFPNEFm
QXBsYm1SemRISmxZVzBLWlc1a2IySnFDakV3SURBZ2IySnFDanc4TDB4bGJtZDBhQ0EyTXk5R2FX
eDBaWEl2Um14aGRHVkVaV052WkdVK1BuTjBjbVZoYlFwNG5GTUk1Q3JrY2dyaDBvL0lORmF3VkFo
SjR6SlVNQUJDUXdWVFl5TUZZd09Ga0Z3dWpRQkhkMWNGRXdWL053VlR6WkFzTHRjUXJrQXVBRllN
QzlNS1pXNWtjM1J5WldGdENtVnVaRzlpYWdveE1TQXdJRzlpYWdvOFBDOU1aVzVuZEdnZ01UQXZS
bWxzZEdWeUwwWnNZWFJsUkdWamIyUmxQajV6ZEhKbFlXMEtlSndyNUFJQUFPNEFmQXBsYm1SemRI
SmxZVzBLWlc1a2IySnFDakV5SURBZ2IySnFDanc4TDB4bGJtZDBhQ0EyTWk5R2FXeDBaWEl2Um14
aGRHVkVaV052WkdVK1BuTjBjbVZoYlFwNG5GTUk1Q3JrY2dyaDBvL0lORkN3VkFoSjR6SlVNQUJD
UXdWVFl5TUZZd09Ga0Z3dWpRQkhkMWVnaUwrYmdxbG1TQmFYYXdoWElCY0FWVlVMelFwbGJtUnpk
SEpsWVcwS1pXNWtiMkpxQ2pFMUlEQWdiMkpxQ2p3OEwweGxibWQwYUNBeU5qUTJMMFpwYkhSbGNp
OUdiR0YwWlVSbFkyOWtaVDQrYzNSeVpXRnRDbmljdlZwdGI5czRFdjZlWHlGZ3YyeUJXaUVwNmkx
M09NQjFuTlI3aVozYVJvTmlkejhvanB3SWEwdXVMWGV2OSt0dktKRVVSVXF5MHVUcTFxMUV6WkRQ
ekhEZUtHTUx3WjhCaG4vOGtGaXI3ZG5YTTF5TVlRc0g3Rzh4NUFkMkVJUWxyWU50Ri81M0hCdTdD
S0dDNlh5eXhkWmxkdmJwN01QeTdQekt0YWkxWFBPSllITHNVSXRTbTJEUFdtNnQzMysxM2xsL1dz
dmZnQktla1RxcEY5cU9ReENDUzJRVHorRHdMWXhySERSQU5uSURoS2tWMmpnczZlZnhMdHZuN3l6
RytPc2lqL0xqNFlMZlhTVnB0SkhUNlZCZDN3VU10dXVRa3d1N0NLRDZKQXc4aS9pd01tS2dDNmJG
N1dUNThUMWY3N2ZKelEyZlpMd0VYU0tMdXJZWFVLYTZyVFZBdHVPeEVZZFF4cit4Q1BKdHhPWnlP
NFk1UHh2MmJJK1d3NTZOS0Z3Nk1Gek9xZ3c4Vy9kbjZSbG9GUGtCZGVBNTlha0xvdGpZb3o3eXJQ
bjEyZTkvZ2x5UE1PU1RRcFMvenlRNENiY0Z4UUlzLy9XczhXR054L1h0QUVtQkpISVlwcFMyUy9O
RDRGK0d4cENnZXJpRm1WWFNRaWxOa09YWUQrRkZ0U1U3WWRaSkJ3S1FwREkzRmFxWnk5Z2RkWkZl
QnIrQVhxMmxhMnNoZ29JUDd1bldITWl4Q2JWY3h3NERGSWJjY2UraVBJbFQ0Ym1UZEozdHR6Q1Vw
YW9MQVREZHBqVnBLWEtiN3FYOEZGSGJjOEl3b0RVdE1KMDdYbUdPdDloOU5ZZzZoTktROWRHU1Ns
V2VBbFJhcHdYOEQ2RTh0WDZGVXR1Ym1pZEx2VFdoZkoxYjFCZHJnNmhUMWRYZmF0b201RzlpYmwx
RkhWNUFXSjRETWlaWDNSY1d1M2lWYk9PMDJ4bVlwb0VsOUVMTmxPcXdkQVhYOTJ6SEJidTQrbkJO
WDVBR213SXhLRjl5djM3dk5lS3VBOVQ4cFE1VEoyNFNValVDNDY3ZnUwYm9iaEg4UlJMaU1QU1po
Qnl0REl6NitwVk05UTB1OVZJUEJhNGlrd0gyZGR1M2NjMDJ3QzNFamZaczNUSk40dnpmUWxpTDUx
RVUyTVJoN3FZNTNtaHpPZ2NaNmRvc2J0alVNSGZBOEt1bGd6THdOcFZDejRDSVBTaHNpVm80bGdq
WnVFVFVndnhOWXJjQm9zS3FERmQwUWNCM1MxblExSVpRZlNaSjBDUkliZndWbFhBalNFMFlWS2Rx
UUc3V2EwMzFwYjVyWGlHRHNXVlFIUkMzQW9DMlBCZm9DNWZBWVFDcHlRWVhaVHo3dUZoUnRJWVZM
V1h0SC9jdnJUOHFscTVhc282bVNIb29SbWFCR0VKdmhYMklLK1UwbDdNUG9wUEQ1SndFNXpoMEF6
NlZaQXlCMHdrZ3V1amN3K3V4NEpaY3JBbHNXaGhEZnhkZ0J5RmE4bDdINldPOHY5RFhjcUg5cEto
c1dPc010K1ZLYmRCMGNvTzBSRUVJNjBZaHBmQUMrVGxMNHk0UUd2MzB1Z2xGT2JYajJzUUZBRjVq
N1gzWnRZckd1aGhlalVIUjVhZDlRZXJib1E5Y0hOdkhPTnJrejczVzB6Z0QxL014UXFHSFNFQ3A1
eXRMeWc2aHEycFV5OU5BalJsVlBmald3YTlmYmMzdWExRkZRVm9MQVMwUy9IQU83UVJSWWEwRk56
RWdJNGtSdUJ2U2p0Undteml2ajlaR1Fta1JxREh4dEhVMnpkdmtiY0NlVEpMOFdFMExVMHJyNElX
Mjc5RHFCSXEzRG9aTEVZL3lta2ZqdVAvb3VDaDA4ZExncUJZSmlFM2RBaFUvWlB0NlRBNEpxNHc2
MXRHWVVQRnhPMVlKWFJ2N1ZJYkZtK2lCUjRoNXZPWlh2M1NzcDdHSHJVZDl5cElZRVR1QVlLS0g0
bTZkWSt6WUZGY3FIR1diVGJ6SzQ4Y09kRG9QY3M4eE9pY0krMGJFeEZRVTl6clR1VWlBem9Yajhl
dTd5eTdMWVFMYjFDbWNrcHR1RlNmZnVwRnFMQXdwUG9sVVl4SklVWENCY0Qra1RtQUhibVcvOGlT
M0c2bkcwZytweGlSMWlpOUlZQ0RWTysydUxrbnR5Z0kxd2xVZHorc0Q5Z3Y2TmIzQmJPK094WEF0
aERQMldqeFM1S3RGdnhhNWY3aDExaVZycUZrMWJOdFdJUlNGZFkwcldkZFY1Mm1TOGZXUnYzbHhR
d2dqQ3pkejlUZzNhTjZOYnlGSWovcWhPWVZWUGJpV2oybzkrQytpYUlkbWhFS1lkc3hLTVN4TFJa
Z0hKZ3dkMmN2ZkRpYzNNSzR6Vk90cStlbmZ3L3Z4WWlRYmxldmgvRXM3cjVacldCVXNxdG03MGZ1
aENDUHoyZFY0c1pqTXBzTWJQalNhemUvczlua3hGQmdCRTRLWHUzNklxSGlaTlp3dXhjUzNzK2xr
Skc0KzNIeStGRFJMQWNQcGtod1RaSHVZRlYyOEJCZ3ZscHp2NCt6bTVzdjliSFlwOUNDWEtTd3dj
TEdQcXRENHFmN1cwSWU2SFJvdTBSZ2FOZ2N5YkljOFE0eHVKdU9wV0hZeG5uK2VqTVlMWWU0QU5w
RUhMVnpnK0VhUFJ4eUkvNjQ2MWVKdVBKcmNqcWVDV3k5cFdJY1pNQ1R0MjN2L3BNSWtiaGtwK0pi
OGRJd1B1VkJJY2NPdkw1UG9LYzBPZWJJNmlNZjVjOHl2b3NNaFd5VVJwREErc01tZU12RXNGWVBS
WnRORzM3SVNIOWxHKzcvRWRiU1BqZVh6ZmZRWXEwVFp1bnRldTlXdU9BalZibDgzYWdBQnhlVkdu
ZDJDSFphTEM2V09DbXZrSWJKOEc0bjlmVFZjTENmVDY0dnBySDdFaG9tSS9VUmtJc0pPRllyakgz
N0ZJNVpsSG5rQUJhL1N4U1RpWG9sSXhodG80UE50TnpCZlZXTmRaQ2hhQWxpS09MYlBBOEN5MHVn
MDJzYkdsaVZZSEs4b1RCTnh3RCtQMGlmQlV5cGQzWTZFK1FFSldONVNtR2RIc2VCczNUaU5Nb01U
VUlqUlR2SEN1cG9CcXVwNEg2ZXJ1SUc5aXE4dWk1S1FMNmpLV3BUbVhEMmh1U0Vjb0hTeGpNUU5x
alNsNURvRjFnRHppUHh4OFpsREl5SzRYbDhMUDF0K3VST3hybkQvcThuSWdGUlRnaUtKaG04ODdR
TVFUT2hCaVVJVmdNTVBocUVyVzZtRXNBRlpQQzRqYkRkTXhWYTBEak5KSCtQL2ROaUhObXRkc1l0
N2dnSm1JRDdtNStJYTVVLzVUa29SWDBDZngvdmRQczdWVTNwRllLKzN3Q2JsVC9rTzJPZWw5UEpq
Q3V6M0Z0aWsvQ25mZjBLRmdGNUFQNDJmd0xiZmpMZ0VXYWUzcUNibFQva3lTUWNZY2wwSHpmanJN
Zm1XcmVUdmtoVDV3dDd5bVpRLzVmdXZFN0xwMzd1TUhSazFtUktqM3JLZUpFWEZvVW5mMlRUUzVY
TWlTNnJESWZyT3I0OTVza24rRzR0SCszaVZiUitTTkpKdFN2NTlGdzhPN09odG5hekVCR21lUE1Y
cG9RRWc2UTlRSTgxRkFmbVlySXZzbmJPQ2tZOUJ2aHlJczViMVB0c3F3eUtCSnVrNlhyRll5YXE5
WW1UWWdLOGxmemZoMDBoMzBzWmNVNGZqUmlocEZhVnBsa3Y4VUhPbVQ4ZmtJRjREUE1UNTM3SDh6
UVBvdU9vQ2kyclpRSGtxM3lrb05kSmRKS3MxcVJDaGo4bTZDVUZWaWtnR2NTOTJ4ZUhJTmtCUnZS
dFEreWRlbmZSQmxubFZaVjlxMWF6OVV4a3JpOXRzenk5aUVXUWFleFMyeXczQS9ST25UbnA0em80
YjBjRThWSkIzc2RMWkpFSjdkQ0NPTWNIMmY4bE51WlFBZC9HK2VBdGZsS2tHelA3cFRpZGRQVWY3
Q0t5MVQ5U2VTclpJaG9hSzYrZElLcmZheVEvVnBvVW1JSHJZd0padTNBVDlFNVpPdXBhbTNNV1A0
UEI3R1dSMjJlNjRLWW9mMllBbTIrMHh6U0JDN1NBRUpBZXA4MTM1a28vUkdkRDY1eHFkVkNKTDR5
eU44a2cwczRmVkh2UUNIbTRjZGtCMzNSTEQrL1FIakRmQVdMN1huZC9OK1lwL0ZLY2l5OW44ajNl
OUd3RWR5WXM2QVlMclVPN1A1K01yY2M2em5Dekg4NDd1UUdlZWo0ZWo1ZVR6dUhkelFMVFVOWjFO
QjlVa3BnbFZxVThsU0RCUi94U2xrMWErVzltbXlxclNmZEpCRGtFaFMrTnR0TkZUWnc2TzlJL0tF
L2N4T0VEOHZra3FRTm8vV2Vta0FrdzdrRldXcmhQMkc2QnMvMTNCSnZaNFU2Z3o4UFZQVXpvcGoz
M1NnNC9wSmo0SVRlNzJpZlM5dy9mZE0xUW80cEdlb3A2and6czlWaGt3KzZjb25mUXhXeDIzRUZr
a3ppcGM1VlU5eGNOUFV6Z29NZ2hoditOL2VUandpaTRiaVVhNzJuSW5IVkRqeEJkWXBLTCtIWG9i
OUVhdjAyaGxyQ25PMi80SFFjQlJxd3BsYm1SemRISmxZVzBLWlc1a2IySnFDakUySURBZ2IySnFD
anc4TDFSNWNHVXZXRTlpYW1WamRDOURiMnh2Y2xOd1lXTmxXeTlKUTBOQ1lYTmxaQ0F5TkNBd0lG
SmRMMU4xWW5SNWNHVXZTVzFoWjJVdlRtRnRaUzlKYlRFdlFtbDBjMUJsY2tOdmJYQnZibVZ1ZENB
NEwxZHBaSFJvSURJNE15OU1aVzVuZEdnZ016UXhPQzlJWldsbmFIUWdNVEV6TDBacGJIUmxjaTlH
YkdGMFpVUmxZMjlrWlQ0K2MzUnlaV0Z0Q25pYzdaMi9ydXU0RWNiZko5VW1nSkhITU5MdFE5eGky
MjFUcExoSWxTcDVnVlJCbWdCYnUwaVhLbFg2dkloWHVJTXo0SjEvbktGSVNmYjVQaENHajQ5RVVU
Si9tdUZ3S0QrZkVBUkJFQVJCRUFSQkVBUkJFQVJCRUFSQkVBUkJFQVJCRUFSQkVBUkJFQVJCRUFS
QkVBUkJFQVJCUitoLy8vL1BQLy85VnlwLy9QdFBiZUhQdDdKdGRuWkxJZWh5MnJnZ2dqWmU3bi82
NGZiemIvSmwyMzRyeEJyNGdqNjV4aUNLQzFteHM4OE1nbzdUWmtxMmJ2L2xiNy96ak02QWtlTENX
TUZtUVc4dlFvbTdQYjNScng1VzVOMTFCMURzUTJLY0JiMnJZcFRNUHdWRVFBT0NTQUlsWFV5czRM
TkJrTkJHQkkrVlBIekU1N0JIRUdScVF5T3dTcnJBSkVHUUtUWk1RQW1DZG1wejJMUTdCNVFnYUVB
YlRVbVVOaE9HR1ZnSUNoVFR0QkhFcnpCTXBoNy8vV1VyWC8veGh4Ly8vSHNxMi9Yazk5dm4yMy9Q
YmlOMGtDZ0VFYURFYjJDWXRJaWpaSElJeU1yb3BTOFJqWnU2aG1sN2hXRVMycjUzc2tUVkFxeUV0
cXVoTDlIWmpScVJGNFVRS0cwbTdPeVdYazU1cStRVk1NWFNRRzEzcXJNYlZkWm1jVXhQanptaXNv
Z21zbmVVdk1kL3ZvcjIwd1NtV3IwQlVQRjhFek0xZDlCRWFZR1V6blQvUHFXV1czTDlvRWRNRTRj
ZzJqQUZtSXIxQmtDWmdRaTJTbk5wR2xnOFJRR1FDNUtsdi9yTXlDZ2ViWUdwVndlcUd5U2ZRaFBa
bzUxTzBhWGlpaDVOeVJHMHQvdHJkWjRWZW1tZ3RuNnVBeEh0dUdsL2VGeXMrTmhacmhNU01hMU1L
UjdsbVNxdkVuWWR1V1FPVWQzbCtSSDhGMlhNZExLdjI5WVRWMlVDVldyL2lUS0hUaTFRZTJneXJk
Szl0eXhSajZjMFU2ZTdmNlo5R1lqdWVuYks3RG5WKy9aQS9Mazd5c3VUMVoxSElFenkxK1Q2MWlw
dzl2YmJwdjBvQldTZGJxZk1yakpXVlo3TnBVQ1Y1dEc2VE1WUXhGaDE5NzNzdEZSc25vWTdiYnQ0
S2srUWVPM2FyQlBIVTdQTUUwdjNaQk9XZFVEbCszL21mS3Z6Q09KRU1vMjVvSjJLemRNd1RWUnR3
SkVZc29rMmRGbHJ5MW1Pbi9tTjczSHZreFV1QW1xQXB1Q1VCMnFyV3FndTBhZEk5L1A3dnN3aVBX
SWFRRWtYcjU1YnhmR2JHM1hYZCtEOVgrNkpRSG1CRVc1QU1JT21HMmxlbkxhcU50M1JIRWFaUUhG
cWNWdXVFNk9JemRPQU42WFh5QWR2dWtXVDdnMnZrczJiKzVRLzNiWDJmN01aU0ZjQVpicG4zdW5v
RTljVmltMENKOU9MYjd4aTJGdy9JSUxMR0UyNnE1Y0l5dkJsd3BWczdiYlpkc3IxNjJSb3VyL25W
YXQ3MFFxZ1NqY0g4OXpqQ2dldXpNc0IxYWJ0aWI0NjBPdW90cHZsbU0wdCtoQzNpdGUzYlQvRjY4
dDBxaW5WSGdEVVFGeGQ3eUtRRVVBTnNQQnlRSEhjWUwrenh3bnFHcVZGV09uNmswMjlmOHNNckY4
dHFYY0NTdnQ3R1lNUzEybEdMRXQyNnJXQWFsTWpSSit2OWplUlplRlpQYStJNVlyaXozeEoycDBT
ZllIZXllVWJzeVlhbWZhL1hzdzh2MVQ1dFlBU1llMjJlNWM4b2paQnZXU014T29xRXlYeGVXQ2hi
dW5nT1VVZzk0Y21GZ0YxU2xCQ0E5VXUyemVMR2U1clQ3OGI5TzZTOVZwQXRZbmxMUWpWbnRhR05i
cEFlUkNKVjVPdnJzRkt0cHhPZklyWGx3bDJyYWh6T2xCeHo4K1hzWW1rZk9yUmxZSHlRQ2laSnow
Szg1Z3k2UkNMRmx1VTlDZGRza3BBVFluMWFXdXk4eHMvWldKM2VENDMwOVI4SWxObUh1cXlRSG54
N1pKNUVqUjVLSm1tUnhmeHVXZXdnaEZXQ2FqYm1nQ0MyVEh5TXNjZGVyTzVRT2tLSndMRkRjaWtJ
WFZqajFjR3FtMG45OGxTRGZkRWVGeFRFR1BWTFMxaW91U0RFblRXVTRMbnVsZGt2dlIyL2NLaldj
YmI3V1BtUVJlTm9RWktKbGMydjFUNWhZQnFqUXUvbHN4VDhKQXhiOFMwc3dUV3FnUVVXNmdwS1JP
bEJJTjRyL3c5WDI4V0gyNVJsRytQTWplUUZ3S3F6YlZqcHZKM2JFNVl5bHVvNlVVRFc3VlE2MmFq
TWt6dFNhV3VIcTRiT1J5Ymg5cXZHSmtYQXVxTCt2bk9mTzhpWjYvTDBVN1hic0JhSmRzL0Y2aW5i
MjUyK2ovQk5HZ3B1cGhaWXpMY2RhZFBFN3dvVVB2TlUyQ2JXazhzNXVJdi8vcXRmdFVmZHVIS1J5
VGF3V09ld2E0OExycTVBWUdkQ2pwUE10ODcyRGlUeTVmTVBvcFp6aXdOZm5XZ1JFU2kycldtK0ho
TWlvbVA0TWpEcXJWVHlSdUNtTTRldllSU3NmK21uNTlBZjNianlWNXY5R3lpQ0FzRWg5QTFlNGJN
bXlGcTJ4Q3ZyZ29tY0hVTHUvRjh2UWJrOUxVYkdxalNlcUxBTm1VQ0VhWlZNaTBVbHdBclBrbzFJ
akVYcU9mVTJaenVQVG1UaERDQWFqZFpLRmdQMWZVaFJUMWVVQ0xPc0RWUDhJSkE1ZU5kWDhLZlhl
dWFKODh3dGV3SXIwK2daR0tWdnlGOCtYN3dPSG9KYmVVbk1hdE02VDVUV2wyZWQrZUcyOS9OakUy
MmMrQTByd1pVL2thZEhEMlpXQVVvZWViSmZHTWFxZndOWWV6RVM2bytTS0h0VHNHK3V0c2tPeTBa
aFNSUVkrM2ZreURSUmVPTmdZcm5ucExtU1Z1bHVIampyTFlrL1QxdG1uZGN4VWdEM1ltSEJvRTdw
OTJxcEd0WFhlNlVaeXFPdW5TZlJaYXBwK3ZmWGcybzB0SzhtMk9lNHFHVGlWSUpxeUQ2VngwQUR0
eEp4aFNNT0xnWG1hTjFJaVg1OEFRUHEzWmpYV0Z5OVVRd2hDazlsOCs3RHNuR2VEVlVGMWd0a2dD
cUZIRDJ6Rk5nbTdTek4xQUNPNVVQK09zbkJPNjRpalU5aWc5TjNYT0lkVFh2ci85UmYzcXR0L3R3
RzZaTEFKWGNpLzI5cW5tS0kzZzd5YXJPUng5cG9hQlBvaGFvZktjYWkrK05qWnZ5THQvQWZEU0Fn
cWFybW40VDU1WWZZNXRNckFaT2VXRHdDRUd4ZURTUjdGVGVqNFFLbWdSV1UwWlBBVk41OHlTZTd3
U2dvTGthQU1velQza0xOUmVvNm1LVDFzS1dvakVRMUJVUEtLcEFMUm85YmZXTE4xM3psRC9aTmox
K0lMd0pRVjF4WEtLMGJIekFRbzBacVM1VzFRZGZpQWJmaWduMkVOVFZHRkFERmlybUlsL29PZi9W
cC8yTDFWdnJRbng3Rm9hM05jeHQxWHVMcHA0dk1pZDFyeXg3SDdOUUdhOXY5V255ajhzTHBxWkhK
THgwaVB5MFBtVUN6RzNWUzZ2TEM2VklyYjRMOFYyUjc0M21UWktHUmFlUG9aWU9aT2dobk5yWld6
R0F1dm5MM3g3Zi8yNkxWOFBWRWdCT0YyWHhCZGZrbUt3SjVwb1NwWjdmdnV0WlFDMks4czIvQ3Qr
a3pSTmJxT2tEcUJnV0VtRjF6V1duRjFRWHFNT2FRVjlaTnhueW5uNk11VGNQbFVFcEdlV2Izc04x
TEdLZHYvZk1BZlg4NkNSZ0txT3JBVVcrWDVBWXZIVzVVcWFFWjZGbVRVWE52UTQ4MTZ5Wld1Rm41
akVaOXZ3SFBKeURNMUdydThRYmQ1OVpNYjFKTzMxSSt1M08wdUx4dVZHK2RlT3AxdGtUNW1sNmZJ
OVVzanRtL0lIdWZ1TEQ0WlVMNXVJTDNzczhGdmZlZHNTWFBGeitLWjNlOW5UbkY2ZWd0OUViZUEz
TE44bGNqejhXUDh3RGxjdysycDk2VkQwRnM2bmNCczNVb295akVsRDA5WW52eSt6a1BPd3luOFlR
UDhXbGRVN2F2Zmk5UGdWZTNpdWVoVUpreFE5ak1YY3hyd25iNkxadCtoRHNIbnR6RUI1UTdkSE5K
b2xkK05EbXRUS3ZzQ2VhNGtsdUdUdDcrMTIrS2VNcGl1eDV6dDY2K2R6cXlFajNUeE9vcC8vc08r
b0crcit4Uy9uMTQzZHFUS0NDWG1RZWpta3lkekVIaklGWk1TdVBvM3ptQnQ2VmVWcHVaTDQ5MDhV
WmdJdENFMVBzMU5iSWx2Rmp6Tk96RGhUSFlGa2VVSjdNSVVZbTZPRUZHK043c25tNG9PdDZlOUVu
UWZQRWxsV2dNazFxLzJzYTYyT2twM1dxUVlra1ZudU1DTG1tWGp2WHBSc05BSFZUUC9sWGpmN3BY
VXhuVXV0bXJTM3Rub0s0Q1NTREJ1Sk04N0c3QWFBRzRoakpLN1pJd1VKNHpSU1BvZkpHYWtxSDU0
QjVpOVZTOC9SY0R4U1BudG9WOUhvWGJmaVNSMzlhWHFpUXVKa251NkxlckJ1eUlBMEFOVUJIN0xV
ZUlKMDFFWmduN2ZWNVdNMmRpaklub1pabXc2NXorWUlubk9pREpwc1JCQ1h5ZXlWenBVeXZqeHNm
UEdGakdLaHVrM1E5b2ozVkduYks3SzVkc2dLZ1ZuUjEwY2pWaXpWS1FKbWVpUW1VQ0VEeDdvK1Bo
em1mQzFSK0xsdlhMSUxWT3ZnMkFOU2VmRWd4MFhCd29qS0Zwc2RDRS96aElwVGFSaDdnN0pGV2hN
MjdEb3pwOG1WNjFCU1hiOWhDNlEzTU1QVXhMcCt1TXdpd0x4VXRwdEJNeFVhS1VGcVJhMlNLWm5n
UE9GWWVLQzhRcCtuSXhPdEtjNTF4QXc0YlF5VmJkUXBRUVh1T0VXSFZCcXROVTdWQnRHMURIQjI4
c3UrWXcrVXZmakIvcElHS2U3anBkTVZ4NDlheDBhZFFBbW9zeWxldGYzV1VMOURwQzJyMFNzQlRD
RHBGR2FEaWdGTFZRbm0zMEllZjJNQnp2bFBHVU0raGVhaDgvUmxmMGZTY1MvTlFnVTRINmpPcjIv
bTcyU3lsTWRRanpPMTVOajhsUUpFci9yUE4xdE9uVUFYcUdVNEhtOGgvOVJjbVYyTXN3NWtTYlow
Nmg3RGQ4dURReFBFcUpmUWVLZTZ1b25DZVQ2YTdldjRialk3YjRON3RJeVd2Uy9HUEgwdDQybENo
NlN1T0FkVWF4RWVUYmVqeHpqZVc5cVM4dXczM2Y5NHNFN1V3dy9KZWsvalFYMVcyNVBFRHFJUEZl
WHFydzRNRE1xZUtiaC9QdzgvYzZJSjVLRjJuTjdHYmIrMHNvTHFOMUhwVXNydkZsdmt3b0Q1RTE5
eUw5Z1NYNHRWRnc3RTJoL3lhZG1xZEhzV2xSbkZWaTV5WmFpUHoydytmZUtsSnM2N3d4VVZ1bmdn
YmZrS21rdXAyaVc0a0FYcFh0U2pwcFNKZ3lwUVlkclgvaXNPTTBIc3JScW1kVFFaVFFtSlFJTjZE
cGs4bEhpNlpDeGpOWllQYjUyZTMrb3A2ZlA5RGFhZWtmVUluaWgwOHZmZ2lLUEQ2SUtnVnBWSzBL
T25rd0lDbXM1c1BRVmNSSlFHeTU1YXhSekJNMEh1cmxLM0h4bWlNSTlxWWtteFhueGNFbmFMV3lo
QXB1ckRuSmlhajc4M0R4c1dyZ0loUmdsV0NQb1BJN3BpNU41bWlhV3IvZGNCNld3aTZwb2dzYll3
Q2pyeC84ZnFwczg4SmdpNGhFWE9JYlJQRjlNaEZCRVFRMUZYN1c0UlVQdFVLUkFpQ0lBaUNJQWlD
SUFpQ0lBaUNJQWlDb1BmV3IyNlgzWGdLWlc1a2MzUnlaV0Z0Q21WdVpHOWlhZ295TkNBd0lHOWlh
Z284UEM5TVpXNW5kR2dnTWpVNU5pOU9JRE12Um1sc2RHVnlMMFpzWVhSbFJHVmpiMlJsUGo1emRI
SmxZVzBLZUp5ZGxuZFVVOWtXaDgrOU43MVFraENLbE5CcmFGSUNTQTI5U0pFdUtqRUpFRXJBa0FB
aU5rUlVjRVJSa2FZSU1pamdnS05Ea2JFaWlvVUJVYkhyQkJsRTFIRndGQnVXU1dTdEdkKzhlZS9O
bTk4ZjkzNXJuNzNQM1dmdmZkYTZBSkQ4Z3dYQ1RGZ0pnQXloV0JUaDU4V0lqWXRuWUFjQkRQQUFB
MndBNEhDenMwSVcrRVlDbVFKODJJeHNtUlA0RjcyNkRpRDUreXJUUDR6QkFQK2ZsTGxaSWpFQVVK
aU01L0w0MlZ3WkY4azRQVmVjSmJkUHlaaTJORTNPTUVyT0lsbUNNbGFUYy9Jc1czejJtV1VQT2ZN
eWhEd1p5M1BPNG1YdzVOd240NDA1RXI2TWtXQVpGK2NJK0xreXZpWmpnM1JKaGtER2IrU3hHWHhP
TmdBb2t0d3U1bk5UWkd3dFk1SW9Nb0l0NDNrQTRFakpYL0RTTDFqTXp4UExEOFhPekZvdUVpU25p
QmttWEZPR2paTVRpK0hQejAzbmk4WE1NQTQzalNQaU1kaVpHVmtjNFhJQVpzLzhXUlI1YlJteUlq
dllPRGs0TUcwdGJiNG8xSDlkL0p1UzkzYVdYb1IvN2hsRUgvakQ5bGQrbVEwQXNLWmx0ZG42aDIx
cEZRQmQ2d0ZRdS8ySHpXQXZBSXF5dm5VT2ZYRWV1bnhlVXNUaUxHY3JxOXpjWEVzQm4yc3BMK2p2
K3A4T2YwTmZmTTlTdnQzdjVXRjQ4NU00a25ReFExNDNibVo2cGtURXlNN2ljUGtNNXArSCtCOEgv
blVlRmhIOEpMNklMNVJGUk11bVRDQk1sclZieUJPSUJabENoa0Q0bjVyNEQ4UCtwTm01bG9uYStC
SFFsbGdDcFNFYVFINGVBQ2dxRVNBSmUyUXIwTzk5QzhaSEEvbk5pOUdabUozN3o0TCtmVmU0VFA3
SUZpUi9qbU5IUkRLNEVsSE83SnI4V2dJMElBQkZRQVBxUUJ2b0F4UEFCTGJBRWJnQUQrQURBa0Vv
aUFSeFlESGdnaFNRQVVRZ0Z4U0F0YUFZbElLdFlDZW9CbldnRVRTRE5uQVlkSUZqNERRNEJ5NkJ5
MkFFM0FGU01BNmVnQ253Q3N4QUVJU0Z5QkFWVW9kMElFUElITEtGV0pBYjVBTUZReEZRSEpRSUpV
TkNTQUlWUU91Z1VxZ2Nxb2Jxb1dib1crZ29kQnE2QUExRHQ2QlJhQkw2RlhvSEl6QUpwc0Zhc0JG
c0JiTmdUemdJam9RWHdjbndNamdmTG9LM3dKVndBM3dRN29SUHc1ZmdFVmdLUDRHbkVZQVFFVHFp
aXpBUkZzSkdRcEY0SkFrUklhdVFFcVFDYVVEYWtCNmtIN21LU0pHbnlGc1VCa1ZGTVZCTWxBdktI
eFdGNHFLV29WYWhOcU9xVVFkUW5hZysxRlhVS0dvSzlSRk5SbXVpemRITzZBQjBMRG9abllzdVJs
ZWdtOUFkNkxQb0VmUTQraFVHZzZGampER09HSDlNSENZVnN3S3pHYk1iMDQ0NWhSbkdqR0dtc1Zp
c090WWM2NG9OeFhLd1ltd3h0Z3A3RUhzU2V3VTdqbjJESStKMGNMWTRYMXc4VG9ncnhGWGdXbkFu
Y0Zkd0U3Z1p2QkxlRU8rTUQ4WHo4TXZ4WmZoR2ZBOStDRCtPbnlFb0U0d0pyb1JJUWlwaExhR1Mw
RVk0UzdoTGVFRWtFdldJVHNSd29vQzRobGhKUEVROFR4d2x2aVZSU0dZa05pbUJKQ0Z0SWUwbm5T
TGRJcjBnazhsR1pBOXlQRmxNM2tKdUpwOGgzeWUvVWFBcVdDb0VLUEFVVml2VUtIUXFYRkY0cG9o
WE5GVDBWRnlzbUs5WW9YaEVjVWp4cVJKZXlVaUpyY1JSV3FWVW8zUlU2WWJTdERKVjJVWTVWRGxE
ZWJOeWkvSUY1VWNVTE1XSTRrUGhVWW9vK3lobktHTlVoS3BQWlZPNTFIWFVSdXBaNmpnTlF6T21C
ZEJTYWFXMGIyaUR0Q2tWaW9xZFNyUktua3FOeW5FVktSMmhHOUVENk9uME12cGgrblg2TzFVdFZV
OVZ2dW9tMVRiVks2cXYxZWFvZWFqeDFVclUydFZHMU42cE05UjkxTlBVdDZsM3FkL1RRR21ZYVlS
cjVHcnMwVGlyOFhRT2JZN0xITzZja2ptSDU5eldoRFhOTkNNMFYyanUweHpRbk5iUzF2TFR5dEtx
MGpxajlWU2JydTJobmFxOVEvdUU5cVFPVmNkTlI2Q3pRK2Vrem1PR0NzT1RrYzZvWlBReHBuUTFk
ZjExSmJyMXVvTzZNM3JHZWxGNmhYcnRldmYwQ2Zvcy9TVDlIZnE5K2xNR09nWWhCZ1VHclFhM0Rm
R0dMTU1VdzEyRy9ZYXZqWXlOWW93MkdIVVpQVEpXTXc0d3pqZHVOYjVyUWpaeE4xbG0wbUJ5elJS
anlqSk5NOTF0ZXRrTU5yTTNTekdyTVJzeWg4MGR6QVhtdTgySExkQVdUaFpDaXdhTEcwd1MwNU9a
dzJ4bGpsclNMWU10Q3kyN0xKOVpHVmpGVzIyejZyZjZhRzF2blc3ZGFIM0hobUlUYUZObzAyUHpx
NjJaTGRlMnh2YmFYUEpjMzdtcjUzYlBmVzVuYnNlMzIyTjMwNTVxSDJLL3diN1gvb09EbzRQSW9j
MWgwdEhBTWRHeDF2RUdpOFlLWTIxbW5YZENPM2s1clhZNjV2VFcyY0ZaN0h6WStSY1hwa3VhUzR2
TG8zbkc4L2p6R3VlTnVlcTVjbHpyWGFWdURMZEV0NzF1VW5kZGQ0NTdnL3NERDMwUG5rZVR4NFNu
cVdlcTUwSFBaMTdXWGlLdkRxL1hiR2YyU3ZZcGI4VGJ6N3ZFZTlDSDRoUGxVKzF6MzFmUE45bTMx
WGZLejk1dmhkOHBmN1Iva1A4Mi94c0JXZ0hjZ09hQXFVREh3SldCZlVHa29BVkIxVUVQZ3MyQ1Jj
RTlJWEJJWU1qMmtMdnpEZWNMNTNlRmd0Q0EwTzJoOThLTXc1YUZmUitPQ1E4THJ3bC9HR0VUVVJE
UnY0QzZZTW1DbGdXdklyMGl5eUx2UkpsRVNhSjZveFdqRTZLYm8xL0hlTWVVeDBoanJXSlh4bDZL
MDRnVHhIWEhZK09qNDV2aXB4ZjZMTnk1Y0R6QlBxRTQ0Zm9pNDBWNWl5NHMxbGljdnZqNEVzVWxu
Q1ZIRXRHSk1Za3RpZTg1b1p3R3p2VFNnS1cxUzZlNGJPNHU3aE9lQjI4SGI1THZ5aS9uVHlTNUpw
VW5QVXAyVGQ2ZVBKbmlubEtSOGxUQUZsUUxucWY2cDlhbHZrNExUZHVmOWlrOUpyMDlBNWVSbUhG
VVNCR21DZnN5dFRQek1vZXp6TE9LczZUTG5KZnRYRFlsQ2hJMVpVUFppN0s3eFRUWno5U0F4RVN5
WGpLYTQ1WlRrL01tTnpyM1NKNXluakJ2WUxuWjhrM0xKL0o5ODc5ZWdWckJYZEZib0Z1d3RtQjBw
ZWZLK2xYUXFxV3JlbGZycnk1YVBiN0diODJCdFlTMWFXdC9LTFF1TEM5OHVTNW1YVStSVnRHYW9y
SDFmdXRiaXhXS1JjVTNOcmhzcU51STJpallPTGhwN3FhcVRSOUxlQ1VYUzYxTEswcmZiK1p1dnZp
VnpWZVZYMzNha3JSbHNNeWhiTTlXekZiaDF1dmIzTGNkS0ZjdXp5OGYyeDZ5dlhNSFkwZkpqcGM3
bCt5OFVHRlhVYmVMc0V1eVMxb1pYTmxkWlZDMXRlcDlkVXIxU0kxWFRYdXRadTJtMnRlN2VidXY3
UEhZMDFhblZWZGE5MjZ2WU8vTmVyLzZ6Z2FqaG9wOW1IMDUreDQyUmpmMmY4MzZ1cmxKbzZtMDZj
Tis0WDdwZ1lnRGZjMk96YzB0bWkxbHJYQ3JwSFh5WU1MQnk5OTRmOVBkeG15cmI2ZTNseDRDaHlT
SEhuK2IrTzMxdzBHSGU0K3dqclI5Wi9oZGJRZTFvNlFUNmx6ZU9kV1YwaVh0anVzZVBocDR0TGZI
cGFmamU4dnY5eC9UUFZaelhPVjQyUW5DaWFJVG4wN21uNXcrbFhYcTZlbmswMk85UzNydm5Jazlj
NjB2dkcvd2JORFo4K2Q4ejUzcDkrdy9lZDcxL0xFTHpoZU9YbVJkN0xya2NLbHp3SDZnNHdmN0h6
b0dIUVk3aHh5SHVpODdYZTRabmpkODRvcjdsZE5YdmErZXV4Wnc3ZExJL0pIaDYxSFhiOTVJdUNH
OXlidjU2RmI2cmVlM2MyN1AzRmx6RjMyMzVKN1N2WXI3bXZjYmZqVDlzVjNxSUQwKzZqMDY4R0RC
Z3p0ajNMRW5QMlgvOUg2ODZDSDVZY1dFemtUekk5dEh4eVo5Snk4L1h2aDQvRW5XazVtbnhUOHIv
MXo3ek9UWmQ3OTQvREl3RlRzMS9sejAvTk92bTErb3Y5ai8wdTVsNzNUWTlQMVhHYTltWHBlOFVY
OXo0QzNyYmYrN21IY1RNN252c2U4clA1aCs2UGtZOVBIdXA0eFBuMzREOTRUeit3cGxibVJ6ZEhK
bFlXMEtaVzVrYjJKcUNqSTVJREFnYjJKcUNqdzhMMHhsYm1kMGFDQTFOalE1TDBacGJIUmxjaTlH
YkdGMFpVUmxZMjlrWlQ0K2MzUnlaV0Z0Q25pY3ZWMWJjeHMzc243WHIyRFZlVGgyMVhvMHdOejlK
dHUwclYxWmRpUWxxVlN5RHhRMXNxYVdGNFdrNHMzNTlRZVlHUURkUUdNNEltanZiallraU12M2RU
ZlEzVE1BeENheCtPOHJKdjZ2cVBoa3ZqejU4NFMxWld6Q1N2bS90cWdvbzdLc3Vyb0ppekx4N3lT
SldCYkhjZHZvOUh6Skp1L1dKeitkdkxrNU9YMmZUZExKelgzZmtlaWNKZWtrVFNQTzhzbk5jdkw3
aThuTHliOG5OLzhVTmNWdkhGZk5xeWhKZUJ5TGozSEVjNmRGTVdFTXRVakxPSXF6TW1icHBJcFkx
ZFcvcWgvWG05M0xpV3o0NG5vMzJ6MXRYL2ZmM2plcjJVSjNaMFBOaWt4Z2lMS0U3eDA0aXdYVWds
ZGxQdUdGR0RtV29OdEcxNS9PYno3K294L3ZuK2NYRjMwbjB4c2h5M2lTWmxGZXBsSjB5OG1yT0Vw
eVdaTHdWTFpmVEhoY1JMSHNLeHNvN3R2TDRqekswNjQ0aitKVWZFeEVjZGNyS0hpWS9IcXlPaEVT
allzeVRjVHZhWkZtZ2tyRThyU0k4OG5WaDVQZi95MTQzWW1pZ3JkVXZwMW9jQnF1QjhXMTBQeWZK
K1NQcUUxV1JHV3NDV25rb2poTlV6K2JnOEEvRDQzRHdQeTRGRDNEcXExUUtNaTY3Q0M4TVJweUVD
YXUra29CMHJWY280cVJ1aHpyd0pTZUI3K0Zic2F5cFhXdEZvVkNUTThNVGFBazR1a2tTNktxakt1
cW43aGZacnVtWHFtWmU3NjZYMitXb21pOWdsTklBTE4xaXRpbWNVWjkxL3pUT0kzeXBLcktGRWxC
eWp6SlczVWN3L29RUkJ0Q3AwaGMydFdDd2dOQXRYWTg0QTlDdVc5OGc5S3lUV3NtYTdsUktNT21C
UjdNQjlHdWhjWHZWUzJGL0NqcXRrVTBNQXU0OUhPaW11U0Y1OEwxWXoxdmx2VnFlREpJU1lzbVZW
NVpxb1RGZWlwa1JSNGxtZEJMWmhjamVRazNTQzNFUXZpNmRianRrYmd4UUd1K1lKaDJaWW9rVklK
c2piOW56dEx0SWY0c2hxeXFDc213UjZzWFJudDh3d2tidUpZTFhnb3l3TWtCRzJhKzVKZyt3SjdL
cEQ2OUprUFIrVzVMbUdmbXBYRVo4VVJPTjJ2aXZWM3M5MEdPdTNhREc5bTE2THVVK0dIb0FBcU9F
eW1NWEJCWnlvU2tlVlVsR0tFc2owdTNQQmpvWGhBR0t5ZzI5Y3BZRktRNm9FRkZNZTVKVjZDSW9Q
S0FTSmdFYVpHSmNTMEN1UnV2VWZHbGJUVUJIQnlUaVRHZ1hndFJ4aWQ1SnVxM1U0SlZwWEJOa1pp
aXNzMm1ia2RVcWFHcG04cjByNTlmVm43VURtMVNzb0drU005UUZyc0JZaVZ5SzFhSWRhWHI1dDNu
TnlxVFkveVVsNmVzeXNxK0s5MndFaTJUVXF3dWR1dXpEMVBWV3JlU1NTQTFNQlA1WGNtU09FNjd0
aC9xMVYyOWVXMlBsWW4wTTQyN2hCVTMrTlNONUlObVYzZXFkaWc0bDltb2NDbGtnUHh1Q0kvVjlQ
cnMvVlJJby9zUGhhMGJNTWtpbmdsWXZjZysxclBGN21IVWVGYkxNc3NMRnNkVkh2TXlUZk1DREtu
RCtLSFFEc2FRWURyQW9PM1lLOVM0QUZoK1IxTWZJRVh6MU1QZ1lFYzNDTUpnUlN1UUt0RFQzVmxk
Q2QrZ0pleWpFNzZrT3F1K2h4RHBIWHpwQjIwbXh3RzcxNVAxejc2c3RRVEU5M2tWRlVscUhoUDE4
YjB6cFhpZTlvR0oxZUxYajBrV1Z4bTdjVnFZUVVvZXBWa2JESFd4ekhxeHFPZTcrbTVnRkt0Sm5K
MnkrSlRIckhBV0NKYXFnTk5xYzZyVzVPUjFrdmVmdjd3YndsbGxFU3RTdmZwZDFmTzYrV3NRcHRW
Q3dtVDdZRnB0Rk15NGZCMnpVVENaTUtPeVN2UWkyajFaSE1ScE54a0YxRzZrQmNwZTg5SkJhbWQr
UTFFN3pCTEEvSUFSZVBqYTlJejh3VTU0L05tYUtrYXJsV3lPcGg3Z2h5YTZoL2ZCcVp6TmpJaWhM
R3hMTHdrZ3NLRnk0R0F5MkEvRk1YeVJvd2QzU0RnT2gyNDFJbytscmZFWVJFYTRTbnExTmptaHRm
U2luUEIvVkJBcGd1TlUrSmpFbnRpbUcydWQvTmZacjlQcnR6b08vbkIyOVJ1TWc5SGJsMEtFVmlK
d1ZRRzJnMVZVWTVIZzArRzdPSjllM3FnM0h0T3JYODdmVHE4VnpESVh1WkFJaGN1a2NHSmxub2gx
SzROZFhYK1p2ajMvTkwxVXJXMnZJeVAxVWlMeHEyWHpGY0xrV1ZTV1JwUS9QZFhiblpKQSs2WC8v
SzZaZlYydHQ3dG12bFUvN3g3cS90TnN1MTNQbTVsWWV2dUN4ZnJyV3YyMlVvV3p4Y0pYM3pOU1g3
S2NiZjZqUHM4MnRUUDhiak83cTJHbDlmMXd2NUZYcnl4dlg1cUp0STVYS2VPdDVXWnBKZjdOUzU1
a2laU2VyRnhFWEFRYVFxUXkvYnFYcitGa0FaTkIrckw3a1lzdTJ2d1JmR3AvYnorMVRSZWdHeldk
MkVUUEdpN0xaWDZJK3UzNzBOTkVwQzJ0dmlkSXJZeUxHVkxoNUVXd0hlUWx1eGN0eGRSdlUvTVVF
MlFpcDh4a09kTjRZRkZQRWxLSGNDRlIyR3dQZHloVkJ3QVFRdElKZ1VFaHBHbVV5S1dxUXNJNFg5
MkxrS3RaUDIyMVdXenIyYmJlamhTU1JDRWpWekdSQ0N0Z0JSZExXeXlmbzJuWW9LZ1hET2lES3Vy
SndTSWxPZERYSHNrNUhXSWtZNndJZEVHWkUvV0cySXhBdlNFMjYxcWFSRXlxc2lEcjdkT0JtaEdj
NjI2QUZyd0dVWmFSV0JEbGNwOGtVVlgwZEc3TUNuRTVXOVlqSWNDaFdmZEVvaHdGZ3VlSjhIV0Zm
TWdBVVZ6VjI2ZkZidVRnU1NLR2xQNVVUUTdPOGtoOGplTnhna2lTWExYSEdPN3JUYjJhcTJYMWFy
YjZPbFllV1ZySUxxdXkwcERVODZreGlFQnppT2hpZGp0Mi9MeU1oRkNyc3V6SHQ2YW0xOGhCUXpn
eU1zVXFFUU5tRTJsNE1sS0oyNjBWYlR6SkxBK1E4U2pyOHRyMlhhditwcDRjOGxidWJVRmZYWDlY
MFpTUHBPOXhNeGdSSXdCdnBFR2RWd3FJcnRXL2tkYkUyamZTOEp2enMwM2xlZEM3bDlLNlAxdFEv
Wk1GTTcrR0dOcEN4TTNDWkd2cms0U2s4SUlwT2FLTkJ5YnVKQXk5UjRBa1RwMGl0Yk9ReVFoOWZ4
TVBXTlJIR0FXUFRDbVUrK0toMW9TclNDNHdsWm5oTHo2ZS82SlMrVlBlZnpxN3ZEbi9NTDA4bGY5
KzgvbmRieXJhVmYrOC8venoxYzFIbFNOTUw2ZFhaemZubnk5VlBINTY5ZjdDMURZUEJNQTY0NUpw
Rno3SUJoY2I0YUpPd3FSTGpyeWNrRGpSTzE0d2MrRTdYckJBd0tjR2tGU1JXOS9OUXdCSUVyem1C
WjAraXlSNnpZc0JlMmlOa0lGSCtoNGFoeW5GWXlVRWJHanNsQisxekgxNmFheVJ0YTdNZE5pN3Nv
d3JWemJzVnZydkZiZjhnUzc0YnE1TWx1WnBGSmZhYzVodlBRNFJYdlZkZGtEaDl3Tnh3UkV4QXVO
aVlaM09vY0phcnRPbGd3TXMwc09oTytLTUNkQWovUnNYS1VvcEUwS00wRGFDNys5aVBSNE5GRU9P
QURhVW80Zk5NVjJzQjVCRFlzaXNiTXYxc0RsWTZIRHNBYnhlaDFwSkk4dmpLR2RtaFRITzlPekQ2
ZGtiNVRkVDZDeWQxNHpQaWxLU0pLYVVKenZKNUpPQjhydnBkREJzOHNRcG9CaktGWkNBcXZSd08y
Ymc1QUhra0JoaEhFRGtIaExCWnVxWktZTWtQRzBHb25EQ2JqemNmdEFTUWJyMTdubEorOURBbW5T
WG55OWZYVTNQM3Q2Yy96S0ZFMHVLU1k1UVVySHpubkJUUzBKMmNxeUo5VHhBTUI5cGY3Uk5vTzhL
VHl4RzZRMTJFcXBPY21SRWdwNVlSQnRTSGw2UmU3ajlzTlhoZWNrQ0x0WWtQRmIyNDdJWDgrTUk3
WG5zQm5ZU3FnbVBmWk00Q1JKREdRSk9Tb3dLYU0xODcxeUZTTEc4S2FJcVJyb29jdXU3Wm9kMFE1
TStPSE8wYVJIYVFLVmUxWG1NeGtNalZCc0lFQUdiZERIeW1iQmFZY2E1bU9IRXFQOHU5eFNEakFZ
VWZMZGtUSlltVmRtK2lCQWR5dVFIZk8yUnlKSjJ2M1BTWTBVRkIySkRvMW93VEtxSWFyM1NhSFE5
TjMyazBseGJ0QUg0SGJuR0ZQQ1JhUU11MWhodGMvamVtUXVLQllmMTRtamZhaGxtRlk0MTByajJS
TERlWEFJV2ErRjZkUEREd25EdzR5anFQb0ZiL1lRcHdtY1BOTmc5YVpGNUJ1MkdESDJwRnJ0SFNh
R3gyMzQ0OWtQOVViUjlNc2ZkaEtuQ1p4OGsxRDNKd0FpUEM0U09Pd25UUldEMFJqRHYzbjlDNmxh
NTBRYnVKMHdkOU9CTGV4QmJIK01DRGhqalFFWFErdm5lb1E4UnNYa2pUbFdNRlZMa2RvSG1oelZF
OHo0NEZyV1pVUnJCeFg0Ritxekh4eVZVS3hnVUJUNk9xcTdQcnlkZGVKTXJrVWxNWE5UbGN1OHVl
SmRmRVU4bHhiS1M4RW1SaUtpOVBjclc3ZS9RMjhRMjlXTXQ5NXd0L3RZRnMvbXUrVXY5dnAxdjZu
clZyTDZhWFdvelU3WGJuOUYrYWRCbUlZeThDRUJlWXVUejllcSsyU3oxSnJsYkJlYnU2WEhSekFV
VlJFeHRocXUzTzhGQlBYNDEyKythMVYzYmFBQjhHUUMrd3VCbmFsLzA1K3ZyOHpjWDAvN3JveEFr
MkdLaU4rcDlQUC9sRmRPUWQ4M3QrcTZwOVhhK0RhakY4VE5rbTBJVlFJSEZGZ2NOQkVqekZLRlJt
Qjk1Q3RCL3JWZVJlaForZDlmSTg0bjZYZ3NDTTR0RFFETU11dGMvTU5YZVJ2NThhamJhbHU0MWk3
dHVXMlN6allZRnkxZ0lTSTVCRG8zRFE4Wko1RGhKVldWNjhtOXF3YlVHZTFhM3Z2bmV6WEc5NmZS
Sjd3dTdWUzNtNjgybVhwaDlxMTRPU1FpSEZIUDQxdWdqWGhpaG5qeUM0cUwrcjhiWXJocXozWHFq
MWd0cEV0cUVtOVY4OFhUWHN2YkNUMFBnWnhpKzJhYmJ6cGRUTUlmVkJOUHJXblBmN2tEYk5mMlJY
bWNaRnZOUDg3amZvNE1zaEVTT1NhenFlUzFnYlA1Mjl6N0RWZURxOHF6LzlPZlRiTkhzWnNDNzNI
dzZpd2JRaG5nOFZtQzBRMUlKOFUrc2RHYVhlc21uVFZRc2ZmVUdxcS9UdXQ1ZDA2Mk9wMmRhODE2
a0ljNklWUmpwZkwyOGJWWVFWck5jUHEzVzBMYjBVcWxjbDcwKzdNeE8wZGFyZXBHSCtDQWVZK1Ri
aC9YVFFxM2FxN1d6SkQxdGE3Ty9mcjFTeGY3MXZUTlVFQXI1YVBBUXI4UVpwbUdGV25naHU5K3Ns
ODY4R2pBcG9CZ3YrQkJ2MWI0QmhFc1lVTHcrZnJCZTZUaXlqNndNUFJqVzZEcmR2blBGNGR1RHZq
eGs5N0RlMWdOVVFod2l0eHppc004ejdPelljNmVPYzJqRGV4UTJCU2pmRGxsU2lEdmtsanVzaFR1
c055OXRjM0dYR2VCWTNwR081UXhNZmpsZHZQQkQzQ0VmZG9lTzR3QzJwdVA5WWRmQlF4d2R6MGU3
RGg3aW9yamxvcjVjVE0rdVZWSncrZmxHSC8yL2VkRHJjQU52OTJoTEhtYnF0OXRhVDUrN1pqdGZy
TGZJVkwwY1F0d2Z0OXpmMytzbmR3SGIxQ0pJdkZNd3YzVlQyMHlwdTlZSVJXaWdkTHZVSm5nN3RB
YUVPRU51T2NQSHpYclhIanUyN1d5N016bmxZdllOT294enRhSUowaHVpZXA5ZUtON2JwL25EQUpz
UUI1bkVKQnRoSkNBMk0wdHJUWE5UaTlobS9kRGNObm9CdEZYcVk1Q0UrTWJFOG8zTDJYL0FRNGVW
MHNiOTB3YXNkTDJWUDIwY0gyTTROdFIxT0E3MEVNK1ljRGMzV1QvdFhHbkw0L1AzelZ4TmcwMnoy
Mm1saUltd05lYzFDUjZQOVdZN1NDSEVJeWFXUjlTZVRjeFZOWW1iblVHeW16VXJuVHpwcUVvdlJH
dXBvMi9ORm1CZlNyTE81T29tbEpkU2lJdE1MQmVwZkVrWE9PbERsMDlDVjV2bS8rQ0Nhc0xFSFho
TXRwQUg0bXoxaUZoQUJEa0xJQWd2bHhCL21WaitjZzNtZ09zUXRLOFFMa1F2UGZmQzhNQ0JZTWhS
MTM5ODJvZ0FwaDdTU0loYlRjYTcxU1RFclNhRkx5TVRkdGdLaTNqV0JzUUE4eC9qWEdHYVlXYnRv
bGxKQXhoS0daSVE5NXBZN3ZVdjRTYnZ3Qm5oUmlGNTdLN1pVV2dYSWpQWHpHYXFrb29FLzY1bkd6
MVhGM2REQ2cveHNVazFwSEJ6Zmt3KytWYWJadHhkOStCWDg2SzZMMUF2cXF1SXlUMHBxWG54RDBv
Q05pNzR4elh2LzFNbXVwWnZKWXAybHdENHFvNkp4VlZVWlZXVnErMzNxT0JBZEdxWU5PL1JnUUt6
clFKaFUyZmFBRDZ6MDBJVGk2MnZqamhkVGdmc3JFREN0WVNHZDZ6b1d0YTdhbzBRbFFPY2ptVUVi
VlhZQzhQWnFvQmtieGtLWVFld1piQjlXQWFCVUJPR1FuTnkzb2RycnFnY1NOaW5pbVBzVGRnTHl0
bWJnQlJBSzhZdmR0aFBzRHBvNlNNcWhGWm9vdmFPQU0wZkZnUForM1IxakUwSyt5RFpteTJRUm1o
TitTVVB1Z2xXQ0MxNHlNUFJ4NTV6bENMM0tiTXFqdmNkcEh6VGYzaDMvdjc5UzVOS3luLytlSEg5
ODVjdkY5TlAwOHViTTNWZThtZjlRT0R6NWNWdmY3dzA5Y0V4U3J4WHdXZ0Z2MjAybGdMTGdVbWdm
a0pONWJtZ25BMFV5RmpnR1Q1b0xMQWNHUXZvSjloYWlNRTdhM0hCZ3VsTEV6WHYrbzA2NEE0RHFB
NlBtbzZ4ODhDUEJtK2JnUFhnM2c4QUhweDJoWW9wY3J2QW5HQkZtdkt3UDNoVGlFT1BDQzZzWWxL
VkhXcVBIZm5ZaE9vRzJ4ZEFTYTVENUJGWGF5Vnl6N2kyWGNxeEN5cmNIaEcyaUlKYzRqVi91QUdX
aEFTMEhTb3dibGVBd20zTzJ1TlVlZDVGanVhckFpTks1RjBpbVlJTHZoK0tEWTVwZ1FEQk5xejFT
bVBSOVlqNG0wd1hYUEVlekFDbENpcEJjYkU3YVl3L1d0SkhMaEZNeHl6Q29sWmxCallNYkEyK1dC
dVdRNjRRUEpDb2o5T3hJcjFCVEM2VFFWT3o3ZGxENlhEcHc5R0hNTU5MYTdwN3d1QU5hdTFKMkpT
VlVWSzBOd2RiUjJIVkN4NTFtNFFkei9pRTZJOFlZMUtENE5EaThUV3JiTlFHaFczVWw0N0FjaWhi
U0FVbzFNZndXTUh2SUNhWHlSZ3JnY0wzTUFtMVdOKzBHU2JpYXpXVUlWSlc1Q0g0dzVZTmZHK1VP
aFFyL3pLQXZLNDdjK2JmbDgvWDU5MXhKVGVEQUFjdm54MTJRNW1BSTVuSHNWTUlTczA0R3hTZWNm
QlgyeWhVYjNqR01VcU5WamRCMnFXSFh0cGpFQk9PYWtYcnlpOTdEOEVmdUhUUVZqUXU2SVpNZkZa
M2xLUk9XNWNGeXJJdThPc1lWWHJNeU9vbVNDYytnNmVoN2syMGgvSTJwQXlQa282U0FXbGxLRFNX
RnB6MHpaK0Y2bktrbGlLM0N3eExxQ2NQK1lCN2wyeFpFNnJCeFg1TmVxekl3eVZZTVFnU0JkMzdp
QXljbzdXOTB1WDB3eGsrUkl1dkZ1ekhrRGVBRUxtcStSVUh5NVVKbHJsYW1IUXlCVXBDOGtGNVIz
SUJ4KzBLVUU2VkpNcjgyc3pMZkZWZ0VxN3VuTzd4d29KRDBjRlJMUmdnVzRXMSt0UVUxc01KYkN2
UTJQcnFpTlBsZEVpNkNwVWFVK0F0VFpOaFV1VmtmQUNuWXhsaENaT3lCQnNHTmdnYUpHNEZ1VUx3
VUtRK1VzY0tvUWRCdVZRR2pjMHhhUitwd3hVQXh4OUNQWHh0VThxcnFCUXV0Q3pzWkpVL0kxbUZF
aVJDb3NySjhJRDZVRHB4YkxVcUM3VkJZUXVsSWVOV1VLeVFDbFNtajJKd3lEa0dsRXRsaklWQTZm
dW9CTnVyYjlvTVUvRzE4aTk2dENINUtQNndkWU8reFNsTDFaODVzT2VnR3hxUVNWSGxpYjhySi80
R3drQkowVEZNRklKU3M4MEdoV2NiL05XMkJ0VWJubTJNMUIvcUoxU3Y5T0NZQ2ozYnFGYTB0dnpT
OTFIOGdRc0hiVWhrREY0NU1UaWc0ak84bzZSNDJzQXNVSmFCZ1YvSDZOSm5TS2lmVUszNHJKNEdP
NUIyVjNZYVVqbDVIRlNIUjAxSFNZcTBPaFFhU3c4WTVKTEtTbnZ3cGh3cHBzanRBc01TYWNyRC92
QjAxUkUyb1J0YzdGZWx6NDU4YklKMWcwQlI0UGRkK2pUR0krM0x0MVNCdnNsS3AxcWhWL0NPeWZQ
YXkyU0ZTR0w1RUtCTHFNQlhkY2x1WGlpMTkzZll3b0tEakNmR28xb3d3QzM4c0ZaL0l6Q3NSeVNt
ZEI1dEMvaHdDdHdWYmt5Qkg1MTlXT1hvSnVad08zaFdFb1F2bHgzVWtHTUhxR1dvZlRoMlNlUGFG
d1A3TXhOVURxNE1wbFh4QThONWVOUGtHQUg0eEk3NkNWV0h6eXBvc1B1U0xMQ0x6bzB2VkRHNEg1
ZldWWERRTndLUzh5Y2V4cEQzU1I1MkU2b1FuNVdRVVBkbEZLTWNNbjA3YkxoR2dnTStnbjkzeFNr
VUFDcUhPb0g5aENxRkhoeGZzRXBvWld4RWd1SWcrbmJWSTZqak9mRVJGZHo1WTFSOWR5bFNUSkhi
QmVZK1VxUXBEL3ZEWTFlYkhxVWJYT3hYcGMrT2ZHd09RKzB6ZWdxOGZWSW5UVElsdE9lZjFFbFRM
djhNbVB6N2R2dU9acVZweURnWkh1Y0xQaTkvVDE0alpHNGNHamlvbEdZaHNQTHg5UE9RY1FvOHpz
WHNkcjJCbDlMVWY4bkQwTU0zUWRtWEpwamplKzAxVXZvK3JoVitVdTBRS1VLSWxKaUlkZnJzNjBa
ZXBHRk9HSm9EYU9wQ3FPVjZ0WHR3N3V5WmZhMzNYTGlVbGlHb3EvRnFyZ0xHeVdJOHp2bnpEdW50
bFpHK2VFdDFpMmRSYnl3K2Fsa2NRbzFoYXFQdWxQRGVHYmNFeGNoNnZkaFpwcGJMQTdCejIyaTNX
eU8xM1dhMjJ0NXJvelZIZktVbHI4eUI0WjZ3dWdkZ1dMZGVIanlFUjRKNUhHUTcrRVkwY015OG8v
Ry8rdEtDL20rK0QzQkpRcmhZamdmYzY3WHZVcENmcU51a0NJdjdBMTRmTWwvZjFYdE1MQTJoWS9r
M2xyTXkwNGQyaUhQbGtOcTd5N04vdU54VTBaZTNWM3ZJZVJsbElZd3MxMmdFK0tKTVk2YTVnVHYx
NXV1bE1KZzc5NXFjL3Y0Y2dycjJhZWlQRVA4L01ZbmJxd3BsYm1SemRISmxZVzBLWlc1a2IySnFD
ak13SURBZ2IySnFDanc4TDFSNWNHVXZXRTlpYW1WamRDOURiMnh2Y2xOd1lXTmxXeTlKUTBOQ1lY
TmxaQ0F6T0NBd0lGSmRMMU4xWW5SNWNHVXZTVzFoWjJVdlRtRnRaUzlKYlRFdlFtbDBjMUJsY2tO
dmJYQnZibVZ1ZENBNEwxZHBaSFJvSURJNE15OU1aVzVuZEdnZ016UXhPQzlJWldsbmFIUWdNVEV6
TDBacGJIUmxjaTlHYkdGMFpVUmxZMjlrWlQ0K2MzUnlaV0Z0Q25pYzdaMi9ydXU0RWNiZko5VW1n
SkhITU5MdFE5eGkyMjFUcExoSWxTcDVnVlJCbWdCYnUwaVhLbFg2dkloWHVJTXo0SjEvbktGSVNm
YjVQaENHajQ5RVVUSi9tdUZ3S0QrZkVBUkJFQVJCRUFSQkVBUkJFQVJCRUFSQkVBUkJFQVJCRUFS
QkVBUkJFQVJCRUFSQkVBUkJFQVJCUitoLy8vL1BQLy85VnlwLy9QdFBiZUhQdDdKdGRuWkxJZWh5
MnJnZ2dqWmU3bi82NGZiemIvSmwyMzRyeEJyNGdqNjV4aUNLQzFteHM4OE1nbzdUWmtxMmJ2L2xi
Ny96ak02QWtlTENXTUZtUVc4dlFvbTdQYjNScng1VzVOMTFCMURzUTJLY0JiMnJZcFRNUHdWRVFB
T0NTQUlsWFV5czRMTkJrTkJHQkkrVlBIekU1N0JIRUdScVF5T3dTcnJBSkVHUUtUWk1RQW1DZG1w
ejJMUTdCNVFnYUVBYlRVbVVOaE9HR1ZnSUNoVFR0QkhFcnpCTXBoNy8vV1VyWC8veGh4Ly8vSHNx
Mi9Yazk5dm4yMy9QYmlOMGtDZ0VFYURFYjJDWXRJaWpaSElJeU1yb3BTOFJqWnU2aG1sN2hXRVMy
cjUzc2tUVkFxeUV0cXVoTDlIWmpScVJGNFVRS0cwbTdPeVdYazU1cStRVk1NWFNRRzEzcXJNYlZk
Wm1jVXhQanptaXNvZ21zbmVVdk1kL3ZvcjIwd1NtV3IwQlVQRjhFek0xZDlCRWFZR1V6blQvUHFX
V1czTDlvRWRNRTRjZzJqQUZtSXIxQmtDWmdRaTJTbk5wR2xnOFJRR1FDNUtsdi9yTXlDZ2ViWUdw
VndlcUd5U2ZRaFBabzUxTzBhWGlpaDVOeVJHMHQvdHJkWjRWZW1tZ3RuNnVBeEh0dUdsL2VGeXMr
TmhacmhNU01hMU1LUjdsbVNxdkVuWWR1V1FPVWQzbCtSSDhGMlhNZExLdjI5WVRWMlVDVldyL2lU
S0hUaTFRZTJneXJkSzl0eXhSajZjMFU2ZTdmNlo5R1lqdWVuYks3RG5WKy9aQS9Mazd5c3VUMVox
SElFenkxK1Q2MWlwdzl2YmJwdjBvQldTZGJxZk1yakpXVlo3TnBVQ1Y1dEc2VE1WUXhGaDE5NzNz
dEZSc25vWTdiYnQ0S2srUWVPM2FyQlBIVTdQTUUwdjNaQk9XZFVEbCszL21mS3Z6Q09KRU1vMjVv
SjJLemRNd1RWUnR3SkVZc29rMmRGbHJ5MW1Pbi9tTjczSHZreFV1QW1xQXB1Q1VCMnFyV3FndTBh
ZEk5L1A3dnN3aVBXSWFRRWtYcjU1YnhmR2JHM1hYZCtEOVgrNkpRSG1CRVc1QU1JT21HMmxlbkxh
cU50M1JIRWFaUUhGcWNWdXVFNk9JemRPQU42WFh5QWR2dWtXVDdnMnZrczJiKzVRLzNiWDJmN01a
U0ZjQVpicG4zdW5vRTljVmltMENKOU9MYjd4aTJGdy9JSUxMR0UyNnE1Y0l5dkJsd3BWczdiYlpk
c3IxNjJSb3VyL25WYXQ3MFFxZ1NqY0g4OXpqQ2dldXpNc0IxYWJ0aWI0NjBPdW90cHZsbU0wdCto
QzNpdGUzYlQvRjY4dDBxaW5WSGdEVVFGeGQ3eUtRRVVBTnNQQnlRSEhjWUwrenh3bnFHcVZGV09u
NmswMjlmOHNNckY4dHFYY0NTdnQ3R1lNUzEybEdMRXQyNnJXQWFsTWpSSit2OWplUlplRlpQYStJ
NVlyaXozeEoycDBTZllIZXllVWJzeVlhbWZhL1hzdzh2MVQ1dFlBU1llMjJlNWM4b2paQnZXU014
T29xRXlYeGVXQ2hidW5nT1VVZzk0Y21GZ0YxU2xCQ0E5VXUyemVMR2U1clQ3OGI5TzZTOVZwQXRZ
bmxMUWpWbnRhR05icEFlUkNKVjVPdnJzRkt0cHhPZklyWGx3bDJyYWh6T2xCeHo4K1hzWW1rZk9y
UmxZSHlRQ2laSnowSzg1Z3k2UkNMRmx1VTlDZGRza3BBVFluMWFXdXk4eHMvWldKM2VENDMwOVI4
SWxObUh1cXlRSG54N1pKNUVqUjVLSm1tUnhmeHVXZXdnaEZXQ2FqYm1nQ0MyVEh5TXNjZGVyTzVR
T2tLSndMRkRjaWtJWFZqajFjR3FtMG45OGxTRGZkRWVGeFRFR1BWTFMxaW91U0RFblRXVTRMbnVs
ZGt2dlIyL2NLaldjYmI3V1BtUVJlTm9RWktKbGMydjFUNWhZQnFqUXUvbHN4VDhKQXhiOFMwc3dU
V3FnUVVXNmdwS1JPbEJJTjRyL3c5WDI4V0gyNVJsRytQTWplUUZ3S3F6YlZqcHZKM2JFNVl5bHVv
NlVVRFc3VlE2MmFqTWt6dFNhV3VIcTRiT1J5Ymg5cXZHSmtYQXVxTCt2bk9mTzhpWjYvTDBVN1hi
c0JhSmRzL0Y2aW5iMjUyK2ovQk5HZ3B1cGhaWXpMY2RhZFBFN3dvVVB2TlUyQ2JXazhzNXVJdi8v
cXRmdFVmZHVIS1J5VGF3V09ld2E0OExycTVBWUdkQ2pwUE10ODcyRGlUeTVmTVBvcFp6aXdOZm5X
Z1JFU2kycldtK0hoTWlvbVA0TWpEcXJWVHlSdUNtTTRldllSU3NmK21uNTlBZjNianlWNXY5R3lp
Q0FzRWg5QTFlNGJNbXlGcTJ4Q3ZyZ29tY0hVTHUvRjh2UWJrOUxVYkdxalNlcUxBTm1VQ0VhWlZN
aTBVbHdBclBrbzFJakVYcU9mVTJaenVQVG1UaERDQWFqZFpLRmdQMWZVaFJUMWVVQ0xPc0RWUDhJ
SkE1ZU5kWDhLZlhldWFKODh3dGV3SXIwK2daR0tWdnlGOCtYN3dPSG9KYmVVbk1hdE02VDVUV2wy
ZWQrZUcyOS9OakUyMmMrQTByd1pVL2thZEhEMlpXQVVvZWViSmZHTWFxZndOWWV6RVM2bytTS0h0
VHNHK3V0c2tPeTBaaFNSUVkrM2ZreURSUmVPTmdZcm5ucExtU1Z1bHVIampyTFlrL1QxdG1uZGN4
VWdEM1ltSEJvRTdwOTJxcEd0WFhlNlVaeXFPdW5TZlJaYXBwK3ZmWGcybzB0SzhtMk9lNHFHVGlW
SUpxeUQ2VngwQUR0eEp4aFNNT0xnWG1hTjFJaVg1OEFRUHEzWmpYV0Z5OVVRd2hDazlsOCs3RHNu
R2VEVlVGMWd0a2dDcUZIRDJ6Rk5nbTdTek4xQUNPNVVQK09zbkJPNjRpalU5aWc5TjNYT0lkVFh2
ci85UmYzcXR0L3R3RzZaTEFKWGNpLzI5cW5tS0kzZzd5YXJPUng5cG9hQlBvaGFvZktjYWkrK05q
WnZ5THQvQWZEU0FncWFybW40VDU1WWZZNXRNckFaT2VXRHdDRUd4ZURTUjdGVGVqNFFLbWdSV1Uw
WlBBVk41OHlTZTd3U2dvTGthQU1velQza0xOUmVvNm1LVDFzS1dvakVRMUJVUEtLcEFMUm85YmZX
TE4xM3psRC9aTmoxK0lMd0pRVjF4WEtLMGJIekFRbzBacVM1VzFRZGZpQWJmaWduMkVOVFZHRkFE
RmlybUlsL29PZi9WcC8yTDFWdnJRbng3Rm9hM05jeHQxWHVMcHA0dk1pZDFyeXg3SDdOUUdhOXY5
V255ajhzTHBxWkhKTHgwaVB5MFBtVUN6RzNWUzZ2TEM2VklyYjRMOFYyUjc0M21UWktHUmFlUG9a
WU9aT2dobk5yWld6R0F1dm5MM3g3Zi8yNkxWOFBWRWdCT0YyWHhCZGZrbUt3SjVwb1NwWjdmdnV0
WlFDMks4czIvQ3Qra3pSTmJxT2tEcUJnV0VtRjF6V1duRjFRWHFNT2FRVjlaTnhueW5uNk11VGNQ
bFVFcEdlV2Izc04xTEdLZHYvZk1BZlg4NkNSZ0txT3JBVVcrWDVBWXZIVzVVcWFFWjZGbVRVWE52
UTQ4MTZ5Wld1Rm41akVaOXZ3SFBKeURNMUdydThRYmQ1OVpNYjFKTzMxSSt1M08wdUx4dVZHK2Rl
T3AxdGtUNW1sNmZJOVVzanRtL0lIdWZ1TEQ0WlVMNXVJTDNzczhGdmZlZHNTWFBGeitLWjNlOW5U
bkY2ZWd0OUViZUEzTE44bGNqejhXUDh3RGxjdysycDk2VkQwRnM2bmNCczNVb295akVsRDA5WW52
eSt6a1BPd3luOFlRUDhXbGRVN2F2Zmk5UGdWZTNpdWVoVUpreFE5ak1YY3hyd25iNkxadCtoRHNI
bnR6RUI1UTdkSE5Kb2xkK05EbXRUS3ZzQ2VhNGtsdUdUdDcrMTIrS2VNcGl1eDV6dDY2K2R6cXlF
ajNUeE9vcC8vc08rb0crcit4Uy9uMTQzZHFUS0NDWG1RZWpta3lkekVIaklGWk1TdVBvM3ptQnQ2
VmVWcHVaTDQ5MDhVWmdJdENFMVBzMU5iSWx2Rmp6Tk96RGhUSFlGa2VVSjdNSVVZbTZPRUZHK043
c25tNG9PdDZlOUVuUWZQRWxsV2dNazFxLzJzYTYyT2twM1dxUVlra1ZudU1DTG1tWGp2WHBSc05B
SFZUUC9sWGpmN3BYVXhuVXV0bXJTM3Rub0s0Q1NTREJ1Sk04N0c3QWFBRzRoakpLN1pJd1VKNHpS
U1BvZkpHYWtxSDU0QjVpOVZTOC9SY0R4U1BudG9WOUhvWGJmaVNSMzlhWHFpUXVKa251NkxlckJ1
eUlBMEFOVUJIN0xVZUlKMDFFWmduN2ZWNVdNMmRpaklub1pabXc2NXorWUlubk9pREpwc1JCQ1h5
ZXlWenBVeXZqeHNmUEdGakdLaHVrM1E5b2ozVkduYks3SzVkc2dLZ1ZuUjEwY2pWaXpWS1FKbWVp
UW1VQ0VEeDdvK1Boem1mQzFSK0xsdlhMSUxWT3ZnMkFOU2VmRWd4MFhCd29qS0Zwc2RDRS96aElw
VGFSaDdnN0pGV2hNMjdEb3pwOG1WNjFCU1hiOWhDNlEzTU1QVXhMcCt1TXdpd0x4VXRwdEJNeFVh
S1VGcVJhMlNLWm5nUE9GWWVLQzhRcCtuSXhPdEtjNTF4QXc0YlF5VmJkUXBRUVh1T0VXSFZCcXRO
VTdWQnRHMURIQjI4c3UrWXcrVXZmakIvcElHS2U3anBkTVZ4NDlheDBhZFFBbW9zeWxldGYzV1VM
OURwQzJyMFNzQlRDRHBGR2FEaWdGTFZRbm0zMEllZjJNQnp2bFBHVU0raGVhaDgvUmxmMGZTY1Mv
TlFnVTRINmpPcjIvbTcyU3lsTWRRanpPMTVOajhsUUpFci9yUE4xdE9uVUFYcUdVNEhtOGgvOVJj
bVYyTXN3NWtTYlowNmg3RGQ4dURReFBFcUpmUWVLZTZ1b25DZVQ2YTdldjRialk3YjRON3RJeVd2
Uy9HUEgwdDQybENoNlN1T0FkVWF4RWVUYmVqeHpqZVc5cVM4dXczM2Y5NHNFN1V3dy9KZWsvalFY
MVcyNVBFRHFJUEZlWHFydzRNRE1xZUtiaC9QdzgvYzZJSjVLRjJuTjdHYmIrMHNvTHFOMUhwVXNy
dkZsdmt3b0Q1RTE5eUw5Z1NYNHRWRnc3RTJoL3lhZG1xZEhzV2xSbkZWaTV5WmFpUHoydytmZUts
SnM2N3d4VVZ1bmdnYmZrS21rdXAyaVc0a0FYcFh0U2pwcFNKZ3lwUVlkclgvaXNPTTBIc3JScW1k
VFFaVFFtSlFJTjZEcGs4bEhpNlpDeGpOWllQYjUyZTMrb3A2ZlA5RGFhZWtmVUluaWgwOHZmZ2lL
UEQ2SUtnVnBWSzBLT25rd0lDbXM1c1BRVmNSSlFHeTU1YXhSekJNMEh1cmxLM0h4bWlNSTlxWWtt
eFhueGNFbmFMV3loQXB1ckRuSmlhajc4M0R4c1dyZ0loUmdsV0NQb1BJN3BpNU41bWlhV3IvZGNC
Nld3aTZwb2dzYll3Q2pyeC84ZnFwczg4SmdpNGhFWE9JYlJQRjlNaEZCRVFRMUZYN1c0UlVQdFVL
UkFpQ0lBaUNJQWlDSUFpQ0lBaUNJQWlDb1BmV3IyNlgzWGdLWlc1a2MzUnlaV0Z0Q21WdVpHOWlh
Z296T0NBd0lHOWlhZ284UEM5TVpXNW5kR2dnTWpVNU5pOU9JRE12Um1sc2RHVnlMMFpzWVhSbFJH
VmpiMlJsUGo1emRISmxZVzBLZUp5ZGxuZFVVOWtXaDgrOU43MVFraENLbE5CcmFGSUNTQTI5U0pF
dUtqRUpFRXJBa0FBaU5rUlVjRVJSa2FZSU1pamdnS05Ea2JFaWlvVUJVYkhyQkJsRTFIRndGQnVX
U1dTdEdkKzhlZS9ObTk4ZjkzNXJuNzNQM1dmdmZkYTZBSkQ4Z3dYQ1RGZ0pnQXloV0JUaDU4V0lq
WXRuWUFjQkRQQUFBMndBNEhDenMwSVcrRVlDbVFKODJJeHNtUlA0RjcyNkRpRDUreXJUUDR6QkFQ
K2ZsTGxaSWpFQVVKaU01L0w0MlZ3WkY4azRQVmVjSmJkUHlaaTJORTNPTUVyT0lsbUNNbGFUYy9J
c1czejJtV1VQT2ZNeWhEd1p5M1BPNG1YdzVOd240NDA1RXI2TWtXQVpGK2NJK0xreXZpWmpnM1JK
aGtER2IrU3hHWHhPTmdBb2t0d3U1bk5UWkd3dFk1SW9Nb0l0NDNrQTRFakpYL0RTTDFqTXp4UExE
OFhPekZvdUVpU25pQmttWEZPR2paTVRpK0hQejAzbmk4WE1NQTQzalNQaU1kaVpHVmtjNFhJQVpz
LzhXUlI1YlJteUlqdllPRGs0TUcwdGJiNG8xSDlkL0p1UzkzYVdYb1IvN2hsRUgvakQ5bGQrbVEw
QXNLWmx0ZG42aDIxcEZRQmQ2d0ZRdS8ySHpXQXZBSXF5dm5VT2ZYRWV1bnhlVXNUaUxHY3JxOXpj
WEVzQm4yc3BMK2p2K3A4T2YwTmZmTTlTdnQzdjVXRjQ4NU00a25ReFExNDNibVo2cGtURXlNN2lj
UGtNNXArSCtCOEgvblVlRmhIOEpMNklMNVJGUk11bVRDQk1sclZieUJPSUJabENoa0Q0bjVyNEQ4
UCtwTm01bG9uYStCSFFsbGdDcFNFYVFINGVBQ2dxRVNBSmUyUXIwTzk5QzhaSEEvbk5pOUdabUoz
N3o0TCtmVmU0VFA3SUZpUi9qbU5IUkRLNEVsSE83SnI4V2dJMElBQkZRQVBxUUJ2b0F4UEFCTGJB
RWJnQUQrQURBa0VvaUFSeFlESGdnaFNRQVVRZ0Z4U0F0YUFZbElLdFlDZW9CbldnRVRTRE5uQVlk
SUZqNERRNEJ5NkJ5MkFFM0FGU01BNmVnQ253Q3N4QUVJU0Z5QkFWVW9kMElFUElITEtGV0pBYjVB
TUZReEZRSEpRSUpVTkNTQUlWUU91Z1VxZ2Nxb2Jxb1dib1crZ29kQnE2QUExRHQ2QlJhQkw2Rlhv
SEl6QUpwc0Zhc0JGc0JiTmdUemdJam9RWHdjbndNamdmTG9LM3dKVndBM3dRN29SUHc1ZmdFVmdL
UDRHbkVZQVFFVHFpaXpBUkZzSkdRcEY0SkFrUklhdVFFcVFDYVVEYWtCNmtIN21LU0pHbnlGc1VC
a1ZGTVZCTWxBdktIeFdGNHFLV29WYWhOcU9xVVFkUW5hZysxRlhVS0dvSzlSRk5SbXVpemRITzZB
QjBMRG9abllzdVJsZWdtOUFkNkxQb0VmUTQraFVHZzZGampER09HSDlNSENZVnN3S3pHYk1iMDQ0
NWhSbkdqR0dtc1Zpc090WWM2NG9OeFhLd1ltd3h0Z3A3RUhzU2V3VTdqbjJESStKMGNMWTRYMXc4
VG9ncnhGWGdXbkFuY0Zkd0U3Z1p2QkxlRU8rTUQ4WHo4TXZ4WmZoR2ZBOStDRCtPbnlFb0U0d0py
b1JJUWlwaExhR1MwRVk0UzdoTGVFRWtFdldJVHNSd29vQzRobGhKUEVROFR4d2x2aVZSU0dZa05p
bUJKQ0Z0SWUwbm5TTGRJcjBnazhsR1pBOXlQRmxNM2tKdUpwOGgzeWUvVWFBcVdDb0VLUEFVVml2
VUtIUXFYRkY0cG9oWE5GVDBWRnlzbUs5WW9YaEVjVWp4cVJKZXlVaUpyY1JSV3FWVW8zUlU2WWJT
dERKVjJVWTVWRGxEZWJOeWkvSUY1VWNVTE1XSTRrUGhVWW9vK3lobktHTlVoS3BQWlZPNTFIWFVS
dXBaNmpnTlF6T21CZEJTYWFXMGIyaUR0Q2tWaW9xZFNyUktua3FOeW5FVktSMmhHOUVENk9uME12
cGgrblg2TzFVdFZVOVZ2dW9tMVRiVks2cXYxZWFvZWFqeDFVclUydFZHMU42cE05UjkxTlBVdDZs
M3FkL1RRR21ZYVlScjVHcnMwVGlyOFhRT2JZN0xITzZja2ptSDU5eldoRFhOTkNNMFYyanUweHpR
bk5iUzF2TFR5dEtxMGpxajlWU2JydTJobmFxOVEvdUU5cVFPVmNkTlI2Q3pRK2Vrem1PR0NzT1Rr
YzZvWlBReHBuUTFkZjExSmJyMXVvTzZNM3JHZWxGNmhYcnRldmYwQ2Zvcy9TVDlIZnE5K2xNR09n
WWhCZ1VHclFhM0RmR0dMTU1VdzEyRy9ZYXZqWXlOWW93MkdIVVpQVEpXTXc0d3pqZHVOYjVyUWpa
eE4xbG0wbUJ5elJSanlqSk5NOTF0ZXRrTU5yTTNTekdyTVJzeWg4MGR6QVhtdTgySExkQVdUaFpD
aXdhTEcwd1MwNU9adzJ4bGpsclNMWU10Q3kyN0xKOVpHVmpGVzIyejZyZjZhRzF2blc3ZGFIM0ho
bUlUYUZObzAyUHpxNjJaTGRlMnh2YmFYUEpjMzdtcjUzYlBmVzVuYnNlMzIyTjMwNTVxSDJLL3di
N1gvb09EbzRQSW9jMWgwdEhBTWRHeDF2RUdpOFlLWTIxbW5YZENPM2s1clhZNjV2VFcyY0ZaN0h6
WStSY1hwa3VhUzR2TG8zbkc4L2p6R3VlTnVlcTVjbHpyWGFWdURMZEV0NzF1VW5kZGQ0NTdnL3NE
RDMwUG5rZVR4NFNucVdlcTUwSFBaMTdXWGlLdkRxL1hiR2YyU3ZZcGI4VGJ6N3ZFZTlDSDRoUGxV
KzF6MzFmUE45bTMxWGZLejk1dmhkOHBmN1Iva1A4Mi94c0JXZ0hjZ09hQXFVREh3SldCZlVHa29B
VkIxVUVQZ3MyQ1JjRTlJWEJJWU1qMmtMdnpEZWNMNTNlRmd0Q0EwTzJoOThLTXc1YUZmUitPQ1E4
THJ3bC9HR0VUVVJEUnY0QzZZTW1DbGdXdklyMGl5eUx2UkpsRVNhSjZveFdqRTZLYm8xL0hlTWVV
eDBoanJXSlh4bDZLMDRnVHhIWEhZK09qNDV2aXB4ZjZMTnk1Y0R6QlBxRTQ0Zm9pNDBWNWl5NHMx
bGljdnZqNEVzVWxuQ1ZIRXRHSk1Za3RpZTg1b1p3R3p2VFNnS1cxUzZlNGJPNHU3aE9lQjI4SGI1
THZ5aS9uVHlTNUpwVW5QVXAyVGQ2ZVBKbmlubEtSOGxUQUZsUUxucWY2cDlhbHZrNExUZHVmOWlr
OUpyMDlBNWVSbUhGVVNCR21DZnN5dFRQek1vZXp6TE9LczZUTG5KZnRYRFlsQ2hJMVpVUFppN0s3
eFRUWno5U0F4RVN5WGpLYTQ1WlRrL01tTnpyM1NKNXluakJ2WUxuWjhrM0xKL0o5ODc5ZWdWckJY
ZEZib0Z1d3RtQjBwZWZLK2xYUXFxV3JlbGZycnk1YVBiN0diODJCdFlTMWFXdC9LTFF1TEM5OHVT
NW1YVStSVnRHYW9ySDFmdXRiaXhXS1JjVTNOcmhzcU51STJpallPTGhwN3FhcVRSOUxlQ1VYUzYx
TEswcmZiK1p1dnZpVnpWZVZYMzNha3JSbHNNeWhiTTlXekZiaDF1dmIzTGNkS0ZjdXp5OGYyeDZ5
dlhNSFkwZkpqcGM3bCt5OFVHRlhVYmVMc0V1eVMxb1pYTmxkWlZDMXRlcDlkVXIxU0kxWFRYdXRa
dTJtMnRlN2VidXY3UEhZMDFhblZWZGE5MjZ2WU8vTmVyLzZ6Z2FqaG9wOW1IMDUreDQyUmpmMmY4
MzZ1cmxKbzZtMDZjTis0WDdwZ1lnRGZjMk96YzB0bWkxbHJYQ3JwSFh5WU1MQnk5OTRmOVBkeG15
cmI2ZTNseDRDaHlTSEhuK2IrTzMxdzBHSGU0K3dqclI5Wi9oZGJRZTFvNlFUNmx6ZU9kV1YwaVh0
anVzZVBocDR0TGZIcGFmamU4dnY5eC9UUFZaelhPVjQyUW5DaWFJVG4wN21uNXcrbFhYcTZlbmsw
Mk85UzNydm5JazljNjB2dkcvd2JORFo4K2Q4ejUzcDkrdy9lZDcxL0xFTHpoZU9YbVJkN0xya2NL
bHp3SDZnNHdmN0h6b0dIUVk3aHh5SHVpODdYZTRabmpkODRvcjdsZE5YdmErZXV4Wnc3ZExJL0pI
aDYxSFhiOTVJdUNHOXlidjU2RmI2cmVlM2MyN1AzRmx6RjMyMzVKN1N2WXI3bXZjYmZqVDlzVjNx
SUQwKzZqMDY4R0RCZ3p0ajNMRW5QMlgvOUg2ODZDSDVZY1dFemtUekk5dEh4eVo5Snk4L1h2aDQv
RW5XazVtbnhUOHIvMXo3ek9UWmQ3OTQvREl3RlRzMS9sejAvTk92bTErb3Y5ai8wdTVsNzNUWTlQ
MVhHYTltWHBlOFVYOXo0QzNyYmYrN21IY1RNN252c2U4clA1aCs2UGtZOVBIdXA0eFBuMzREOTRU
eit3cGxibVJ6ZEhKbFlXMEtaVzVrYjJKcUNqTTVJREFnYjJKcUNqdzhMMHhsYm1kMGFDQTNOREl6
TDBacGJIUmxjaTlHYkdGMFpVUmxZMjlrWlQ0K2MzUnlaV0Z0Q25pY3hWMWJjOXcyc243M3I1aXE4
M0NTcWhYRis4V1ZGMFdXSGUzYXNpTXJtOXJhN01ONE5MS21kaTdPekNpdW5GOS9BSklBdXh2ZEhB
NHhjblkzRzdHSEFMNnZ1d0YwZ3dBWlRVTDEzN05JL1Y5UnhaUFo2c1h2TDZKYUZrMmlVdit2RmhW
bFVKWlZjMjhTQlpuNmQ1SUVVUmFHWVYzby9Ib1ZUVjV0WHZ6ODRzZTdGK2V2czBrNnVYdG9LMUtW
UjBrNlNkTWdqdkxKM1dyeTcrOG0zMC8rTTduN3U3cFQvUmJqVy9NcVNKSTRETldmWVJEblRvbGlF
a1dvUkZxR1FaaVZZWlJPcWlDcW12dHY1MTgyMi8zM0UxM3d1NC83NmY1cDk3SzllcjFZVDVlMk9n
bzFLektGSWNpUytHRERXYWlnRm5GVjVwTzRVQzJIR25SZDZPTzc2N3VmL3RhMjkvZnJ0Mi9iU3E3
dWxDN0RTWm9GZVpscTFhMG1aMkdRNUZxU3hLa3V2NXpFWVJHRXVxNnNSOXlXMStJOHlOTkduQWRo
cXY1TWxMaXBGUWdlSjcrK1dMOVFHZzJMTWszVTcybVJab3BLRU9WcEVlYVQyemN2L3YwZnhldGVp
WXE0cHZMMWhRVm40UW9vUGlyTC8vNkMvUkdWeVlxZ0RDMGhpMXlKMHpTVjJZd0NmeHdhaDBIMzQw
clZERyt0bGNKQnRySlJlRVBVWkM5TWZPdVpBV1R2Y3AwcVJPWnl2QU5UT2c1K0RiMXJpMnJyb3hr
VUN0VTlNOVNCa2lCT0oxa1NWR1ZZVlczSC9URGRMK1pyMDNPdjF3K2I3VXFKTm12WWhSUXdhbFBF
Tmcwejd0cnlUOE0weUpPcUtsT2tCYTN6SksvTmNRcnZReEFwaE1hUVdOcmNCWlVIZ0ZyckNPQkhv
VHpVZm9lUytDYnB5Vlp2SEVxL2JvRWJreURTdTdENlJkTnl5RTlpYnFxaW5sNFE2M2xPM2FaNTRi
N3c4Y3Q4dGxqTjEvMmRRV3RhRmFueWlwZ1NpbTFYeUlvOFNESmxsNHlLa2I3VU5NZ054RXI1dHJT
Lzc3RzRNVURTWHpCTWVqTkhFaHBCbDhiWG1UTjBDOFNQWWhoVlZhRVp0bWp0d0VqYjd6aGhCN2Q2
d1VOQkJqZzVZUDNjbDIxVEFpemN6TnBUZEJtT3pyTU5ZVUxQUzhNeWlCUGQzVWpIdTF3ZW5vT2M2
ZG9OYm5UVnF1NVM0NGVoQXhDY0psSVlPQ0JHYWFRMEhWZFZnaEZxZVZpNmNtK2dCMEYwV0lHNHU2
OE1sU0MxQVEwU2hiZ21ld05IQk1rOUltRVdKQ0VUNHJzWTVHNjh4c1dYMUdzOE9EZ3VFMkpBclJX
Q0xKN2ttYnEvN2hKUlZhcXBLVkJkVkpmWnp1c1dUV3JZM1p2cTlLL3RYeVEvcXB2dVVyS2VwTWoy
MENoMEE4Uks1VlpSb2NhVnBwcFg3MzgwbVZ3VW44ZmxlVlJsWlZ1VkxWaXBra21wUmhkYSt1TE5s
U2x0Uytra2tHczRVdmxkR1NWaG1EWmwzOHpYOS9QdFM5cFdwdExQTkd3U1ZsemdYZE9TQkkzZTd0
emFvSWhqblkycUtZVU5rRi8xNFNGRlAxNjh2bExhYVA3RFlXc2FUTElnemhTc1ZtVS96YWZML2VP
ZzlrakpNc3VMS0F5clBJekxOTTBMMEtRTjQvdENPeGhEZ3U0QWc3WlRqMUREQW1COWpibytRSXI2
cWNCZzlFVFhDNkxEaWtZZ0k3RGQzUmxkbWJuQmFsaWk0eitrT3FPK1FJaWRIYVQwZzNlVDA0QTlP
Sk8xYTE5a0xBSHhmVjRGUlpKMnkwUnRmTzkwcVRoUDI4Q0VsUGoxcHlRTHF5eTZjMHAwalpSeGtH
WjFNTlRFTXB2bGNqN2J6Kzk3V2lGRnd1dzhDcy9qTUNxY0FTSktUY0JKeXB5Yk1UbDVtZVR0M3g5
ZTllR3NzaUFxVWp2NjNjNW44OFVmdlRCSkNRMHpPZ1NUbERFd3cvSmxHQTJDR1NrM0txdkVEcUxO
eW1JdlRscGtFRkJheUNvMGVobVhEbEthK2ZWRjdUQkxBUDBEUnVEK1k5TVIrUU5OZU9Sc3pZalJh
S1dMbzY0SCtLR09MdkFlbmNwUlprd01SYkN0UkJKQVlYMXlNTUZrc0I2T28vOGd4emZ1a0hBbUhM
N1VnRHlXOThaVEVCa3dWZktqZFpjVGtxRVg1WVQvWTRKSUZSeW5hbzVKYU1mdXFpSGo1RDh1ZnIz
NmVHbmo0RGNYdC8rQ2NUQjYrbEtvMEVvRnJpYkFkckNxMjZKQThXbnd2YjIrdXJrelR6eXVidjk1
ZlhuMTBjQXNjNVVMcVZDNFRBb25WbzRUTlc1bHNLcVBINjR1cjk5ZDNaalNkTmJSa1hxcGtjaG0y
WDZHTU9Nc0tNdE9sVDgvelhkN280SDZvdjM3MVdMNmViM1o3UmV6bmZsNS96aHYvNXJ1ZHB2Wllx
cUczbGF3M0h6ZW1OL1dSamhkTHFYN2haWmF5V3E2L2EvNWU3cWRPODN2dDlQN09ieHA4OUJmYnlE
YU5jcnJoMllxcll1ck5JcHJ6ODNTU3YwN0x1TWtTN1QyOU0xRkVLdEFRNmxVcDE4UCtqR2NGa1E2
U0Y4MVA4YXFpanAvQkgvVnY5ZC8xVVdYb0JyVG5hS0o3VFd4bHV2OEVOWGIxbUc3aVVwYmFudFBr
Rm1qV1BXUUNpY3ZpbTB2TDEyOUtxbTZmcDJhcDVoZ3BITEtUTXNqaXdlS1dwS1FPb1FMaWNKaUI3
aERyVG9BZ0JLU1Jna1JWRUthQm9rZXFpcWtqT3YxZ3dxNUZwdW5uWFdMM1h5Nm0rOEdLa21qMEpH
cjZraU1GMFJGcklhMlVLK2pXZGhBMUNvRzFNR0pXbkpRWkRRSDZqcWdPYWRDakdTSUY0RXFPSGZp
bmhCM0xYQlBpTHR4TFUyQ1NKdXlZTzg3WkFQVEkrTFlWZ09zSURwRVdRWnFRTlREZlpJRVZkSFN1
ZXRHaUp2cGFqNFFBbXc2YWxZa3lrRWc0anhSYzEyaEZ4a2dpdHY1N21tNUg5aDRrcWdtOVh4cU9r
Y2M1WUc2RE1OaGlraVMzSlRIR0I3bTIvbDZab2JWMituNjgxQjlaR21ocTZ6S3lrSXk2MU5ERUlI
aUVOSGI2YWVoN2VkbG9KUmFsV1hiUHVtYW9wT0RnckJsdEJnU1RuU0FFb2JOS3JhdXVidGVtdXNp
RCtFVFhDQXdjWklFWDFoSTdtdXpDZThham5rUWFVL002c1ZEY05raWlWWDBWbVN0cENrQkJDT3hv
VllKakc2MUZkMTExcUlCOTUwWlZWbGVJYjZpbW5RSkhZZmYwV3ZJQWNmS1hzRmhCcUxEWW91UnVz
TW9EUStFMEs3Q3dHR3d6eTZPOVZGSlg2OXd2SkhIeGFDR1RNSFlCcGxpc1ZXdVlJTlIrSThEMUpD
QUkvRVE2cExDVVQyK2hwRDhnUWZMVUlIMG01RTUway95QUhza3RXb1hqRFNLeEZGdzJnemYvamFJ
dHFSeldJMnZLU1QvWUtGaUh2VmtpS2gzTXhVeUJSSmJwZU5LL0d4eEhLQ1dCSmlRWGVaTm9BQ3BJ
em0wQnF6SDF4eDg0NnNKRDVhaGd1Z1hlTzZDMnhPZ0lYajdqTU0vREFuWWtJSHZzay83RVd3cnhn
WXBjaXF3L0xDRmVONUhFVVRiTWdnenppSllMQnRROGg2Smk2OVZNQ2dPZktoaXpMck96eSthOENa
cFdpOXJUTEhLbm1LOVNnMmkxb3FKV3RXd290TEdMQXpLc2w3SmN0TW4zRXJtMFVxT1cvbnc5dXJp
NDVYSm1ON2YyWWUyZDQ4TGsxTXY0TDZNV3ZJNE5iOTltdHRkVS9lTDNXeTUyZGxWb1AxR1pwQjdN
Q2pDWm8yclhVUDdjL1BVTnZpdzNhemFQN2Z6MldaN2IwQitmVlN3MnI5bm0vWEQ0bjYrM2krbXk4
WCtUN3NtOWFjbEpLTXVFdE1oamtkZFl0UmZ0cHQ5L2JESU5HdmEzKzJuZTROMU9mMGF0SC9XajRU
Tk9waWl2R1Z1Mzg1L2YxcHM1NGIxN21uMktITXBQYmhVTEJmbEhtQXRjZjA5WGRjanpOcS9WT0hI
eGFmRmZ0ZHhjOHdwY2FnOE9LajBHcEZZVGYrN1dIKzJxNXpHSEE5UFc4WEFhTHQxOFNlN2FtbVhK
anVhQzI0WEUwVWVoVDdRSXd6OTYyTC91SG5hdXdyWFR6MGZGalBUQzdhTC9kN2FSZldEWGJmTXp2
RDRNdC91ZWlsRVBoUmlUR0Z2MXBkVlZ6VjllTEh2a095bmk3VmRxZDRZYzloUmFLTnQ5SFd4QTlo
WG1xelR1NW9lSlZLS2ZTZ2xtTkpGMitUbitYcStuZHExOGlkbHErM2kvK0JvK21BSmRkcmZ6cGQ2
SFpPYVp6Vy9YOHhzWmJxY3lDVkp6RVE0Z2t1S3VXeEFIM0JuQXp0UnFQbkRqajBQeXZIQWN4ekkw
ZDcvNVduN1JZM01mUlpKZlZoa21FWFBTQkpsUHUza3VKM1huWVBlM3krMG9xekZYT1Y5Z1hiZTZq
VzdBZE5ubFB2QUpSUG80MzcvNWVYNStmeithVllEQzM3WGoxbnV3Zk9WMldaMS9qRDkvZnoxeGM5
Um1QZkFLbnhna1JueU54aUNMQmZyLzFKdit6VHZCbXcxaS95aFp2Vjd4OXVBd3FmTDh4N29wUTkw
TWlGYVZWcTd0NTV1eDZ2MThzL2d0Kzk3NEZRZWNPSlE5SHRuSFU5WVZjb0R2YWhkNWQwcUhaQTg0
eXBqTGRiNzNIU0VtcGo3bEtCOWhtVldHWkVvaEVVTTRMUUs4cUtWMUpWQXdTZ0dYY3NPT3R1MlhT
dUZkekdRbWVWVGZyWFhNY1I0R3E0UlFneEtXSVlldFBvRmNEb2U5STNYSDVIdWlkeHlkZnpLTWFY
ak5MQXFiMmR5SEowbmNHaFJlTkJxR0RDRlpMTy9abVVTS1lESXJXRWtDMG9Lazh3RTYvYzJuK1J1
UExsRDY4dkMraUVXVzF0SnR2M1dTNXIxajVBOEZsdERTWWFWZENVWkNsVHZiVC9KQ1ZsbXpFcnU4
Y3RWd0ZDa0hqOERlaStDWXY1WWJtMEZXK21SVzRWQk9iSWhxTi9iaUh6akRnbHF4YUhyZTJoVkVa
cFBNT3Z6cnpaeVM2WHllcStWSTRNVk9iRVVZSWtzSmJBZnZSRHMwbk5qRDRKdUpkT1EvRlF3dmVS
M0VudHZXL2FRSVA1b3Rxc2xlZ2VpM2c0ZGxuWWpZbVEyVjNUdmpnaHl1M1Q3K09kTzVkaFRrMGxl
YmxZcmxYRHZYc0x0Y0lkMjNtU1p3Y1B2Z1ZQUVk4MnBNdEZ1VVJndWRjaEtMKzN0eldWV3o1S2wz
VDhHQmV4ZXAxQnZJSzhEMWJhcXZMUXRXOEhCL1hKeFhnUkZVVlpWZlB5ZU9hQ1NJWnZub0lLUUhD
akdVUnhSTGFNY1ZOVkFwUkV0RVR5Yzl2bzMybEV0bm5DelhaL2Z3WTF0U0x0UURwUUpxeFhsUU5k
SURsVU82eCtvY3FhTlJ2TXVoOE4rQ3lzVEhMaC9sMTZzS2tqQ0FkdjAyQnNIN05QcjFEaDZzMTVj
VmtFWVZUcnlPdEdHdlE3VWlGMTdGTTdvblh0QU5hTzM3N2xnVHJPRkQySWJ1WStQUWh1M2w2OERN
bUpESDRXQWwzTVQxWEkycWIyMFV1RksycTdpNitjVVpFNUx3c0owTTcwRUFpN2JOUll0YVk0VU5B
TXp2QjY1OXFXcjBDTnhrYmV6R1JCMHEwWUkyWm5GWXRHMXEwWWR2M3FTUlpmdURaVFJtRVdqcmtK
SFk4NzZCQ0pCOU8zcWt4VDBValBSNjRwV1R2UU5laS9DekhNUm9aSnF2Qmp3Z0ZlMERVS2tTMW9S
RDU2ZkNCalg0a1dEaDdzaVRTQVdjakRYK0c4YVJJa2F0MHJiOWIvNzZlckR4ZDMxM2ZYSGRuRDhz
ZjMzeDE5dVgxOWNtaTBONXArTG03dnJOMWMzN2RXdjU3ZFhyOSthdVBuOXpldnIyM2ZkemQxaU9k
eE9ERlVMTnpoRDFSSzVWUzJ1eGt1M3BJbE90N2dONmlKRmpuc3h6RW5nY0FIa21GbVJVNEhObkJC
VmtGREJlc2VualFRMU4vb1FzYU9NRGpSdkNJR0xieEtJN2ROaUZMMmUzVDFQL0Y0N3NQSE9xSjdz
QUwxMnNzdGlNOWtkbW5hTW9NcnFGQUhNRlZieWpOTmRMWTZxZWswZ2I1NUdnRXNESmlycjUyQ3Bu
WXVoWUN5NnRwbkVuTUlDQWpBWlEyenRaQXp4ZGZPekpSYVNTMGVkTHFjUnN6RlNMbEVhVU8yUWlU
Q09WZTZRMUNzN0NLZmpHZDlpUHBZbVB5aUhYQ0Y0cUZLSjFFbG5aQW1VU3dXNkVmRjV4cVVsVXVN
TkFKMmR3WlZ3SisrYUZTbDR0TFRTM3BkRWFwek1TbnR5ZnRnVWJLZGU4RDZTSStPY1JPK3RZVXlx
NjhtYWZZVFBaK3IrNEV1S2RhQWNXaHhTZ1FhV0tKNDBBSk5BdVZTZzE4b2RzTk8rUk1YYmgzbVha
YW1BNFZ2cWdQSkF5RHVTUlBHYmpTVTROemZyRjFrVVZLa3U3M1RKMjZ1THk3dnJmMTV4MGF4V1di
dXF4WVRsTktSMG9sbXJGRjNQeVhyZHNhQ2NSM0hJdnJBMjNPc2kxbzZvSGwvN01vM1hyc3FBQmE3
S1E4WlU4RmpJYTEraStBMEhrR056RXlLM1ZDVEgrNVlKRS9nVldvVjNQTm1SVUQyK1Z1RWRDVk54
SFd4d1JrTFNvTTRjZ3BtZVB6L3FVanQ0SDB4UUFmaE9qZ3hUNUZUUXNVU1dFdGlQemx4ZGVreVB3
V0xXbEhuVzQwY1NHMi9iSVA4Q0tKT0RMeHJRQzlwMklNS3owODM3bTdOdWhtSlhiMDA3OWM1SE42
SHRmc1hSZE5WRjAxV1Fsb29QeUxlQXhETmw1TnNGV1pjS2ZkcjN0dFc1V1hkcHdDaUpmUnBrU2xq
QldIUnRNNWxOYURzQlNHZ2h0ak9MeHVMRE9XNjdKeEZmT3VwME9ZMUphS0Z5aWRMY3RRSzZHUkFo
SkhLTDAvRU03M3lxRjRZYmhFTGRFMGRoL0lDVTlQTVA0aEFyV2p0eEZKNFRPL1hUcllaSXc1SXBU
cFVGOUlKeUV4cG9BTjR3c3RwSlBYN200TFcvb28wUXEvQkUwWkk2NUkvRlZ2ZVNyYnhqeEFHUW5H
Y1YwQ0s4cFdUTjQycjhETUlyZmpWeG9XWUg1NzVtUE5RZktTbEsvYmtTOFduRnBWa2MrWkY3SkhI
M25qeSsrT255bitZWjhNMkZmYUhYamZucncrVXQrL2pDalJmcDNrRHNOVmh1M1lQVTQrYzJ4NEp5
ZzFqb09PaFZNOEJ4aUx4ekhGeVBuK2N3aldjMEhuZTdNazhVUjFsMEF5STJoMkNtVThWOFBCbzNZ
S1ViRUFuNFRvNE1VK1JVMExGRWxoTFlqNC9ISFhwdW9FSEVyQ25MdE1lUEpEYmV0a0grQlZDeVl4
TDdMSW1NU3N5ekpGMWwreHBQSnZRZUVNS0FrTkFuMk81d2dKWWFBWW9JMHppSWxJc1ZTUk0zZHBj
R2hYNkRnVFo0WVJCQ3dWaDBzRlVDQXdUYjhLNDJzb2IzTWZFM255NUVMSmt4VVRaSlRWelVUZ0lq
eDBuZFE0b2tRdGIzaTFDTjBXbkQyUFpTWEEzbGtCMkVDNVhvMERoVlBOZUx4dVhRNjFDTzIwcHN4
bXNldHQrSGVzZ1RvcVRVRzVUMTY1elpKMFNYNEpuUWorOWYvWXRHTEpJeTVmZ3d4Q2FFQy9hbnM2
bnhTd29EKzZXVWJrQTUxQ2tFRHkzcGtEcFZXTnVMeHVVd3hDK2d2aVVPM2w0cWRaWitLbEtwdnV3
UHVZN0U3WnNORXdjZi9wRGVOdlRoejlFQk5IMis0T2VWRUlicFdSUUc3bG53VitvQXBqYmNzeUxX
Y3FnZVg0dnlqV01xZkFmalN2SDJZZFF1Y2Z1R2d3VHZNd09EWlpwUWp2Y2wzbWRjR01TWHdLOUR6
Q2I1REtySDF3NlNnL05nRHliRnZUa1dUU0U5RE1BcUdyUlBOTzhrVjNLT2FPWElGRVZPQlIwdlpC
dktkM3pTNk9pVk1RTVd5MWFUWEVhaTRXMFVCSW9EUCtnaERwbGxoanpFU2UwWkdTNlRIQkR3eGtH
bXpGQldYZllESk0rWXVkWGlMS2xQQXVidGR2ZnUwb0JSa2tTQlNlMHVTaWdZaTY1dEpqRnZDQVlD
a0ZkQ2JHY1dqY1hIcEpwOFp1d29lRHdGVjdsRWFVTEtQaWhmQXpnZHozaitsR2RZRkFtNVF2QlFw
Uktwa3diRUVpaVhDblFqNHZPTVMwdWt4aHNBT2p1RHkvcjhrSnd6VSsxRnBUNmwyWHhVNC9yTnpZ
V3prbjc1eTkzWis5ZXYreExPSWFrRnltdUFHVkd1OEZ6bUhaZTZRVG0wTXFRQ2pTcFI5QTR3aDRC
eXFVQlBsVHRkcDMySmlyZmY4bTdLVWtrT2Q3cEJDYlhnWUNlbE1uVDg0SlBSUEZRRjZ0TVp0QnZx
ayt3aGZJUWxaYU5IQitGQUt5Z1pPb1d2SHAvUXdWK2hnV0Z0dU50RnJDRkpQWDRHWmhwUFlrTEY5
VlVlOHNBMFc3REtTYWdjUDRJY20xQVJ1YVVpT2Q1ZmxPVkJxL0NPSnpzU3FjZlBLcndqcldnanhN
RUc1eVlvSTRMbUVNejAvSmtTbCtiSmFhcVZJOE1VT1JWMExKR2xCUGJqczFpSEh0TmpzSmcxWlI3
MytKSEV4dHMyeUw4QVNod2tIc3BpeWZUMFExUlBUL0RGaUtaZSsyby9JREJCY2RwOGdoZWtUVURp
bWZueDdZS3ZtTVQyZFNRNnhRS1g1dU1xU3FMZnFsR1l6WVZJTVBiRE5XMHp1VUVIQkYxZWlyQ2RX
VFFXSDA1VnF6WXZSWmVPT2wxT1kvSlNxRnlpTkRmbHA2L2lRd2lSSE9CMFBNTTdMZXFGNFg1d0Jl
cWVPQXJqQjZTa24zOFFoMWpSMm9tajhKell5WnkrQ3c1cFdETEZxUUw3WGxEdUYxYWdBWGpEeUdv
bjlmaVpnOWYraWpaQ3JNSVRSVHZnSUg4b0JycVhiT1VkOVEyQVJEY1hJb3Z3bHBJMWo2dnhNd2l2
K05YRWhacjNwaFQweFhiWUlGQU9OSS9xOGJYSXNhRGNyNjFBbThDUDBFQ2JFSGxuRTF5UG4xR1l4
bk5DaGJNS1N4U0hKUFNsY3RnY2dwbE9GU0R4YU56b2pyNlVqb0R2dml1RERGUGtWTkI5S0FaWlNt
QS9QbmlsOUpnNW5JaFpVOUlYQkVxb1QrQmZyQjloOE5heDZLdS9reXczU2p2KzFkOUpucGd2UFI5
NjVYMlMrN1JUNEhaZWI1Ykx6ZGZ1ZmV5WHI4eE9ILzBsRnYxZXd2djZoZWptelhHL2ZmZnUzYTlt
ei9MTnhuemxKSS9Oam1ZMU5pYS9mZDk5VDJTeDYyRlMrREFwTVpNdkN1ZDh2ZjlmZzdUYmVYMngz
aTgrYmU3TnB5UnU1OVBaZnZHSC9kakdkUFZsYVM2K0x1ekhrVC9aenhyUGQzdjhnbnFSVCtuRHA4
Sjh3QWM5dHZNZGVKbVkvYVlFMmx0dVVCdVdVMk9qcDlseWJqOGxjakZiR0NZWGlyYit5TWlCRDU0
a2xRZW5OTVNjd0R2amZ2dnU1dUxpVHI5SzMzNDBvZmxTeTN5dnZ3R3l0bDlsWVQ1dzBsaTZ2ZW8r
YVdSZnFJbnNXMnRKWXBlR1B1d2l6RzdSdm1aeDNmTmRqRFR5YVRBV0I0bG1JekFZTVpuSHQ4UFNE
ZjBkRmJ0M0ZRbzgwdEQ2TlVDdzFWYUFrdVNrQ2lxOVlOTG1lOTJsd2FJa2VrMGdONXVDa1dBc090
Z3FnUUdTWkhqWG1VVmo3MlB5WmluTngrb2R6d0NsK0daaHdjWHVMRDhNekhJTVRPb1ZYcm1tZFFQ
U0dQRUcrR3V2ZVJ3bklDWDluTU54U2g3WG9ieCtZQkpqRkN6WTRSUkpwVlUvYVpxb0gvNDZoTDZr
ZEZLUG56RWtuK0RCSGtyMTJYeVQ1bzlHOVlLaFRwRlZXb3ZnbG9sQndJOURxRXQ2eDlYNG1VUHlF
UmJxa0tOM2FaSUhhVmJwTUw0N2VzZWVuZnRGYjBHL3U4RGJaWnU3cnJyZEE5ZnZ6SytIajlpTnlU
K01GNUJxdkp5RDFOVTVCMjZhZWdmNDFUVkZVeHUwQlpGMzdvSHI4Zk1QdnZFVmJZUjBWM0hONFVB
S2E0M0IyK2dVcVdCbmpCWUx0WUtUeDhycHVKVWpzeFE1RlhRY2taMTQ3dU8vOCtwb21qRU1Gc3Qy
bEp4SUl1TnRHZ1NLQTMvb2RCMGRlT0RwT3JRMXNxNVpGWW9TTnJZK0hLaWtJWGpGZmozbVFja3p4
cSsxT0l1Q1ZLK05ORnNqd2FVQm95U2hBcE9aclpGSU1CWmQyMHdhR1hTZEFFVFhFTnVaUldQeE1R
RTNteCs0Q2g1UHdWVXVVWnFRdU1oQmt0MkloM0E2bnZHdFExV3BGT1FLd1VPVlNxUk9HdUZKb0Z3
cTBJMkl6ek11TFpFYWJ3RG83QXd1Ni9NRHRrYW1hb0NxaWtydncyNk80dzBNaFhwQ0lIYnI1TUNB
TW1UTkRIYTJQWi81aHdmNFVpbm9CWkFLTkxwRThhVEJzUVRLcFFJOVdlNlVuZllsS3Q1K3pic3hT
d1VNNlZLbjdNc2dPVWVTS0g2ejhVWFlPcWxmYkozcHowVFFiaHBsQS9aTkhoMmxRNVdBSFhxbmNk
UmpRRGtQT1pGMVlXMjR6MFdzRlVrOWZ0WmxHcThkbFFFTEhKV0hqS25RMUpyVHZrVHhHdzRmeDJa
Y1VBNnBTSTczRjZXQjBDcTg0OG1PUk9yeHN3cnZTQ3ZhQ0hHd3dha0tUSkNRT1FRelBYL2l4R1Y5
Y3U1cTVjZ3dSVTRGSFV0a0tZSDkrS1RXb2NmMEdDeG1UVm5FUFg0a3NmRzJEZkl2Z0JKSGtBZjJU
ZEs1NlFjN09WMy9jcjU2Nnp3NjBtMmdqKytnOUhaUWJOM2lCOW1YbGZna2tPWWpFclpkODIwS2tJ
UGxjZjNpenp4cU1yWHUwb0JSRXEyWDFMeHVFZ25Hb29PdEVoZ2d2WVYzblZrMDlqNG00NVVTZEtM
ZzhSUlFkbTdXQkZ6d3pzckJ3QXpSNG5ROHd5KzdNcDVBWVdDSEdCSitRcTRRUEZTcFJPcFVrWFF2
S0pkS3I3TTVMaTJSR204QTJINGY2aUhwYlZZRnFacEtxK1NaMDFzYTFBM0lDYTJaU2ZaeFd2TWJU
NmFnc0NkTE9TR1VRL1ZES3REb0VrWHYrSFFJS0pmS0VFK0MycGVvZVB1MTFMMzZxVWlsQm1icXJJ
T2RsTXJROFVWSWIrTWdWN0ZUbVR2ZFZDVkY1WkFFZDBUUWJwVkNVaWwvVjRXZzdPZW9DQ2pjNitD
djFDdE1iYmpYUmF3ZFNUMSs5dVViWDlGR21GN0hsUnFZcTdOV09RbVY0d2NRYWRsaFlOUnVxVWlP
ZDVLczBEb1lBVVVjRFB3NnhKYVNJNUY2L0t3aWVUMFA5bUN1ZmlEMTY4d2htT2trU1JUOC9CeG5C
eWNEbEJOWkswZUdLWElxNkZnaVN3bnN4eWU0anJJWjIyQ3hiRXJKanlRMjNyWkJvRGp3Z3hKY01q
djlBS2FudDV2UGZMSUxFN0tLUnRKVkYwa25pbHlvbDNodHJnVWtQdWxpcmh3d2h1MDJBcGh4Wlhr
QlQ3NkJ5eGFNbGxnd3BzUTRkTWFuUXR3cWdkRWxzK2l1TTR2RzNvZnoyK2JiZWVUU1VhZkxhVXd5
QzQwYWN1Q0pwZG5ReUg0N3lzb1RyR2wvUHlDR2QyRmdod0MvOWx2SThRTlMwczgvSEwva2NmV0V5
SlVRV050dklGbDV3bkx3MXp5dmFCY1VOZ0Q0ZFpBQ0pMV1RldnpNSVhrRkQ3WW5CNnU2dUtQZXRR
ZU5Bc1VKUzhUZkpyenVIVWpZSk4yUGc4aExtc2ZWK0JsRThoSVdhaytpVVFuek5QMmVFOUk4cXNm
WEloU1V0UWdCUlV6Uy9jcndyMnREQ2lEeWpncXV4ODhvZk9NcjJralB5VWRrbFlKTWJDZzhTbGdP
SnpBSHEzYUFodGdCZzF4eG9Xc0wzc3F4WVlxY0NpeExiQ21CL2ZpUWxpcWJzdzBXeTZhVS9FaGlN
dzYxNVBRY2VPY2tVSjZaNWtlY0JDcGlsY3lrQjg4S3BvVlBJeVZvNU1OeVB0MlpNMVhyelg3KzBx
eStOcWV4ekNHc3I0djlZL3ZuYkxHZFBTM1Z6L1owNFhTOVg1ejFIOGdxZlFCWEFQQzBPZlczbUJ0
ays4ZHBkMmJNSGcvVDU4MW0rK21uSlRvdlJrN1YyU05tOW5UYWZRK0Z5b05DRmdJSzlqRGZ6Y1dk
V1JYZlBXNmVsdVlNbnoyak9OdXNkNHY3K2RhZVU3VG42UURWRWVmanN0Q0hTNlM1Sk9ZYmN2QjRY
T001MEtWbW0rMTJycHpGbnJwOG5OdmZIaGJyZStWRWpJdlZod0pGOEpFUCtCaUJwNmRMWjh2RmVq
R2Jtc09pajR2ZGZyTzFaeS9YOS9Zdkk5c29xRnZqUll2cDUvVm10MS9NZWc3SFpyRVArZ1NoTndv
MFRyUll6NVpQOTdCZkdwanpQNVFiTVdkTmw4cGhMUHcvZHc5UDYwTW5IYlBFQjMrSzhCTlBhWHdk
dWtEenc1TnlJWHN1OUc0N24rNVgzZldiSjFWSVdjMk9CNzFIZWJQVUIzMkcwSGNJVjlQMTlQTWNn
TnFBMDYwN2NyNjFPM0w5ZDlOVjUrcW56ZEpZTVVxVDVDeFNvOFhmZW5oa1BqeHl4T1A5Yks5QzJl
aTM3NEhWZjM3eC8vOXNMazhLWlc1a2MzUnlaV0Z0Q21WdVpHOWlhZ28wTUNBd0lHOWlhZ284UEM5
TVpXNW5kR2dnTXpFNU55OUdhV3gwWlhJdlJteGhkR1ZFWldOdlpHVStQbk4wY21WaGJRcDRuTFZi
VzNQYnRoSis5Ni9nekhsSlptb1lWeEwwbTJMTGpscGZFa2xKNXB5bUQ0eE0yNXJxNGtpeU8vbjNC
VWdDWElBZ0xacytiZE9RUzJEMzJ3c1dpNHRJaE5XL2gwVDlMMGxwTkZzZS9Ed2dCWTFFUk9yL0Ns
SWlrWlJwMlpZUkpOVGZqQ0VpTU1aRnA2UFJra1NuNjRQUEJ4K21CMGRuSXVMUjlMWmlwSmdUeGlQ
T0VTVnhORjFHZjc2TDNrZC9SZFBmVlV2MWpicE40eFF4UmpGV2p4alJ1TkVqaVFoeGVuQ0pFUllT
RXg2bGlLUmwrM0grc043czNrZTY0N3ZKTHRzOWJvK3J0N1A1S2x0WWRqNVVrUWlGQVFsR254VXNz
SUthMEZUR0VVMlVaS3hCRjUwbWw2UHB4OThxZWIrUExpNHFKc09wc2lXT3VFQ3g1TnAweStnUUl4
WnJDcU5jOTE5RUZDY0lhMTZpZzF6MTErUVl4YndreHdoejljZ1V1ZVFLQ1BmUnQ0UFZnYklvVGlS
bjZqdFB1RkNxSUJMekJNZlIrUHpnejcrVVhqZUtsTkJDbFg4T0xEZ0x0d1hGUkhuKzUwSHdvOU5I
SkVoaXE1QkZyc2ljODNadFhnWCtaV2dhR3RRZmw0b3piRm9ZSlFUWjBsNkZGenNpTzJHNlRROE5J
TnVxR1ZUWWNWY2pPbHlWWGdhL2dGN0w4cTAxTVVraFVjTlRPQU9JSWNvandWQXFjWnBXQS9kVHRw
dm5Lek55UjZ2YjlXYXBTT3NWSEVJS21POVRSMXVPUmVqZDZzOHhSekZMVThrZEsyaWJzN2h3eDF0
RW53UFJoMUE2MHFXV3JhRHhBRkRyblJid3IwTDVuUHdhcFJlYjNraTJkZ3VoN0Rjc1hHRnRFUDFX
cnZsYlhSdEMvaWJ1OWszVU1RcW9udWRVTTYyWE94WW1EL2xzdnN4WDNZTkJXMXAxU2VQVWN5VWsy
NkVna2hneG9md2lmTEpqTHpVTmhoS3hNcjd0M1QvMmdyaGRnTjU0Y1dINmpVTktRaWZvM3U2N2FL
VHVGc1ZmcENGSjAwUnJXS0cxaWRHWFgrdmtCcmkxaTVzS0JOQ3BBYlpmK0FabHRnRnVhUnowWjJ2
SWhOVDV2Nld3bHBISHNVU1U2ZUhtRGJ5VHhmTnpVR082YmhZM21yWGlMVFYrV0RvQXd0dFVDbnNt
Uk1LSnNqUk5VK1lpMUhRc20vVGVRSjhGVVdNRjVMcWR4SXJBYlVIamtMREx5VFlJS2VMUWUxVENR
WkNlTXRodEZVRGVyTmRDOWFVZk5UMTBhSVFNZGdGVlhrQ0NSckZRN1lzaFFWS3BwaWFraHFqdXM4
a0xpV1pwV0xmbGV2bFhqUzl2ZlZTSXJwZGtIWXNpTzBJSmJoYUlxVnBia1VUbGxaTE42ZlVIczVJ
ajlJaktJNUlLV2JHeUhWUFZrMG1WWGZ6ZWcvT2g2VzE3NlVWZ1NEQlI2enRKR01hODdIdWVyMjd5
emJFdlM2amxKOGZsZ3RYdGNGbEthb1BtTjI4MExWRlFxbGVqYWtvSkZzaW5YWGk4cnBQQjJWQlpv
L3duaEswVXlBU2lRc0dxVFBZeHp4YTcrNzNrZVQybGlCT0NjUnBqS2ptUEV5RFNsdkZkcFIyc0lj
RndnRVhiVzJlby9RcGcvZTRNZllEVUdhY3RHcng2b3VzRVVXTjFNcEFoMk9IZXlLNkJ1Y0ZhdUUy
ZC9pbTFrZlZiRkFyT0RtM0xqM0NZdkEzWVoyZXlhdS9MeXlXZ3ZvOVRsREJlYnhOVjlYMWpTTkdZ
VjRXSjErUGJSeVp3S3NpMDBhTVdJaW5pb2lpR3lscG12VmprczExKzB5SEY2NExGRWNGSEZKT2tr
U0FJTndXbjErZkk1R1Iyek9McStkTnBGODVVSUpKd20vM0crU3lmUDNYQzlIcG9tT1E1bUY0ZkF4
UExZMHoyZ2tsVUdNbVUyU1JhN2l4MjR2Uzc3QVhVNzJRTlNvNnBiQ0QxVjM1ZFZUdGNKWUR4QVN2
dy9ybnBCZXNIZjhIVHZsb3paQ2RiNmU3TzBBUDZPUU85UmU5WEwrVjh6UUkxbElkdDJhb0VNRmdY
SFV3d0F2SUo2ZGcveVlXRk41Um9URGpoWG51c1k4UFIrQmFLN0RGVmhyTjF2U2IwVXErekp2eVBL
U0pWY2N6VkhNUDhnVjJ6OGZMa0g0TnZ3OG1KcllQUEIrUC93anJZT1gxSlZHbWxDbGRUWURld3Ft
WUVLWDFLZkJlajRkWFVuSGdNeDE5SEo4T0pnU2xqdFJaU3BiQmtTYU5XcGt6bExRRlpUVDROVDBh
WHd5dlQyNTkxZEtVdU5aSjJ0Mnp1SUV3cWtKUzFLVDgvNXR1ZHNVRHhVajJmenJPNzFYcTdtOCsy
NXZQdVBxK2VzdTEyUFp0bkt2VldoTVg2Ym0yK3JRd3hXeXphMnJkSXFpakxiUE8zZWM0MmVVUDhi
cFBkNUxEUityYWJMMnIxSzRtTFF6TzFyS01wSjdTSVhNRlQ5VGVWbEFtbXJhY2JKNGlxUWtPWlZD
Ky9idlV4bkNZUVhhUXZ5NDlVc1NqV2orQ3ArRjQ4RlYwWGdJMFpUaVN5bzRacXVsNGZPbndySG5h
WXFHVkw0ZS9JY1N1aGFvU2s3dUpGYWR1cGwyYXZlcXFoWHl6TnVhc2dVV3RLb2VuRTRvR2tTa21v
T29RTEZZWGRudEVkV3JVQkFCaUJsVVlnMEFpY0k2WlRWZW9ZWTdTNlZTWFhmUDI0dFdHeHpiTnR2
dDNUU0JxRnJselZRQXBFQVVtb1NtMVk3Nk5aMklCVUdRYndDSkVxNVNESldBN3dlc1p5RFlZdWtu
MmlDTEFJaFZQb2hMaVdFRG9ocnZNYVo0aG9WeWJCZHMvNXdJd0lTaTBiNElYV2dKQVNxWVNvMHox
aktFMHFkYVoxaHJqS2x2bWVFS0JvVXU1SXlMMUEwSmlwdVM3Um13d1F4VGpmUGk1MmV3cG5USW5V
ODZrWkhKVEVTTDFpdko4aEdJdE5meGZEYmI3SlZ6T1RWc2ZaNm01ZmV3aWVhSmFwVEMwa3N6KzFE
eUxRSFNLNnlIN3NLeitXU0JrMWxiS1M3dzNOMWlBSEhhRmtaek1FUjdwQXdiamN4ZGFjNi9lRmVV
OWlERTl3QWNIVVNXM3dXemFTdTJTVzVaMm1paGdSV295NDRuVFh2cG05U2xIaktKcUwzcmlnUkJj
Qk9BTUhiYW85VmREcTBKakk2b1BkTjkrQ0RWVmVCcjFoVGh3QTdacDRDWk1MeE9hU0hkdjI5dm1l
RUtxOWwvcGpsMGQ4cDhOdWZXUEJqNzhncEFCZXFDUElaVkJIbHh4QzM5dmFMd05VS2dFKzdxRjRp
NjBoazc0dWFJbUNJTTZBRWxEeE1nY1RmV1lIOUhhb0lSVjYrK0ZGY0txMXZQMjJoOUl0NWdZOCtq
cWhKU3BDS0YwTmlnblBVYnFlalJ3bk9HUlBCY09rbnc0dkExUXBVWDlzNmwyd2dvcERNdlFEWU5M
WEVVSEpqaElCVDRRMExIZVJIQmVBeXdja2lMNi9DL1pEQXE1YnVLM3NXYjREdTk3QWc3NUlZdSs5
M28rRHZna3IvU0x0bkJzWG5sb0JiempVVnRlMUJFMkxHbjI5NFFBS3dNYXFiaXc0M2gyVXBRdERp
VjZweWdJUVZTc2lxbmVlUVNXYUJpcFJsVVRVVWxCZ0pDV3oxeDI4T2xSTEx0STltT25MOTRWNTU5
SVdUTlZManpxdlRWWmRNcWxGaHpsakxKdHBnZzIvNm9nZGtqRHNVaUZOVXhUTFNnWHovQ3JVdGJ3
R0ppdlIzZ1dBclFKQTY3clZhSTNkTjJoalI0MVhWS2ZRMk5qRjRkYjZwcEUzOFJ0UUxwbExMeTU2
bFhuUGlHNlVlWTZCUGJxemVnb1NyTDlnVUFBdXZlS2tFYmxoMkMyMXRqR0VOKzhiUTdoa0xzTnVl
WXR5N3hrZ2pYTFBVZG1qaDFZNFhYUnJvb0JQQU90ZWJtb0xwckJLTFVXNk1aSmJqaGtiT1ZRdXcr
NTdpNnF3RzRaZjF6cnF1dVRRR3FtTGJxMFQ4RXJOdVplZjJrSXNxRStnQkhiczQ4NjcxazhPbWRm
Z0RZUFhPK3BsUUJwVm82dXhTL2VXVVlXTUxybzFFYUJiWDlXc2V6a3JMTElCM2ZkV3lCcDFPV1Rk
QkNvdzQ2YW01OTZpSUd0RDROYVJvQldzZzJ1NDlmR3A0NVlrOXZ4UjYyWDkwVlQxMVlXeHIxQ2dB
UEFnTGR1eHQ0VmdpMzhEY1JYUXRxL0x1cUI3b1dhTzQ1ZytZWTNWWjJuUFdZblpPNjUvR29kaSsv
dVUrMS9iK1d5ZW1VdjVKK3ZsTWwvdHRzZnd0Qzk4bTFFZjF6TEVVbTd2ZUF6dHNlWFZlcGRiSHZx
bzE0VkE5R0ViUjRJbGVrRlFYc3M3K1dxMjBLOEc5akQxeStCcU9wb09wcU92dzRway9veUhnNHZx
Y1RxNk5GOC9uWXdiOS9sRWlvUytqMEFhTW9kWE5jTzI0eG1GbEVsRWNHeDcxWTFUVHkyUmxJZHRV
djlDVURtQzZ3czM1WUZKZmV5N3loYS9kdk5aWnM1MUgvSk5jU0c3UGtPWTNXZWJiTGJMTjNONG9H
dlBaM2YzODIxRHlWb3lkeVZuMjIzMnErcDVuejBaR1Q5eSt6dU1tMXlKV3M1WDltRDVoMm5mZmhM
Y1BKNENDRVNiN3N2MXpmeFdxYTd2bm0rYm1GYnJYUlBkYkpGbkd3dHR2VEZtZkhqWXJKOGN5SzE0
WWhkUGZRWitkanBBSm9ZS281cURkbUN4YlJQU1U3YVkzNENEK0lmSHpmWXhzNWNwZHVZVTN3cHFS
WmE0eUU0dVJvT3E3eWEvZTF3NGhxcnZCRmlrajF1TDRkWmFacmFZcjJCNFBXNGUxdHZjT08yWlVK
ZXZDSFhwdTl2aTI5WGg4NDgxWkJYdkZ2bmpkcjY2YTF4UE9MbitNSmg4ZnpmKy9uNndmRmpNUDIz
eWg2TU9RNmFlSVczdmFmYnpNbHNWajNXRzBjZVh2ejFSaEZHWE1TaCt1VEVvZG9HY1diY3MxL1lT
eGh6K0FxTU02NVUxZ0dNOGt3ZnR4WkRkdW5sZnVSWk9YT0gzdTkzRDhkRlJmdk5ZRGpuMFU0L25H
ekNRWit2bDBXMzI4K2hzOEpuU0o5TEJtcnFzdjBNM3E0RDcydy9OSDNudFZUMVM1emVCVUFXR3lC
WWQ3cVZlTnJVYU5hTGMyblB4QzMxL0R4eldtTHNvRjJhWjFQeGhkS094cmpWU29jK0t5MWx6T0Q2
N0hsK09yczRyZ1pQUmRBaW51OWo3YVk1aUVSZVh5YlU2ZHU3eER2Z3BJcW9vOEJ0Ky9qS2NtSHRR
cDZQQitkWDFaRG82bVJ4K3E4a2ZSeGNYRXhNcmt0dWJvR2VEaTRzUDQrdnJQNnIzd2RmaDFaZWhh
ZGpHNE1Ua29KUXd6QThacGVZQzdFWDJZNzNKZHV1TlNZK244MDArVSsvbVp0WHdhanhTZU0wd0c0
N0hnLzhOSnI5ZG5scmVLc09aeGxpYzRwaXJVaWlCdGNhL0ZRMUFvQXBsYm1SemRISmxZVzBLWlc1
a2IySnFDalF4SURBZ2IySnFDanc4TDB4bGJtZDBhQ0F4T1RrMEwwWnBiSFJsY2k5R2JHRjBaVVJs
WTI5a1pUNCtjM1J5WldGdENuaWN0VmxiYzV2SUVuN1hyNkRxdkNSVmF6eFhHSHllRkFrN2JHVEpr
YlNiT3J2WkJ5SmptenE2T0VpT2EvLzk5Z2htbUJsQWNpeXY0M0tnNmN2WFBkTTkzWUE5QlAvT01Q
d0pJK0l0VnIzdlBieW5ZUThMK2JzbmhjSVhJaXA1S2ZZNS9FK3BqemxDYUM5MG5xeXdOOXowUHZj
K3pIdm5sOXhqM3Z5dVVnVEtNV1VlWXo3QmdUZGZlWCsrODk1N2YzbnpYNEVUbmhHYk5ZaDhTZ2xD
Y0lsOEVqUWtRZzlqUzRJSjVDTXVFR1plNU9PbzVKOW1qNXRpOTk2VGd1OW11M1QzdEwybzdpN3pk
YnJVNmx5b1BPU0F3ZWVVSERYTUVVQU5TU1FDajRSZ0dVblFlNkhaZFRMLytFdGw3OWRrTktxVXhI
T0lKZklZOXdQQlpPaFczaG55YVNBcGxEQXB2L1FJQ24wa2RmRUQ1RXBla2dNL1lDVTU4QkdEU3dy
a1VxdEJlUEMrOU5ZOWlDZ0tCYVB3bklXTWd5cytEbGlJQW05NjFmdnpML0RyRmtnaDJidnkzTlBn
Tk53T0ZETlkrZSs5MW9lV0RBOTlnYlJER2ptUUdXUGQzcndLL00raGFYaFFQMXlCWnBOMUg1UTJ5
SnIyS3J6SU1ua1FwczE2cGdCcHJ1YW1RdFp5TlhhSDdkTFB3ZDlEcjIyNTBacXBvaEJDZW5Jcmdh
aFBtTWVwSHdrVVJWWGkzcVM3UEZ1cnpFM1dkNXRpQmFUTjJrd2hBT2F1cWVVdFE3enRYdnZQRVBN
REdrV0NXVkdRTWFmQmZqbmVZdmRaRUYwSTVVTGExSkxMREo0QlZLOU9CL2hYb1R4bXYwYnA3RTBu
azNYYzJsQ2VsaGEyc1M2SUxwY2QvczZsYlVQK0pzdnRodWhBRmhCNXpnR2I5TXZPaGRsanRzaFgy
ZnB3TXNoSWcwZ1VSTTVTbW1TZENqd01mTXBoWGJoTHR1SUZ4MkJiSVliZ2ErblQ5MTRyYmh1Z2t5
ODJUSmU1elVsekVhUzBmYzhicGJ2RDhaL3lFRWRSS0QyczBPckM2TnF2ZmJJM3VJNkxYUXE0NFZN
RDdHbmJ0OVZtRitBTzV0YjE3Tnd5YmU3OGF5V3NJL01ZRWo2aE10MmN4QnNzajU5QmplTzYyZHhJ
MWFCYlNQeG02MkFRM3FaVGVHRkJ4QXhEcEVrVVVSdWhwQ1BScEo4TTlDaUlHcXRCcnZrRUFnTFRE
WTFGUXJZbXpkRG1pRVUvb1JOdUJlazRnMnl1RnVUTmZxMnR2M1IzelFrK05MWU1zZ0ZWcStCejRn
VWMrUGNwZ1NNQlI1TVBLU3BsaW14dlVZMkdOUytUNDErVlg4NTh0RGRkajJRSGhpS2RvUmcxRzhR
SVppc2NRbDBwMVF3bkg5UWtoOGs1RWVjNDRxSlNwUVVqa0tRQ3Fvc3IzYitLbGJTV2trTmdtMkVN
ODUzQUZDRld5bDVsNjl1c3VIQnRjUmcvR1NvSFZsdmd1clRVQmMxbGI3Q1dLQWlSMHlnY0thME44
dkFRSGtkMDFyK01JUnJsVHh1MjBpRGxQdUVBcXdyWnh5eGQ3aDVlWk0rUkZEd0lNVUpSZ0loZ0xB
Z05rN3FOUDlUYW1UMmtrUTVtMC9iV0ZlcGxEYkM4dDFMZlFHcmxhWWNIcno3b0RvS29zVm9WU0JG
MHVqZXFhOHZab0NQYzVjN3BKYlZSOVRzY2FqMGR1c2FQOW0zeU5tQ1BubVRWdXkrbmxoajlmUkQ1
SVdYMWE2S3F2MitrRkFsWTFaZzRFbDgrVW80aWp1Y05pZHFJSUQ3aisyYW83R1UyeTJXMjJHVzNC
Nnc0SW9pZlkzUk9FQTRiQlFJejFYQTZNdWVxSnRNTEdsVFhOOE5ET0NQdTQ1RHA2amZORmxuKzR5
Qk1SMExDeE1kZ09qSUtKaElYQ0w4SUpvWnRKQ0txaTJqNVp2RWdUbGZrUlVCZElSMVFmRUZFQTZr
NytSM3EyczBwd2NnUHN3TS92VGI5eFB6Z0RqemQwNW9pVzlWS2lsdXBaL2huSlhxSDM2OGU1VnpQ
V25vb0I5dXEwd2tqWUlmb3hnSERUVDF0UHA1ZTVOcU5ONXhvSERqdFVpK1lZOXQzNDFzNDhvS2pz
cjFhMXpPaFUzcXRtZkEvcW9tRTVwakJHVVBkeEs3Vk9IWHlVLzlMUEJ2b1B2aXFQLzJmMlFkYlgx
OUNhSzJnY1ZVTmRnTXJzR0VmL0NueGpaSjRQRmRmUE9McDc4a2duaW1ZSW9CWkNGcGhRY05HcjB3
bzFDMXVxcHJkeElQa09oNHJhZmZVa1oyNmtFaTZsNlc0TjJFUzdndFJoL0x6VTdiZHFRanNiNnJy
WVo3ZXJ6ZmJYYjdZcXNlN2g2eTZTcmZielNKUG9mUldoT1htZnFPZXJSVXhYUzY3K0Rzc1ZaUlZX
dnhmWGFkRjFqQy9LOUxiekdUYTNCM1c2M2V1S3c2SVh0U291YWl5YldsOEo4TXVINXhRQXVhcjBH
ZlZ6cHJYS01icEttc3NNd3h6MVdoWHl5VHEzZUkwWGQ4cmtSS251WUpFYmgwaTVKdWJXbmJ5cE14
TjdscTFHQXFvWUpDTlZINHFxeFZNczd1c3lOYUxyRVc2bmk2NHpCOHVxMk10T1VxLzZjaEVIbldU
QXVaU0pOd0l0Z1NhNkFheGZmNnFRdXl3cWV6UUU1RUsrbVNlWENhRC9qeVpqQTk0NFdpTEc3eklv
eS9ENWJCZEo3TlpNcjdTRldBd0dROE5qSjJBamxsREhqdkNRVUdYSFBTd3krbTh3RjZtMzdLbHpy
Y252VjN6OVdMNWRLc1Q3VmxsdFh6djFzaTJSM1ArN2NMQmJSekowRmRiZGIzOFcybGNLNHRQNi96
N2s3ckpiMEY3ZnBkblJVVjRUaFdHeHlMYjFtZkFScm1sYTBRWG1zQkdzMDFYajh2czY3dnQxL2NL
MXJ3dU01REYrZnErdXZ0NzgxUmRGZGwzV1daME1Ydk9kYUg3ZHNSOGFKdC9MRGFMYkx2TmJ2OWJ5
VDlzbnJNZldhRXE3djJtdGc4cjhKd1d5aWFnVHJlWkRzYm1SMzU3eExTd1RkZExXMGRaMTl5dDRX
bGVhRWUvcWZXcVMvRitwTGxYZDJwbmRHR0liQXo5VlZia2kxUXQzazI2ZTlqQVNaSnZkd3JBMTNl
RC9zMStiZW92LzgyRE40SWM1TlVybVhoNk9abGVHOG1Yek9NTExRNXpuL1BpR2VTSmdPT1c2VmNs
elRKQWlJODViVEIrL2kyZXFWTittUFN2eHBQWlBCbk16cjdVNUkvSmFEU3JydUhVVldQT1pYODAr
akNkVEQ1VjkvM2Y0L0Z2Y1hYVElUN29WeGNScG9pZFVVTFViSGNkRDZIV2pUU1NhVHlZVDZhcVk0
akgwK1N6Vmo2UHA5UCtILzNaTDllcUlFR3pvalNQSjBvSThTRUtHQkVrTkUvT2Z3Q09va0NRQ21W
dVpITjBjbVZoYlFwbGJtUnZZbW9LTkRJZ01DQnZZbW9LUER3dlZIbHdaUzlZVDJKcVpXTjBMME52
Ykc5eVUzQmhZMlZiTDBsRFEwSmhjMlZrSURVd0lEQWdVbDB2VTNWaWRIbHdaUzlKYldGblpTOU9Z
VzFsTDBsdE1TOUNhWFJ6VUdWeVEyOXRjRzl1Wlc1MElEZ3ZWMmxrZEdnZ01qZ3pMMHhsYm1kMGFD
QXpOREU0TDBobGFXZG9kQ0F4TVRNdlJtbHNkR1Z5TDBac1lYUmxSR1ZqYjJSbFBqNXpkSEpsWVcw
S2VKenRuYit1NjdnUnh0OG4xU2FBa2NjdzB1MUQzR0xiYlZPa3VFaVZLbm1CVkVHYUFGdTdTSmNx
VmZxOGlGZTRnelBnblgrY29VaEo5dmsrRUlhUGowUlJNbithNFhBb1A1OFFCRUVRQkVFUUJFRVFC
RUVRQkVFUUJFRVFCRUVRQkVFUUJFRVFCRUVRQkVFUUJFRVFCRUVRQkVGSDZILy8vODgvLy8xWEtu
LzgrMDl0NGMrM3NtMTJka3NoNkhMYXVDQ0NObDd1Zi9yaDl2TnY4bVhiZml2RUd2aUNQcm5HSUlv
TFdiR3p6d3lDanRObVNyWnUvK1Z2di9PTXpvQ1I0c0pZd1daQmJ5OUNpYnM5dmRHdkhsYmszWFVI
VU94RFlwd0Z2YXRpbE13L0JVUkFBNEpJQWlWZFRLemdzMEdRMEVZRWo1VThmTVRuc0VjUVpHcERJ
N0JLdXNBa1FaQXBOa3hBQ1lKMmFuUFl0RHNIbENCb1FCdE5TWlEyRTRZWldBZ0tGTk8wRWNTdk1F
eW1Idi85WlN0Zi8vR0hILy84ZXlyYjllVDMyK2ZiZjg5dUkzU1FLQVFSb01SdllKaTBpS05rY2dq
SXl1aWxMeEdObTdxR2FYdUZZUkxhdm5leVJOVUNySVMycTZFdjBkbU5HcEVYaFJBb2JTYnM3Slpl
VG5tcjVCVXd4ZEpBYlhlcXN4dFYxbVp4VEUrUE9hS3lpQ2F5ZDVTOHgzKytpdmJUQktaYXZRRlE4
WHdUTXpWMzBFUnBnWlRPZFA4K3BaWmJjdjJnUjB3VGh5RGFNQVdZaXZVR1FKbUJDTFpLYzJrYVdE
eEZBWkFMa3FXLytzeklLQjV0Z2FsWEI2b2JKSjlDRTltam5VN1JwZUtLSGszSkViUzMrMnQxbmhW
NmFhQzJmcTRERWUyNGFYOTRYS3o0MkZtdUV4SXhyVXdwSHVXWktxOFNkaDI1WkE1UjNlWDVFZndY
WmN4MHNxL2IxaE5YWlFKVmF2K0pNb2RPTFZCN2FES3QwcjIzTEZHUHB6UlRwN3QvcG4wWmlPNTZk
c3JzT2RYNzlrRDh1VHZLeTVQVm5VY2dUUExYNVByV0tuRDI5dHVtL1NnRlpKMXVwOHl1TWxaVm5z
MmxRSlhtMGJwTXhWREVXSFgzdmV5MFZHeWVoanR0dTNncVQ1QjQ3ZHFzRThkVHM4d1RTL2RrRTVa
MVFPWDdmK1o4cS9NSTRrUXlqYm1nbllyTjB6Qk5WRzNBa1JpeWlUWjBXV3ZMV1k2ZitZM3ZjZStU
RlM0Q2FvQ200SlFIYXF0YXFDN1JwMGozOC91K3pDSTlZaHBBU1Jldm5sdkY4WnNiZGRkMzRQMWY3
b2xBZVlFUmJrQXdnNlliYVY2Y3RxbzIzZEVjUnBsQWNXcHhXNjRUbzRqTjA0QTNwZGZJQjIrNlJa
UHVEYStTelp2N2xEL2R0Zlovc3hsSVZ3Qmx1bWZlNmVnVDF4V0tiUUluMDR0dnZHTFlYRDhnZ3Nz
WVRicXJsd2pLOEdYQ2xXenR0dGwyeXZYclpHaTZ2K2RWcTN2UkNxQktOd2Z6M09NS0I2N015d0hW
cHUySnZqclE2NmkybStXWXpTMzZFTGVLMTdkdFA4WHJ5M1NxS2RVZUFOUkFYRjN2SXBBUlFBMnc4
SEpBY2R4Z3Y3UEhDZW9hcFVWWTZmcVRUYjEveXd5c1h5MnBkd0pLKzNzWmd4TFhhVVlzUzNicXRZ
QnFVeU5FbjYvMk41Rmw0Vms5cjRqbGl1TFBmRW5hblJKOWdkN0o1UnV6SmhxWjlyOWV6RHkvVlBt
MWdCSmg3Ylo3bHp5aU5rRzlaSXpFNmlvVEpmRjVZS0Z1NmVBNVJTRDNoeVlXQVhWS1VFSUQxUzdi
TjRzWjdtdFB2eHYwN3BMMVdrQzFpZVV0Q05XZTFvWTF1a0I1RUlsWGs2K3V3VXEybkU1OGl0ZVhD
WGF0cUhNNlVISFB6NWV4aWFSODZ0R1ZnZkpBS0prblBRcnptRExwRUlzV1c1VDBKMTJ5U2tCTmlm
VnBhN0x6R3o5bFluZDRQamZUMUh3aVUyWWU2ckpBZWZIdGtua1NOSGtvbWFaSEYvRzVaN0NDRVZZ
SnFOdWFBSUxaTWZJeXh4MTZzN2xBNlFvbkFzVU55S1FoZFdPUFZ3YXFiU2YzeVZJTjkwUjRYRk1R
WTlVdExXS2k1SU1TZE5aVGd1ZTZWMlMrOUhiOXdxTlp4dHZ0WStaQkY0MmhCa29tVnphL1ZQbUZn
R3FOQzcrV3pGUHdrREZ2eExTekJOYXFCQlJicUNrcEU2VUVnM2l2L0QxZmJ4WWZibEdVYjQ4eU41
QVhBcXJOdFdPbThuZHNUbGpLVzZqcFJRTmJ0VkRyWnFNeVRPMUpwYTRlcmhzNUhKdUgycThZbVJj
QzZvdjYrYzU4N3lKbnI4dlJUdGR1d0ZvbDJ6OFhxS2R2Ym5iNlA4RTBhQ202bUZsak10eDFwMDhU
dkNoUSs4MVRZSnRhVHl6bTRpLy8rcTErMVI5MjRjcEhKTnJCWTU3QnJqd3V1cmtCZ1owS09rOHkz
enZZT0pQTGw4dytpbG5PTEExK2RhQkVSS0xhdGFiNGVFeUtpWS9neU1PcXRWUEpHNEtZemg2OWhG
S3gvNmFmbjBCL2R1UEpYbS8wYktJSUN3U0gwRFY3aHN5YklXcmJFSyt1Q2lad2RRdTc4WHk5QnVU
MHRSc2FxTko2b3NBMlpRSVJwbFV5TFJTWEFDcytTalVpTVJlbzU5VFpuTzQ5T1pPRU1JQnFOMWtv
V0EvVjlTRkZQVjVRSXM2d05VL3dna0RsNDExZndwOWQ2NW9uenpDMTdBaXZUNkJrWXBXL0lYejVm
dkE0ZWdsdDVTY3hxMHpwUGxOYVhaNTM1NGJiMzgyTVRiWno0RFN2QmxUK1JwMGNQWmxZQlNoNTVz
bDhZeHFwL0ExaDdNUkxxajVJb2UxT3diNjYyeVE3TFJtRkpGQmo3ZCtUSU5GRjQ0MkJpdWVla3Va
Slc2VzRlT09zdGlUOVBXMmFkMXpGU0FQZGlZY0dnVHVuM2Fxa2ExZGQ3cFJuS282NmRKOUZscW1u
Njk5ZURhalMwcnliWTU3aW9aT0pVZ21ySVBwWEhRQU8zRW5HRkl3NHVCZVpvM1VpSmZud0JBK3Jk
bU5kWVhMMVJEQ0VLVDJYejdzT3ljWjROVlFYV0MyU0FLb1VjUGJNVTJDYnRMTTNVQUk3bFEvNDZ5
Y0U3cmlLTlQyS0QwM2RjNGgxTmUrdi8xRi9lcTIzKzNBYnBrc0FsZHlML2IycWVZb2plRHZKcXM1
SEgybWhvRStpRnFoOHB4cUw3NDJObS9JdTM4QjhOSUNDcHF1YWZoUG5saDlqbTB5c0JrNTVZUEFJ
UWJGNE5KSHNWTjZQaEFxYUJGWlRSazhCVTNuekpKN3ZCS0NndVJvQXlqTlBlUXMxRjZqcVlwUFd3
cGFpTVJEVUZROG9xa0F0R2oxdDlZczNYZk9VUDlrMlBYNGd2QWxCWFhGY29yUnNmTUJDalJtcExs
YlZCMStJQnQrS0NmWVExTlVZVUFNV0t1WWlYK2c1LzlXbi9ZdlZXK3RDZkhzV2hyYzF6RzNWZTR1
bW5pOHlKM1d2TEhzZnMxQVpyMi8xYWZLUHl3dW1wa2NrdkhTSS9MUStaUUxNYmRWTHE4c0xwVWl0
dmd2eFhaSHZqZVpOa29aRnA0K2hsZzVrNkNHYzJ0bGJNWUM2K2N2Zkh0Ly9ib3RYdzlVU0FFNFha
ZkVGMStTWXJBbm1taEtsbnQrKzYxbEFMWXJ5emI4SzM2VE5FMXVvNlFPb0dCWVNZWFhOWmFjWFZC
ZW93NXBCWDFrM0dmS2Vmb3k1TncrVlFTa1o1WnZldzNVc1lwMi85OHdCOWZ6b0pHQXFvNnNCUmI1
ZmtCaThkYmxTcG9Sbm9XWk5SYzI5RGp6WHJKbGE0V2ZtTVJuMi9BYzhuSU16VWF1N3hCdDNuMWt4
dlVrN2ZVajY3YzdTNHZHNVViNTE0Nm5XMlJQbWFYcDhqMVN5TzJiOGdlNSs0c1BobFF2bTRndmV5
endXOTk1MnhKYzhYUDRwbmQ3MmRPY1hwNkMzMFJ0NERjczN5VnlQUHhZL3pBT1Z6RDdhbjNwVVBR
V3pxZHdHemRTaWpLTVNVUFQxaWUvTDdPUTg3REtmeGhBL3hhVjFUdHE5K0wwK0JWN2VLNTZGUW1U
RkQyTXhkekd2Q2R2b3RtMzZFT3dlZTNNUUhsRHQwYzBtaVYzNDBPYTFNcSt3SjVyaVNXNFpPM3Y3
WGI0cDR5bUs3SG5PM3JyNTNPcklTUGRQRTZpbi8rdzc2Z2I2djdGTCtmWGpkMnBNb0lKZVpCNk9h
VEozTVFlTWdWa3hLNCtqZk9ZRzNwVjVXbTVrdmozVHhSbUFpMElUVSt6VTFzaVc4V1BNMDdNT0ZN
ZGdXUjVRbnN3aFJpYm80UVViNDN1eWViaWc2M3A3MFNkQjg4U1dWYUF5VFdyL2F4cnJZNlNuZGFw
QmlTUldlNHdJdWFaZU85ZWxHdzBBZFZNLytWZU4vdWxkVEdkUzYyYXRMZTJlZ3JnSkpJTUc0a3p6
c2JzQm9BYmlHTWtydGtqQlFuak5GSStoOGtacVNvZm5nSG1MMVZMejlGd1BGSStlMmhYMGVoZHQr
SkpIZjFwZXFKQzRtU2U3b3Q2c0c3SWdEUUExUUVmc3RSNGduVFVSbUNmdDlYbFl6WjJLTWllaGxt
YkRyblA1Z2llYzZJTW1teEVFSmZKN0pYT2xUSytQR3g4OFlXTVlxRzZUZEQyaVBkVWFkc3Jzcmwy
eUFxQldkSFhSeU5XTE5VcEFtWjZKQ1pRSVFQSHVqNCtIT1o4TFZINHVXOWNzZ3RVNitEWUExSjU4
U0RIUmNIQ2lNb1dteDBJVC9PRWlsTnBHSHVEc2tWYUV6YnNPak9ueVpYclVGSmR2MkVMcERjd3c5
VEV1bjY0ekNMQXZGUzJtMEV6RlJvcFFXcEZyWklwbWVBODRWaDRvTHhDbjZjakU2MHB6blhFRERo
dERKVnQxQ2xCQmU0NFJZZFVHcTAxVHRVRzBiVU1jSGJ5eTc1akQ1UzkrTUgra2dZcDd1T2wweFhI
ajFySFJwMUFDYWl6S1Y2MS9kWlF2ME9rTGF2Ukt3Rk1JT2tVWm9PS0FVdFZDZWJmUWg1L1l3SE8r
VThaUXo2RjVxSHo5R1YvUjlKeEw4MUNCVGdmcU02dmIrYnZaTEtVeDFDUE03WGsyUHlWQWtTditz
ODNXMDZkUUJlb1pUZ2VieUgvMUZ5WlhZeXpEbVJKdG5UcUhzTjN5NE5ERThTb2w5QjRwN3E2aWNK
NVBwcnQ2L2h1Tmp0dmczdTBqSmE5TDhZOGZTM2phVUtIcEs0NEIxUnJFUjVOdDZQSE9ONWIycEx5
N0RmZC8zaXdUdFRERDhsNlQrTkJmVmJiazhRT29nOFY1ZXF2RGd3TXlwNHB1SDgvRHo5em9nbmtv
WGFjM3NadHY3U3lndW8zVWVsU3l1OFdXK1RDZ1BrVFgzSXYyQkpmaTFVWERzVGFIL0pwMmFwMGV4
YVZHY1ZXTG5KbHFJL1BiRDU5NHFVbXpydkRGUlc2ZUNCdCtRcWFTNm5hSmJpUUJlbGUxS09tbElt
REtsQmgydGYrS3c0elFleXRHcVoxTkJsTkNZbEFnM29PbVR5VWVMcGtMR00xbGc5dm5aN2Y2aW5w
OC8wTnBwNlI5UWllS0hUeTkrQ0lvOFBvZ3FCV2xVclFvNmVUQWdLYXptdzlCVnhFbEFiTG5sckZI
TUV6UWU2dVVyY2ZHYUl3ajJwaVNiRmVmRndTZG90YktFQ202c09jbUpxUHZ6Y1BHeGF1QWlGR0NW
WUkrZzhqdW1MazNtYUpwYXY5MXdIcGJDTHFtaUN4dGpBS092SC94K3Ftenp3bUNMaUVSYzRodEU4
WDB5RVVFUkJEVVZmdGJoRlErMVFwRUNJSWdDSUlnQ0lJZ0NJSWdDSUlnQ0lLZzk5YXZicGZkZUFw
bGJtUnpkSEpsWVcwS1pXNWtiMkpxQ2pVd0lEQWdiMkpxQ2p3OEwweGxibWQwYUNBeU5UazJMMDRn
TXk5R2FXeDBaWEl2Um14aGRHVkVaV052WkdVK1BuTjBjbVZoYlFwNG5KMldkMVJUMlJhSHo3MDN2
VkNTRUlxVTBHdG9VZ0pJRGIxSWtTNHFNUWtRU3NDUUFDSTJSRlJ3UkZHUnBnZ3lLT0NBbzBPUnNT
S0toUUZSc2VzRUdVVFVjWEFVRzVaSlpLMFozN3g1NzgyYjN4LzNmbXVmdmMvZForOTkxcm9Ba1B5
REJjSk1XQW1BREtGWUZPSG54WWlOaTJkZ0J3RU04QUFEYkFEZ2NMT3pRaGI0UmdLWkFuellqR3la
RS9nWHZib09JUG43S3RNL2pNRUEvNStVdVZraU1RQlFtSXpuOHZqWlhCa1h5VGc5VjV3bHQwL0pt
TFkwVGM0d1NzNGlXWUl5VnBOejhpeGJmUGFaWlE4NTh6S0VQQm5MYzg3aVpmRGszQ2ZqalRrU3Zv
eVJZQmtYNXdqNHVUSytKbU9EZEVtR1FNWnY1TEVaZkU0MkFDaVMzQzdtYzFOa2JDMWpraWd5Z2kz
amVRRGdTTWxmOE5JdldNelBFOHNQeGM3TVdpNFNKS2VJR1NaY1U0YU5reE9MNGMvUFRlZUx4Y3d3
RGplTkkrSXgySmtaV1J6aGNnQm16L3haRkhsdEdiSWlPOWc0T1Rnd2JTMXR2aWpVZjEzOG01TDNk
cFplaEgvdUdVUWYrTVAyVjM2WkRRQ3dwbVcxMmZxSGJXa1ZBRjNyQVZDNy9ZZk5ZQzhBaXJLK2RR
NTljUjY2ZkY1U3hPSXNaeXVyM054Y1N3R2ZheWt2Nk8vNm53NS9RMTk4ejFLKzNlL2xZWGp6a3pp
U2RERkRYamR1Wm5xbVJNVEl6dUp3K1F6bW40ZjRId2YrZFI0V0Vmd2t2b2d2bEVWRXk2Wk1JRXlX
dFZ2SUU0Z0ZtVUtHUVBpZm12Z1B3LzZrMmJtV2lkcjRFZENXV0FLbElScEFmaDRBS0NvUklBbDda
Q3ZRNzMwTHhrY0QrYzJMMFptWW5mdlBndjU5VjdoTS9zZ1dKSCtPWTBkRU1yZ1NVYzdzbXZ4YUFq
UWdBRVZBQStwQUcrZ0RFOEFFdHNBUnVBQVA0QU1DUVNpSUJIRmdNZUNDRkpBQlJDQVhGSUMxb0Jp
VWdxMWdKNmdHZGFBUk5JTTJjQmgwZ1dQZ05EZ0hMb0hMWUFUY0FWSXdEcDZBS2ZBS3pFQVFoSVhJ
RUJWU2gzUWdROGdjc29WWWtCdmtBd1ZERVZBY2xBZ2xRMEpJQWhWQTY2QlNxQnlxaHVxaFp1aGI2
Q2gwR3JvQURVTzNvRkZvRXZvVmVnY2pNQW1td1Zxd0VXd0ZzMkJQT0FpT2hCZkJ5ZkF5T0I4dWdy
ZkFsWEFEZkJEdWhFL0RsK0FSV0FvL2dhY1JnQkFST3FLTE1CRVd3a1pDa1hna0NSRWhxNUFTcEFK
cFFOcVFIcVFmdVlwSWthZklXeFFHUlVVeFVFeVVDOG9mRllYaW9wYWhWcUUybzZwUkIxQ2RxRDdV
VmRRb2FncjFFVTFHYTZMTjBjN29BSFFzT2htZGl5NUdWNkNiMEIzb3MrZ1I5RGo2RlFhRG9XT01N
WTRZZjB3Y0poV3pBck1ac3h2VGpqbUZHY2FNWWFheFdLdzYxaHpyaWczRmNyQmliREcyQ25zUWV4
SjdCVHVPZllNajRuUnd0amhmWER4T2lDdkVWZUJhY0Nkd1YzQVR1Qm04RXQ0UTc0d1B4ZlB3eS9G
bCtFWjhEMzRJUDQ2ZklTZ1RqQW11aEVoQ0ttRXRvWkxRUmpoTHVFdDRRU1FTOVloT3hIQ2lnTGlH
V0VrOFJEeFBIQ1crSlZGSVppUTJLWUVrSVcwaDdTZWRJdDBpdlNDVHlVWmtEM0k4V1V6ZVFtNG1u
eUhmSjc5Um9DcFlLZ1FvOEJSV0s5UW9kQ3BjVVhpbWlGYzBWUFJVWEt5WXIxaWhlRVJ4U1BHcEVs
N0pTSW10eEZGYXBWU2pkRlRwaHRLME1sWFpSamxVT1VONXMzS0w4Z1hsUnhRc3hZamlRK0ZSaWlq
N0tHY29ZMVNFcWs5bFU3blVkZFJHNmxucU9BMURNNllGMEZKcHBiUnZhSU8wS1JXS2lwMUt0RXFl
U28zS2NSVXBIYUViMFFQbzZmUXkrbUg2ZGZvN1ZTMVZUMVcrNmliVk50VXJxcS9WNXFoNXFQSFZT
dFRhMVViVTNxa3oxSDNVMDlTM3FYZXAzOU5BYVpocGhHdmthdXpST0t2eGRBNXRqc3NjN3B5U09Z
Zm4zTmFFTmMwMEl6UlhhTzdUSE5DYzF0TFc4dFBLMHFyU09xUDFWSnV1N2FHZHFyMUQrNFQycEE1
VngwMUhvTE5ENTZUT1k0WUt3NU9SenFoazlER21kRFYxL1hVbHV2VzZnN296ZXNaNlVYcUZldTE2
OS9RSitpejlKUDBkK3IzNlV3WTZCaUVHQlFhdEJyY044WVlzd3hURFhZYjlocStOakkxaWpEWVlk
Ums5TWxZekRqRE9OMjQxdm10Q05uRTNXV2JTWUhMTkZHUEtNazB6M1cxNjJRdzJzemRMTWFzeEd6
S0h6UjNNQmVhN3pZY3QwQlpPRmtLTEJvc2JUQkxUazVuRGJHV09XdEl0Z3kwTExic3NuMWtaV01W
YmJiUHF0L3BvYlcrZGJ0MW9mY2VHWWhOb1UyalRZL09yclprdDE3Ykc5dHBjOGx6ZnVhdm5kczk5
Ym1kdXg3ZmJZM2ZUbm1vZllyL0J2dGYrZzRPamc4aWh6V0hTMGNBeDBiSFc4UWFMeGdwamJXYWRk
MEk3ZVRtdGRqcm05TmJad1Zuc2ZOajVGeGVtUzVwTGk4dWplY2J6K1BNYTU0MjU2cmx5WE90ZHBX
NE10MFMzdlc1U2QxMTNqbnVEK3dNUGZRK2VSNVBIaEtlcFo2cm5RYzluWHRaZUlxOE9yOWRzWi9a
SzlpbHZ4TnZQdThSNzBJZmlFK1ZUN1hQZlY4ODMyYmZWZDhyUDNtK0YzeWwvdEgrUS96Yi9Hd0Zh
QWR5QTVvQ3BRTWZBbFlGOVFhU2dCVUhWUVErQ3pZSkZ3VDBoY0VoZ3lQYVF1L01ONXd2bmQ0V0Mw
SURRN2FIM3dvekRsb1Y5SDQ0SkR3dXZDWDhZWVJOUkVORy9nTHBneVlLV0JhOGl2U0xMSXU5RW1V
UkpvbnFqRmFNVG9wdWpYOGQ0eDVUSFNHT3RZbGZHWG9yVGlCUEVkY2RqNDZQam0rS25GL29zM0xs
d1BNRStvVGpoK2lMalJYbUxMaXpXV0p5KytQZ1N4U1djSlVjUzBZa3hpUzJKN3ptaG5BYk85TktB
cGJWTHA3aHM3aTd1RTU0SGJ3ZHZrdS9LTCtkUEpMa21sU2M5U25aTjNwNDhtZUtlVXBIeVZNQVdW
QXVlcC9xbjFxVytUZ3ROMjUvMktUMG12VDBEbDVHWWNWUklFYVlKK3pLMU0vTXloN1BNczRxenBN
dWNsKzFjTmlVS0VqVmxROW1Mc3J2Rk5OblAxSURFUkxKZU1wcmpsbE9UOHlZM092ZElubktlTUc5
Z3VkbnlUY3NuOG4zenYxNkJXc0ZkMFZ1Z1c3QzJZSFNsNThyNlZkQ3FwYXQ2Vit1dkxsbzl2c1p2
ellHMWhMVnBhMzhvdEM0c0wzeTVMbVpkVDVGVzBacWlzZlYrNjF1TEZZcEZ4VGMydUd5bzI0amFL
Tmc0dUdudXBxcE5IMHQ0SlJkTHJVc3JTdDl2NW02KytKWE5WNVZmZmRxU3RHV3d6S0ZzejFiTVZ1
SFc2OXZjdHgwb1Z5N1BMeC9iSHJLOWN3ZGpSOG1PbHp1WDdMeFFZVmRSdDR1d1M3SkxXaGxjMlYx
bFVMVzE2bjExU3ZWSWpWZE5lNjFtN2FiYTE3dDV1Ni9zOGRqVFZxZFZWMXIzYnE5Zzc4MTZ2L3JP
QnFPR2luMllmVG43SGpaR04vWi96ZnE2dVVtanFiVHB3MzdoZnVtQmlBTjl6WTdOelMyYUxXV3Rj
S3VrZGZKZ3dzSEwzM2gvMDkzR2JLdHZwN2VYSGdLSEpJY2VmNXY0N2ZYRFFZZDdqN0NPdEgxbitG
MXRCN1dqcEJQcVhONDUxWlhTSmUyTzZ4NCtHbmkwdDhlbHArTjd5Ky8zSDlNOVZuTmM1WGpaQ2NL
Sm9oT2ZUdWFmbkQ2VmRlcnA2ZVRUWTcxTGV1K2NpVDF6clMrOGIvQnMwTm56NTN6UG5lbjM3RDk1
M3ZYOHNRdk9GNDVlWkYzc3V1UndxWFBBZnFEakIvc2ZPZ1lkQmp1SEhJZTZMenRkN2htZU4zemlp
dnVWMDFlOXI1NjdGbkR0MHNqOGtlSHJVZGR2M2tpNEliM0p1L25vVnZxdDU3ZHpicy9jV1hNWGZi
ZmtudEs5aXZ1YTl4dCtOUDJ4WGVvZ1BUN3FQVHJ3WU1HRE8yUGNzU2MvWmYvMGZyem9JZmxoeFlU
T1JQTWoyMGZISm4wbkx6OWUrSGo4U2RhVG1hZkZQeXYvWFB2TTVObDN2M2o4TWpBVk96WCtYUFQ4
MDYrYlg2aS8yUC9TN21YdmROajAvVmNacjJaZWw3eFJmM1BnTGV0dC83dVlkeE16dWUreDd5cy9t
SDdvK1JqMDhlNm5qRStmZmdQM2hQUDdDbVZ1WkhOMGNtVmhiUXBsYm1Sdlltb0tOVEVnTUNCdllt
b0tQRHd2Vkhsd1pTOURZWFJoYkc5bkwxQmhaMlZ6SURFMElEQWdVajQrQ21WdVpHOWlhZ28xTWlB
d0lHOWlhZ284UEM5RGNtVmhkRzl5S0ZGMVpYTjBJRVJwWVdkdWIzTjBhV056SUZKbGNHOXlkR2x1
WnlCVFpYSjJhV05sY3lrdlVISnZaSFZqWlhJb2FWUmxlSFFnTWk0eExqUWdYQ2hpZVNCc2IzZGha
MmxsTG1OdmJWd3BLUzlUZFdKcVpXTjBLRkJoZEdsbGJuUWdVbVZ3YjNKMGN5a3ZUVzlrUkdGMFpT
aEVPakl3TVRjd05URXhNVFF5T1RNNUxUQTBKekF3SnlrdlFYVjBhRzl5S0ZGMVpYTjBJRVJwWVdk
dWIzTjBhV056SUVsdVkyOXljRzl5WVhSbFpDa3ZRM0psWVhScGIyNUVZWFJsS0VRNk1qQXhOekEx
TVRFeE5ESTVNemt0TURRbk1EQW5LVDQrQ21WdVpHOWlhZ295SURBZ2IySnFDanc4TDFSNWNHVXZU
MkpxVTNSdEwwNGdNamd2VEdWdVozUm9JRFkxTUM5R2FYSnpkQ0F5TVRBdlJtbHNkR1Z5TDBac1lY
UmxSR1ZqYjJSbFBqNXpkSEpsWVcwS2VKenRWbTF2MmpBUS9pdjNCeXEvblJOSHFwQVdPalkwYlVP
QXRFcUlEMm53cWt5UVZFbVl1bisvYzV5Z0RrcFZDbFNydGsvbmMrem43am5mNDFnQUI2RWcxQ0FW
S0tOQmhLQlZCTUtBMWdaRUJBRjVra01vRWFRQXcwT1FFb3dKUUNCRWdRRkplN2lpelNFQklRY2w2
RXRFdmdTaGhRVDZKTFR6RVVRUVJxQmNqSURtQ2NHZ0FFazJvdURTQVNzTzBrRXFBMGhoRFFhQXRK
VnpEb2hrS1IvVUZNTDVBVmxLR0VNS1JYbWdvVkRrWEY2eU9LbnNvTWhyTnMxV3Ryb1lGNnNrWjlO
ZmQ1WTFzKy96dEZoaytTMzdsdVh2OGlyYitKUDFUZTFXdWFXaTEzTlFvNlMwZWUyNGNoaXpQbTBu
dDVvSjRYd2k1bzEwWnU1RGpKSmJ5OGEyS3RabGFpdUN1UDU2ODhPbU5ZMkdLNnBONE5iMmVteFVG
dW5FMWpCam82c0JzS205cjRGVzBPNjR0ZjNXRHVjVWVGbVVrN3NrdFFSelpiOG42MlU5L2hDNzAv
Sm9qaGg5R2doM2NpN1ZBYVZJMVdxRzJoMWdNNHJjR1RhajVoamQ2RHFqRHZBb2hETXRzMVZjM00v
YytvQjRoWkdjczg5MmtTVTdzL0hTMnNYMnJLL2EwNVFieGkzVmxtbEQvNXcwSFRrcTliRGZkODJ4
QU5rYzZQeVBidmxvbHo5dG5hWEp3YjNDdmlRcjJ0RDJ6QWF3VHoyUTJmSWlMcGFMRjJOdWd4N1Qw
eTJtZmp6UGw4SkZqMlo0RE9uUUkyNzBWTGtVU1lhYWZjb1dwRDdWeUU1NjljbkFtOUNicGkvbVQ2
cTNYZG0wRFpqbmExZnhVMnBYaVoybVZsNlNBK1Z1emJhbkZYWTlyWFRYMHlwb3BTdk9MTjF0eG9k
TDkyaVcyOHBWNWhXVXV3RThxbzNWdnl2ZFBjcnppbFZlZWNGYlZwNDh1ZkwybE16WENybC9hZkMz
WERQMVdqWHovd2YwanpSOGZzbFFuckprcUhaS2hyaDV0YUR1YW9aZGZSQkVWejBNdStxaE9lc052
MDM1OEJ2K1FKcDd5RDI4NGpYLy96ajd1Mi80M3lKVUxvNEtaVzVrYzNSeVpXRnRDbVZ1Wkc5aWFn
bzFNeUF3SUc5aWFnbzhQQzlVZVhCbEwxaFNaV1l2VjFzeElESWdNbDB2VW05dmRDQTFNU0F3SUZJ
dlNXNWtaWGhiTUNBMU5GMHZTVVFnV3p4bVpXTXdNVE5qTmpVNFpUazVZakF4T0RBek56YzRNV1Zs
WkdaaU1XRmpNajQ4WkRjMFpUWXlabUl4TjJWbFl6SXlaall6T1Rrek9UVTJOVEJpTmpZMU1tVStY
UzlNWlc1bmRHZ2dNVFl3TDBsdVptOGdOVElnTUNCU0wxTnBlbVVnTlRRdlJtbHNkR1Z5TDBac1lY
UmxSR1ZqYjJSbFBqNXpkSEpsWVcwS2VKd2x6RHNTQVZFUWhlSHVPK00xSHNONFB5SUpxUVhJWkdL
UlphaENSaWlWcUpLUnFCSUliY0E2YkVHa3hLUC91aDE4d2VuVExTSnA2c1NKNlBWc1NBeExlQnM2
aGp2OERMZUdseEhNNENqQ3JVSkJ3OFN5eXNObkFZU1FnU3prSUE5T0IwL2ZpeUNCT2pSME5MUXYw
NjNmbHFBTUZZaWhDalVvNm54djVjWEhXRTJNM2RjNE9IL2Jnalowb0FzOTZFTlRUNUdWTHh1NGla
OC9tVjBVcXdwbGJtUnpkSEpsWVcwS1pXNWtiMkpxQ25OMFlYSjBlSEpsWmdvME1qRXhNd29sSlVW
UFJnbz18fHx8fHxGfHx8fHx8fHx8fHx8UVVFU1QgRElBR05PU1RJQ1MtV0VTVCBISUxMU15eXl5e
XkZJXkNMSUFeXjA1RDA2NDI4Mjd8ODQwMSBGQUxMQlJPT0sgQVZFTlVFXl5XRVNUIEhJTExTXkNB
XjkxMzA0LTMyMjZ8MTM2NjQ3OTA5OV5URVJSQVpBU15FTlJJUVVFXl5NRF5eXl5eXl5eTlBJXkVO
Cg==</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>HL7V2</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.4.2">
            <handleRepetitions>true</handleRepetitions>
            <handleSubcomponents>true</handleSubcomponents>
            <useStrictParser>true</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <stripNamespaces>true</stripNamespaces>
            <segmentDelimiter>\r</segmentDelimiter>
            <convertLineBreaks>true</convertLineBreaks>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.4.2">
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <segmentDelimiter>\r</segmentDelimiter>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.4.2">
            <splitType>MSH_Segment</splitType>
            <batchScript></batchScript>
          </batchProperties>
          <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.4.2">
            <segmentDelimiter>\r</segmentDelimiter>
            <successfulACKCode>AA</successfulACKCode>
            <successfulACKMessage></successfulACKMessage>
            <errorACKCode>AE</errorACKCode>
            <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
            <rejectedACKCode>AR</rejectedACKCode>
            <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
            <msh15ACKAccept>false</msh15ACKAccept>
            <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
          </responseGenerationProperties>
          <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.4.2">
            <successfulACKCode>AA,CA</successfulACKCode>
            <errorACKCode>AE,CE</errorACKCode>
            <rejectedACKCode>AR,CR</rejectedACKCode>
            <validateMessageControlId>true</validateMessageControlId>
            <originalMessageControlId>Destination_Encoded</originalMessageControlId>
            <originalIdMapVariable></originalIdMapVariable>
          </responseValidationProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.2">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.2">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.2">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.2">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.2">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.2">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules/>
      </filter>
      <transportName>Channel Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data

message = stripNonValidXMLChars(message);

return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data

globalMap.put(&quot;ORUProcessingChannelId&quot;, channelId);

return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.4.2">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>false</storeAttachments>
    <tags class="linked-hash-set">
      <string>CURRENT</string>
    </tags>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.4.2">
      <className>com.mirth.connect.server.attachments.javascript.JavaScriptAttachmentHandlerProvider</className>
      <type>JavaScript</type>
      <properties>
        <entry>
          <string>javascript.script</string>
          <string>// Modify the message variable below to create attachments

// Create Binary resourse with the original HL7v2 message
var resBinary = &lt;Binary&gt;				
				&lt;id value=&quot;&quot;/&gt;				
				&lt;contentType value=&quot;application/hl7-v2&quot;/&gt;
				&lt;content value=&quot;&quot;/&gt;
			&lt;/Binary&gt;;

// Encode original ORU message
var bytes = new java.lang.String(message.toString()).getBytes();
resBinary.content.@value = FileUtil.encode(bytes).replaceAll(&apos;\r\n|\r|\n&apos;, &apos;&apos;);

// Store to be processed by the FHIR_submit destination
globalChannelMap.put(&quot;Binary&quot;, resBinary.toString());


return message;</string>
        </entry>
      </properties>
    </attachmentProperties>
    <archiveEnabled>true</archiveEnabled>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <codeTemplateLibraries>
    <codeTemplateLibrary version="3.4.2">
      <id>aa9b2404-fbde-4bbe-851f-a0a19ca6ae36</id>
      <name>DEX Library</name>
      <revision>5</revision>
      <lastModified>
        <time>1493415645281</time>
        <timezone>UTC</timezone>
      </lastModified>
      <description>Last updated: March 25, 2017</description>
      <includeNewChannels>true</includeNewChannels>
      <enabledChannelIds>
        <string>b73a73d9-b589-4dd7-8a5b-d24fe9ed522d</string>
        <string>afa52ba3-bd0a-4634-8ae5-b9c91c4dc3b9</string>
        <string>9eeed45d-4613-4501-86f1-236e91808742</string>
        <string>4c7bc0bd-aede-4e90-9ce8-cde50750f1e8</string>
        <string>041540bc-16e7-43fe-a9eb-1ca3c5ea17db</string>
        <string>ae149084-1aaa-4867-a7e3-b66860874f05</string>
        <string>829fe0c9-9229-4cb3-9cc3-1250213f284f</string>
        <string>e0f422e1-0550-40f1-8a37-e148e0b5f636</string>
      </enabledChannelIds>
      <disabledChannelIds>
        <string>f24a2bfd-8f45-4170-b6d6-6410f426ec66</string>
      </disabledChannelIds>
      <codeTemplates>
        <codeTemplate version="3.4.2">
          <id>5e2f9cc3-3b23-4967-9fd1-6a9c602dd29e</id>
          <name>Convert FHIR to HL7v2 code</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077779</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Converts FHIR code to HL7v2 code as defined by the conversion table according to the HL7v2 specification

	@param {String} table - HL7v2 Table code as per specification
	@param {String] value - value to convert
	@return {String} return code according to conversion table
*/
function convertTable(table, value) {

	switch(table) {
		
		// Table 0001 - Administrative Sex
		case &quot;0001&quot;:
			if (value.toString() == &quot;male&quot;) return &quot;M&quot;
			else if (value.toString() == &quot;female&quot;) return &quot;F&quot;
			else if (value.toString() == &quot;other&quot;) return &quot;O&quot;
			else return &quot;U&quot;;
			break;
	}

	return &quot;&quot;;
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>025ece06-d4ad-47d7-8047-67acaf3072a5</id>
          <name>Convert HL7 Date Time</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077689</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Converts date, time and time zone from HL7v2 to ISO 8601 (JSON) format.
	Possible input string format: yyyymmddhhmm[ss[.s[s[s[s]]]]][+/-zzzz]

	@param {String} date - datetime to be converted
	@return {String} return JSON representation of the datetime
*/
function convertHL7DateTime(datetime) {

/*
	Format: yyyymmddhhmm[ss[.s[s[s[s]]]]][+/-zzzz]
	The date and time elements are populated as follows:
	yyyy = Required
	mm = Required if yyyy is not 0000.
	dd = Required if yyyy is not 0000.
	hh = Required if yyyy is not 0000.
	mm = Required if yyyy is not 0000.
	[ss[.s[s[s[s]]]]] = Conditional. Optional if yyyy is not 0000.
	[+/-zzzz] = Optional
*/


	if (datetime == null || datetime.length == 0 || typeof datetime === &quot;undefined&quot;) return &quot;&quot;;

	try {
		var strDateTime = new Packages.java.lang.StringBuffer(datetime.toString());
	
		// Extract time zone
		var index;
		var symbol;
		var timeZone;
		
		if (strDateTime.indexOf(&quot;-&quot;) &gt; 0) {
			index = strDateTime.indexOf(&quot;-&quot;);
		} else if (strDateTime.indexOf(&quot;+&quot;) &gt; 0) {
			index = strDateTime.indexOf(&quot;+&quot;);
		} else
			index = -1;
	
		if (index &gt; 0) {		
			symbol = strDateTime.substring(index, index+1);
			timeZone = new Packages.java.lang.StringBuffer(strDateTime.substring(index+1));
			if (timeZone.length() &gt; 2)
				timeZone.insert(2,&quot;:&quot;);
			strDateTime.delete(index, strDateTime.length());		
		} else {
			symbol = &quot;&quot;;
			timeZone = &quot;&quot;;
		}
	
		// Extract decimal fraction of a second
		var fraction = strDateTime.indexOf(&quot;.&quot;);
		var milliseconds;
		if (fraction &gt; 0) {
			milliseconds = strDateTime.substring(fraction, strDateTime.length());
			strDateTime.delete(fraction, strDateTime.length());
		} else {
			milliseconds = &quot;&quot;;
		}
	
		// Convert the main part
		var jsonDateTime = new Packages.java.lang.StringBuffer(strDateTime);
		
		// yyyyMMdd
		if (strDateTime.length() &gt;= &quot;yyyyMMdd&quot;.length) {
			jsonDateTime.insert(4,&quot;-&quot;);
			jsonDateTime.insert(7,&quot;-&quot;);
		}
	
		// yyyyMMddhh
		if (strDateTime.length() &gt;= &quot;yyyyMMddhh&quot;.length) {
			jsonDateTime.insert(10,&quot;T&quot;);
		}
	
		// yyyyMMddhhmm
		if (strDateTime.length() &gt;= &quot;yyyyMMddhhmm&quot;.length) {
			jsonDateTime.insert(13,&quot;:&quot;);
			
		}
		
		// yyyymmddhhmmss
		if (strDateTime.length() &gt;= &quot;yyyymmddhhmmss&quot;.length) {
			jsonDateTime.insert(16,&quot;:&quot;);		
		}
	
	} catch(ex) {
		jsonDateTime = &quot;0000-00-00&quot;
		milliseconds = &quot;&quot;;
		symbol = &quot;&quot;;
		timeZone = &quot;&quot;;
		logger.error(&quot;convertHL7DateTime(&quot; + datetime + &quot;) exception: &quot; + ex);	
	} finally {
		return jsonDateTime.toString() + milliseconds.toString() + symbol.toString() + timeZone.toString();
	}
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>3d9a32c6-2d37-49d2-afe4-e309356085b7</id>
          <name>Convert JSON Date Time</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609078075</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Converts date, time and time zone from ISO 8601 (JSON) to HL7v2 format.
	Possible input string format: yyyy-mm-ddThh:mm:ss.nnnnnn+|-hh:mm

	@param {String} date - datetime to be converted
	@return {String} return HL7v2 representation of the datetime
*/
function convertJSONDateTime(datetime) {

/*
	Format: yyyy-mm-dd[Thh:mm[:ss[.nnnnnn[+|-hh:mm]]]]
*/

	var date;
	var time;
	
	var arrDateTime = datetime.split(&quot;T&quot;);
	
	if (arrDateTime.length == 1) {
		date = arrDateTime[0];
		time = &quot;&quot;;
	} else if (arrDateTime.length == 2) {
		date = arrDateTime[0];
		time = arrDateTime[1];
	} else 
		return &quot;&quot;;

	date = date.replace(/\-/g, &quot;&quot;);
	time = time.replace(/\:/g, &quot;&quot;);

	return date + time;

}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>a758235b-06a9-4c9d-8256-e9cd70d38bb1</id>
          <name>Convert Phone</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077936</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Inserts hyphens into the phone number if it is 7 digits in length

	@param {String} phone - initial string to convert
	@return {String} return phone number
*/
function convertPhone(phone) {

	try {
		var strPhone = new Packages.java.lang.StringBuffer(phone.toString());	
		
		if (strPhone.length() == 7) {			
			strPhone.insert(3,&quot;-&quot;);
			strPhone.insert(6,&quot;-&quot;);
			return strPhone.toString();			
		} else 
			return phone.toString();
		
	} catch(ex) {
		return phone.toString();		
	} 
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>dc6049ce-02d8-4022-b10e-6bc9978ab3bd</id>
          <name>Convert XML to JSON</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077867</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Converts a string in XML format into its JSON representation.
	This function requires org.json.jar to be deployed to the /custom-lib folder on Mirth

	@param {String} input - A string in XML format
	@return {String} return a string representing initial XML feed but in JSON format
*/
function convertXMLtoJSON(input) {
	var strJSON = Packages.org.json.XML.toJSONObject(input.toString());
	return strJSON.toString(2);	
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>2f174050-3927-4c30-a984-26c98e29bd61</id>
          <name>Converts Administrative Gender</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609078148</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Verifies and converts HL7v2 administrative gender value to FHIR value set defined by
	http://hl7.org/fhir/administrative-gender
	
	@param {String} code - HL7v2 PID.8 [Administrative Sex] code
	@return {String} return FHIR value set code
*/
function getGenderValue(code) {

	var gender;

	switch(code) {
		case &quot;M&quot;:
			gender = &quot;male&quot;;
			break;
		case &quot;F&quot;:
			gender = &quot;female&quot;;
		 	break;
		case &quot;O&quot;:
		case &quot;A&quot;:
		case &quot;N&quot;:
			gender = &quot;other&quot;;
			break; 	
		default:
			gender = &quot;unknown&quot;;		 	
	}

	return gender;	
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>943f9793-83e0-403a-84e9-40ea3fcd92d6</id>
          <name>Converts Phone string to XTN</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609078031</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Converts phone number string with caret dividers into XTN data type.
	Supported formats: 1-314-8727127 or 314-8727127
	Returned formats: ^^PH^^1^314^8727127 or ^^PH^^^314^8727127 or ^^PH^^^^8727127

	@param {String} phone - Phone string in one of the supported format
	@return {String} return Phone string as per XTN data type
*/
function convertPhoneXTN(phone) {

	phone = phone.replace(/\+/g,&quot;&quot;);

	// XTN data type example: ^^PH^^^734^6777777

	//	    916-3000		\d{3}-\d{4}			^^PH^^^^9163000
	//	    9163000		\d{7}				^^PH^^^^9163000
	//   972-9163000		\d{3}-\d{7}			^^PH^^^972^9163000
	//   972-916-3000  		\d{3}-\d{3}-\d{4}		^^PH^^^972^9163000
	// 1-972-9163000 		\d{1}-\d{3}-\d{7}		^^PH^^1^972^9163000
	// 1-972-916-3000 		\d{1}-\d{3}-\d{3}-\d{4}	^^PH^^1^972^9163000

	var arrPhone = phone.split(&quot;-&quot;);
	if (arrPhone.length &lt;= 1) return &quot;^^^^^^^^&quot; + phone;

	// 1-972-9163000
	if (phone.match(/\d{1}-\d{3}-\d{7}/) != null) {
		// ^^PH^^1^734^6777777
		return &quot;^^PH^^&quot; + arrPhone[0] + &quot;^&quot; + arrPhone[1] + &quot;^&quot; + arrPhone[2];

	// 1-972-916-3000	
	} else if (phone.match(/\d{1}-\d{3}-\d{3}-\d{4}/) != null) {
		// ^^PH^^1^734^6777777
		return &quot;^^PH^^&quot; + arrPhone[0] + &quot;^&quot; + arrPhone[1] + &quot;^&quot; + arrPhone[2] + arrPhone[3];

	// 972-9163000	
	} else if (phone.match(/\d{3}-\d{7}/) != null) {
		// ^^PH^^^734^6777777
		return &quot;^^PH^^^&quot; + arrPhone[0] + &quot;^&quot; + arrPhone[1];

	// 972-916-3000
	} else if (phone.match(/\d{3}-\d{3}-\d{4}/) != null) {
		// ^^PH^^^972^9163000
		return &quot;^^PH^^^&quot; + arrPhone[0] + &quot;^&quot; + arrPhone[1] + arrPhone[2];

	// 9163000
	} else if (phone.match(/\d{7}/) != null) {
		// ^^PH^^^^9163000
		return &quot;^^PH^^^^&quot; + arrPhone[0];

	// 916-3000
	} else if (phone.match(/\d{3}-\d{4}/) != null) {
		// ^^PH^^^^9163000
		return &quot;^^PH^^^^&quot; + arrPhone[0] + arrPhone[1];
		
	} else
		return &quot;^^^^^^^^&quot; + phone; 

}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>58a19daa-aada-46ac-ae7f-2b5e5848405b</id>
          <name>Create OperationOutcome resource</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077663</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Creates OperationOutcome resource to inform about validation errors
	
	@param {Array} error - A list of errors or comments
	@param {Object} issue - An object with severity, code and details associated with outcome
	@param {Object} messages - An object with inbounb and outbound messages to be logged
	@param {String} uuid - A string with uuid to pair request and response FHIR feeds	
	@param {String} format - A resource output format (xml | json)	
	@return {String} outcome - OperationOutcome resource in required format
*/
function getOperationOutcome(error, issue, messages, uuid, format) {

	// Expected issue object format:
	// var issue = {severity: &quot;&quot;, code: &quot;&quot;, details: &quot;&quot;};

	// Expected messages object format:
	// var messages = {request: &quot;&quot;, resp: &quot;&quot;};

	// Namespaces are required to validate against FHIR XML Schema
	if (format.toUpperCase() != &quot;JSON&quot;) 
		default xml namespace = &quot;http://hl7.org/fhir&quot;;
		
	var outcome = &lt;OperationOutcome&gt;
				&lt;id value=&quot;responsestatus&quot;/&gt;
				&lt;extension url=&quot;request&quot;&gt;
					&lt;valueBase64Binary value=&quot;&quot;/&gt;
				&lt;/extension&gt;
				&lt;extension url=&quot;response&quot;&gt;
					&lt;valueBase64Binary value=&quot;&quot;/&gt;
				&lt;/extension&gt;
				&lt;issue&gt;
					&lt;severity value=&quot;&quot;/&gt;
					&lt;code value=&quot;&quot;/&gt;
					&lt;details&gt;
						&lt;text value=&quot;&quot;/&gt;
					&lt;/details&gt;
				&lt;/issue&gt;
			&lt;/OperationOutcome&gt;;

	if (uuid != null &amp;&amp; uuid != undefined &amp;&amp; uuid.toString() != &quot;&quot;) 
		outcome.id.@value = &quot;responsestatus&quot; + uuid;
		
	outcome.issue.severity.@value = issue.severity;
	outcome.issue.code.@value = issue.code;
	outcome.issue.details.text.@value = issue.details;

	// xhtml namespace is intentionally removed
	var text = &lt;text&gt;
			    	&lt;status value=&quot;generated&quot;/&gt;
			    	&lt;div/&gt;
			  &lt;/text&gt;;

	text.div.* = new XMLList();
	error.forEach(function(n){
	  text.div.* += new XML(&quot;&lt;p&gt;&quot; + n +&quot;&lt;/p&gt;&quot;);
	});

	outcome.id += text;

	// If request or response messages are available, encode them
	if (messages.request != undefined &amp;&amp; messages.request.toString() != &quot;&quot;) 
		outcome.extension.(@url == &quot;request&quot;)[0].valueBase64Binary.@value = getBase64Encoded(messages.request.toString());	
	else
		delete outcome.extension.(@url == &quot;request&quot;)[0];


	if (messages.resp != undefined &amp;&amp; messages.resp.toString() != &quot;&quot;) 	
		outcome.extension.(@url == &quot;response&quot;)[0].valueBase64Binary.@value = getBase64Encoded(messages.resp.toString());
	else
		delete outcome.extension.(@url == &quot;response&quot;)[0];

	// Convert to a requested format
	if (format.toUpperCase() == &quot;JSON&quot;) {
		return convertXMLtoJSON(outcome.toString());		
	} else {
		// Namespace is required to validate FHIR XML
		outcome = outcome.toString().replace(&apos;&lt;div&gt;&apos;, &apos;&lt;div  xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&apos;);
		return outcome.toString();
	}
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>52360391-d3f2-4714-8bd3-98c53c85c387</id>
          <name>Fix HL7v2 node order</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077814</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.
	@param {String} node - The node to be fixed
	@return {String} return - E4X node
*/
/*
	Author: Nick Rupley
	Date Modified: 4/18/2012
*/
function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

// Helper function for fixHL7NodeOrder
function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>711f9e92-9872-4718-83aa-f8e62e3885b2</id>
          <name>Get Base64 encoded string</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077840</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Encodes given string into a Base64 string.

	@param {String} strData - String to be encoded
	@return {String} return Base64 encoded string
*/
function getBase64Encoded(strData) {
	
	try {
		
		if (null == strData) strData = &apos;&apos;;
		var byteData = new Packages.java.lang.String(strData).getBytes();
		return FileUtil.encode(byteData).replaceAll(&apos;\r\n|\r|\n&apos;, &apos;&apos;);

	} catch(err) {
		logger.error(err);
		return &quot;&quot;;
	}
}
</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>872dae30-3381-458c-a4e5-4f412e21b1fa</id>
          <name>Get HL7v2 Code Description</name>
          <revision>1</revision>
          <lastModified>
            <time>1490476779449</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Retrieve code description for a given HL7v2 table (to be used for ORC, OBR and OBX segments)

	@param {String} table - HL7v2 Table code as per specification
	@param {String] value - value to convert
	@return {String} return code description
*/
function getHL7v2CodeDescription(table, value) {

	switch(table) {
		
		// Table 0038 - Order Status
		case &quot;0038&quot;:
			if (&quot;CM&quot; === value.toString()) return &quot;Order complete&quot;
			else if (&quot;IP&quot; === value.toString()) return &quot;Order incomplete, or contains pending items&quot;
			else if (&quot;CA&quot; === value.toString()) return &quot;Order was canceled&quot;
			else if (&quot;DC&quot; === value.toString()) return &quot;Order was discontinued&quot;
			else if (&quot;ER&quot; === value.toString()) return &quot;Error, order not found&quot;
			else if (&quot;HD&quot; === value.toString()) return &quot;Order is on hold&quot;
			else if (&quot;RP&quot; === value.toString()) return &quot;Order has been replaced&quot;
			else if (&quot;SC&quot; === value.toString()) return &quot;In process, scheduled&quot;
			else if (&quot;&quot; === value.toString()) return &quot;&quot;
			else return &quot;&quot;;
			break;

		// Table 0123 - Result Status
		case &quot;0123&quot;:
			if (&quot;F&quot; === value.toString()) return &quot;Final results&quot;
			else if (&quot;A&quot; === value.toString()) return &quot;Partial results&quot;
			else if (&quot;C&quot; === value.toString()) return &quot;Correction to results&quot;
			else if (&quot;I&quot; === value.toString()) return &quot;No results available. The specimen was received, but the procedure is incomplete.&quot;
			else if (&quot;O&quot; === value.toString()) return &quot;Specimen not yet received&quot;
			else if (&quot;P&quot; === value.toString()) return &quot;Preliminary results&quot;
			else if (&quot;R&quot; === value.toString()) return &quot;Results stored&quot;
			else if (&quot;S&quot; === value.toString()) return &quot;No results available. The procedure is scheduled, but has not been performed.&quot;
			else if (&quot;X&quot; === value.toString()) return &quot;No results available. The order was canceled.&quot;
			else return &quot;&quot;;		
			break;

		// Table 0085 - Observation Result Status
		case &quot;0085&quot;:
			if (&quot;F&quot; === value.toString()) return &quot;Final results; can only be changed with a corrected result.&quot;
			else if (&quot;D&quot; === value.toString()) return &quot;Deletes the OBX record&quot;
			else if (&quot;I&quot; === value.toString()) return &quot;Specimen in lab; results pending.&quot;
			else if (&quot;N&quot; === value.toString()) return &quot;Not asked; used to affirmatively document that the observation identified in the OBX was not sought when the universal service ID in OBR.04 implies that it would be sought.&quot;
			else if (&quot;O&quot; === value.toString()) return &quot;Order detail description only (no result)&quot;
			else if (&quot;P&quot; === value.toString()) return &quot;Preliminary results&quot;
			else if (&quot;R&quot; === value.toString()) return &quot;Results entered but not verified&quot;
			else if (&quot;X&quot; === value.toString()) return &quot;Results cannot be obtained for this observation&quot;
			else if (&quot;U&quot; === value.toString()) return &quot;Results status change to final without retransmitting results already sent as preliminary. For example, radiology changes status from preliminary to final.&quot;
			else if (&quot;W&quot; === value.toString()) return &quot;Post original as wrong. For example, transmitted for wrong patient.&quot;
			else return &quot;&quot;;
			break;
	}

	return &quot;&quot;;
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>53e03352-fda6-455a-bc6a-54f1b3287838</id>
          <name>Get NTE segment</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077721</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Builds NTE segment with the comment entry from a single /text/div/p resource element
	Expected comment entry object is {&quot;class&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;}

	// TODO: may require a flag to NOT restrict comment line longer than 60 chars as required for the Order message

	@param {String} entry - JSON object with comment entries
	@param {String} count - total NTE segment count i.e., NTE.1 [Set ID]	
	@return {String} return NTE segment string in XML format
*/
function getNTESegment(entry, count) {

	if (entry != undefined) {

		var nte = &lt;NTE&gt;
					&lt;NTE.1&gt;
						&lt;NTE.1.1&gt;&lt;/NTE.1.1&gt;
					&lt;/NTE.1&gt;
					&lt;NTE.2&gt;
						&lt;NTE.2.1&gt;&lt;/NTE.2.1&gt;
					&lt;/NTE.2&gt;
					&lt;NTE.3&gt;
						&lt;NTE.3.1&gt;&lt;/NTE.3.1&gt;
					&lt;/NTE.3&gt;
				&lt;/NTE&gt;;

		// NTE.1 [Set ID]		
		nte[&apos;NTE.1&apos;][&apos;NTE.1.1&apos;] = count;
			
		// NTE.2 [Source of Comment]
		nte[&apos;NTE.2&apos;][&apos;NTE.2.1&apos;] = entry.class.toString();

		// NTE.3 [Comment]
		// Comment shall be no longer than 60 characters for the OML_O21 Submit Order message
		if (entry.content.toString().length &gt; 60)
			entry.content = entry.content.toString().substring(0,60);
			
		nte[&apos;NTE.3&apos;][&apos;NTE.3.1&apos;] = entry.content.toString();

		return nte.toString();
		
	} else 
		return &quot;&quot;;
		
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>0f2c8346-d098-49b3-8e97-184eef9fc7b4</id>
          <name>HTTP Response Code indications</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077971</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Add the HTTP response status code description to the HTTP code

	@param {Integer} code - HTTP response status code
	@return {String} return HTTP response status code and its description
*/
function getHttpCodeDescription(code) {

	var text;
	
	switch(code) {
		case 200:
			text = &quot;OK&quot;;
			break;
		case 400:
			text = &quot;The request was not properly constructed&quot;;
			break;
		case 401:
			text = &quot;The user credentials submitted are not authorized&quot;;
			break;
		case 403:
			text = &quot;The user name submitted does not have permission to access the Results RESTful web service&quot;;
			break;
		case 404:
			text = &quot;The user credentials submitted are not authorized&quot;;
			break;
		case 500:
			text = &quot;An internal server error occurred&quot;;
			break;	        
		default:
			text = &quot;This response status code is undefined in the DEX spec&quot;;
	}

	return (code + &quot; - &quot; + text);
	
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>5032a64e-7da6-4885-83e2-348e5ab75600</id>
          <name>Parse person&apos;s name node</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077624</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Process Person.name element with zero or multiple given names with possible DEX name length limitation

	@param {Object} item - JSON representation of /resource/Person/name node
	@param {Boolean} lengthLimit - If person&apos;s name limitation applies according to DEX spec (true - apply, false - does not)	
	@return {Object} return name parts object with family and given names
*/
function processPersonName(item, lengthLimit) {

	var nameParts = {family: &quot;&quot;, given1: &quot;&quot;, given2: &quot;&quot;};

	if (item.family != null &amp;&amp; item.family != undefined) {
		
		// Last name of the person
		var family = item.family.value.toString();
		
		// If Quest&apos;s length limit applies
		if (lengthLimit) {
			// The last name can be a maximum of 20 characters. (p.201)
			if (family.length &gt; 20) 
				family = family.substring(0, 20);
			// The entire patient name cannot exceed 24 characters (p.201)
			var limit = 24 - family.length;
		}
		nameParts.family = family;
	}

	if (item.given == null || item.given == undefined) return nameParts;
		
	if (item.given.length != undefined) {
		
		var count = 0;
		item.given.forEach(function(entry){
			var given = entry.value.toString();
			
			if (given.length &gt; 0) {					
				if (0 == count) {
					// The first name is limited to the difference between the number of characters in the last name and 24.				
					if (given.length &gt; limit &amp;&amp; lengthLimit) given = given.substring(0, limit);
					nameParts.given1 = given;
					limit -= given.length;
				} else {
					// if the limit is exceeded, a minimum of the first character of the middle initial is always returned in the result message.
					if (given.length &gt; limit &amp;&amp; lengthLimit) given = given.substring(0, 1);
					nameParts.given2 = given;
				}
			}
			count++;
		});			
	} else {
		var given = item.given.value.toString();
		if (given.length &gt; limit &amp;&amp; lengthLimit) given = given.substring(0, limit);
		nameParts.given1 = given;
	}

	return nameParts;
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>08f30179-5465-4895-a2d3-4933f182035e</id>
          <name>Remove illegal XML chanracters</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609078114</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Strip non valid XML characters from a given text string.
	CAUTION: This is not a full-fledged function for XML input sanitization 

	@param {String} text - text string that may contain illegal XML characters
	@return {String} return text string with illegal XML characters replaced
*/
function stripNonValidXMLChars(text) {

	if (text == null || text == undefined || text.toString().length == 0) return &quot;&quot;;

	//text = comment.replace(/&amp;/g,&quot;&amp;amp;&quot;);// ampersand - (SN) temporary disabled
	text = text.replace(/&lt;/g,&quot;&amp;lt;&quot;); // less than
	text = text.replace(/&gt;/g,&quot;&amp;gt;&quot;); // greater than
	text = text.replace(/&apos;/g,&quot;&amp;apos;&quot;); // single quotes
	text = text.replace(/&quot;/g,&quot;&amp;apos;&quot;); // double quotes

	// (SN) Issue #6, #11: unexpected &quot;%&quot; in field
	text = text.replace(/\|%/g, &quot;|&quot;);

	return text;
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>15559e88-2f64-415a-8544-9cbbc2742c79</id>
          <name>Verifies if Lab test is STD</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077902</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Verifies if the submitted Lab test code is in the list of STD lab tests

	@param {String} code - Lab test code
	@return {String} return true if Lab test code in the list of STD codes, false otherwise
*/
function isSTDLabTest(code) {

	// Check for LOINC codes
	switch(code) {
		// 86631, 86632 Chlamydia trachomatis Antibodies 
		case &quot;1833274&quot;:
		case &quot;1832970&quot;:
		case &quot;1833579&quot;:
		case &quot;44079-2&quot;:
		// 87591 Neisseria gonorrhoeae
		case &quot;43305-2&quot;:
		// 86704	Hepatitis A
		case &quot;13951-9&quot;:
		// 87340	Hepatitis B
		case &quot;1203841&quot;:
		case &quot;2193342&quot;:
		case &quot;10900-9&quot;:
		case &quot;13952-7&quot;:
		// 81001	Hepatitis C (Urinalysis, Complete)
		case &quot;13955-0&quot;:
		case &quot;48159-8&quot;:
		// 86695	Herpes Simplex Virus 1 (IgG)
		case &quot;1207706&quot;:
		// 86696	Herpes Simplex Virus 2 (IgG)
		case &quot;1208621&quot;:
		// 86592	VDRL, Serum (Syphilis)
		case &quot;1239118&quot;:
		// 86701	HIV-1 Antibody
		case &quot;29893-5&quot;:
		// 86702	HIV-2 Antibody
		case &quot;30361-0&quot;:
		// 87389	HIV-1/2 Antig. and Antib.,4th Gen
		case &quot;56888-1&quot;:
			return true;
			break;
	}

	return false;
	
}</code>
        </codeTemplate>
      </codeTemplates>
    </codeTemplateLibrary>
  </codeTemplateLibraries>
  <dependentIds/>
</channel>