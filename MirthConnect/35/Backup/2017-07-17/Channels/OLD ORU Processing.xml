<channel version="3.4.2">
  <id>829fe0c9-9229-4cb3-9cc3-1250213f284f</id>
  <nextMetaDataId>4</nextMetaDataId>
  <name>OLD ORU Processing</name>
  <description>LRI ORU_R01 processing downstream channel.
The channel receives ORU_R01 messages routed from the LRI getResults channel.

(SN) This channel should use Strict Parser for incoming HL7v2 ORU messages.

Last updated: March 25, 2017</description>
  <enabled>false</enabled>
  <lastModified>
    <time>1497219245488</time>
    <timezone>America/New_York</timezone>
  </lastModified>
  <revision>94</revision>
  <sourceConnector version="3.4.2">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.4.2">
      <pluginProperties/>
      <sourceConnectorProperties version="3.4.2">
        <responseVariable>None</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
    </properties>
    <transformer version="3.4.2">
      <steps>
        <step>
          <sequenceNumber>0</sequenceNumber>
          <name>Route ORU to Destination</name>
          <script>// Different HL7v2.x.x versions will be processed differently
var version = msg[&apos;MSH&apos;][&apos;MSH.12&apos;][&apos;VID.1&apos;].toString();

channelMap.put(&quot;MessageControlID&quot;, msg[&apos;MSH&apos;][&apos;MSH.10&apos;].toString());
 
if (&quot;2.5.1&quot; == version) {
	destinationSet.removeAllExcept([&quot;ORU_R01_2.5.1&quot;,&quot;FHIR_submit&quot;]);
	
} else if (&quot;2.3.1&quot; == version || &quot;2.3&quot; == version) {
	destinationSet.removeAllExcept([&quot;ORU_R01_2.3.x&quot;,&quot;FHIR_submit&quot;]);
	
} else {
	logger.error(&quot;ORU Processing: unknown ORU_R01 message version (MSH.12) - &quot; + version);
	destinationSet.removeAllExcept([&quot;FHIR_submit&quot;]);
}

var bytes = new java.lang.String(SerializerFactory.getSerializer(&apos;HL7V2&apos;).fromXML(msg) ).getBytes();
channelMap.put( &quot;HL7Base64&quot;, FileUtil.encode(bytes).replaceAll(&apos;\r\n|\r|\n&apos;, &apos;&apos;) );</script>
          <type>JavaScript</type>
          <data>
            <entry>
              <string>Script</string>
              <string>// Different HL7v2.x.x versions will be processed differently
var version = msg[&apos;MSH&apos;][&apos;MSH.12&apos;][&apos;VID.1&apos;].toString();

channelMap.put(&quot;MessageControlID&quot;, msg[&apos;MSH&apos;][&apos;MSH.10&apos;].toString());
 
if (&quot;2.5.1&quot; == version) {
	destinationSet.removeAllExcept([&quot;ORU_R01_2.5.1&quot;,&quot;FHIR_submit&quot;]);
	
} else if (&quot;2.3.1&quot; == version || &quot;2.3&quot; == version) {
	destinationSet.removeAllExcept([&quot;ORU_R01_2.3.x&quot;,&quot;FHIR_submit&quot;]);
	
} else {
	logger.error(&quot;ORU Processing: unknown ORU_R01 message version (MSH.12) - &quot; + version);
	destinationSet.removeAllExcept([&quot;FHIR_submit&quot;]);
}

var bytes = new java.lang.String(SerializerFactory.getSerializer(&apos;HL7V2&apos;).fromXML(msg) ).getBytes();
channelMap.put( &quot;HL7Base64&quot;, FileUtil.encode(bytes).replaceAll(&apos;\r\n|\r|\n&apos;, &apos;&apos;) );</string>
            </entry>
          </data>
        </step>
      </steps>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>HL7V2</inboundDataType>
      <outboundDataType>HL7V2</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.4.2">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.4.2">
          <handleRepetitions>true</handleRepetitions>
          <handleSubcomponents>true</handleSubcomponents>
          <useStrictParser>true</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <stripNamespaces>true</stripNamespaces>
          <segmentDelimiter>\r</segmentDelimiter>
          <convertLineBreaks>true</convertLineBreaks>
        </serializationProperties>
        <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.4.2">
          <useStrictParser>false</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <segmentDelimiter>\r</segmentDelimiter>
        </deserializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.4.2">
          <splitType>MSH_Segment</splitType>
          <batchScript></batchScript>
        </batchProperties>
        <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.4.2">
          <segmentDelimiter>\r</segmentDelimiter>
          <successfulACKCode>AA</successfulACKCode>
          <successfulACKMessage></successfulACKMessage>
          <errorACKCode>AE</errorACKCode>
          <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
          <rejectedACKCode>AR</rejectedACKCode>
          <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
          <msh15ACKAccept>false</msh15ACKAccept>
          <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
        </responseGenerationProperties>
        <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.4.2">
          <successfulACKCode>AA,CA</successfulACKCode>
          <errorACKCode>AE,CE</errorACKCode>
          <rejectedACKCode>AR,CR</rejectedACKCode>
          <validateMessageControlId>true</validateMessageControlId>
          <originalMessageControlId>Destination_Encoded</originalMessageControlId>
          <originalIdMapVariable></originalIdMapVariable>
        </responseValidationProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.4.2">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.4.2">
          <handleRepetitions>true</handleRepetitions>
          <handleSubcomponents>true</handleSubcomponents>
          <useStrictParser>true</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <stripNamespaces>true</stripNamespaces>
          <segmentDelimiter>\r</segmentDelimiter>
          <convertLineBreaks>true</convertLineBreaks>
        </serializationProperties>
        <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.4.2">
          <useStrictParser>true</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <segmentDelimiter>\r</segmentDelimiter>
        </deserializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.4.2">
          <splitType>MSH_Segment</splitType>
          <batchScript></batchScript>
        </batchProperties>
        <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.4.2">
          <segmentDelimiter>\r</segmentDelimiter>
          <successfulACKCode>AA</successfulACKCode>
          <successfulACKMessage></successfulACKMessage>
          <errorACKCode>AE</errorACKCode>
          <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
          <rejectedACKCode>AR</rejectedACKCode>
          <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
          <msh15ACKAccept>false</msh15ACKAccept>
          <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
        </responseGenerationProperties>
        <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.4.2">
          <successfulACKCode>AA,CA</successfulACKCode>
          <errorACKCode>AE,CE</errorACKCode>
          <rejectedACKCode>AR,CR</rejectedACKCode>
          <validateMessageControlId>true</validateMessageControlId>
          <originalMessageControlId>Destination_Encoded</originalMessageControlId>
          <originalIdMapVariable></originalIdMapVariable>
        </responseValidationProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.4.2">
      <rules>
        <rule>
          <sequenceNumber>0</sequenceNumber>
          <name>Check for ORU messages</name>
          <data>
            <entry>
              <string>Script</string>
              <string>// Continue processing only if the incoming message is ORU_R01
if(&quot;ORU&quot; == msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSG.1&apos;].toString() &amp;&amp; &quot;R01&quot; == msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSG.2&apos;].toString()) {
	return true;
} else {
	logger.error(&quot;ORU Processing: non-ORU message is rejected &quot; + msg.toString());
	return false;
}</string>
            </entry>
          </data>
          <type>JavaScript</type>
          <script>// Continue processing only if the incoming message is ORU_R01
if(&quot;ORU&quot; == msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSG.1&apos;].toString() &amp;&amp; &quot;R01&quot; == msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSG.2&apos;].toString()) {
	return true;
} else {
	logger.error(&quot;ORU Processing: non-ORU message is rejected &quot; + msg.toString());
	return false;
}</script>
          <operator>NONE</operator>
        </rule>
      </rules>
    </filter>
    <transportName>Channel Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.4.2">
      <metaDataId>1</metaDataId>
      <name>ORU_R01_2.5.1</name>
      <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <channelId>none</channelId>
        <channelTemplate>${message.encodedData}</channelTemplate>
        <mapVariables/>
      </properties>
      <transformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>Patient resource</name>
            <script>// Mar 16: &lt;value value=&quot;&quot;/&gt; removed from identifier


var resPatient = &lt;Patient&gt;
			&lt;id value=&quot;PID-patient-identification&quot;/&gt;
			&lt;text&gt;
				&lt;status value=&quot;generated&quot;/&gt;
				&lt;xhtml:div xmlns:xhtml=&quot;http://www.w3.org/1999/xhtml&quot;/&gt;
			&lt;/text&gt;			
			&lt;identifier&gt;
				&lt;use value=&quot;official&quot;/&gt;				
			&lt;/identifier&gt;
			&lt;name&gt;
				&lt;use value=&quot;official&quot;/&gt;
				&lt;family value=&quot;&quot;/&gt;
			&lt;/name&gt;
				&lt;telecom&gt;
					&lt;system value=&quot;phone&quot;/&gt;
					&lt;value value=&quot;&quot;/&gt;
					&lt;use value=&quot;home&quot;/&gt;
				&lt;/telecom&gt;
			&lt;gender value=&quot;&quot;/&gt;
			&lt;birthDate value=&quot;&quot;/&gt;
			&lt;address&gt;
				&lt;use value=&quot;home&quot;/&gt;
			&lt;/address&gt;
		&lt;/Patient&gt;;


// Process NTE segments
// (SN) Known deficiency - &quot;p&quot; element namespace is not bound, must be &quot;xhtml:p&quot;  
resPatient.text.*::div.* = new XMLList();
var 	patientComment = false;
for each (var nte in msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;].children()) {
	if (&quot;NTE&quot; == nte.name().toString()) {

		patientComment = true;
		
		// Source of Comment - Optional
		var commentSources = [&quot;L&quot;,&quot;P&quot;,&quot;O&quot;];
		var source = nte[&apos;NTE.2&apos;].toString();
		
		// Comments that are contained in the segment - Required
		var comment = nte[&apos;NTE.3&apos;].toString();

		if (commentSources.indexOf(source) &gt; -1) {	
			resPatient.text.*::div.* += new XML(&apos;&lt;p class=&quot;&apos; + source + &apos;&quot;&gt;&apos; + stripNonValidXMLChars(comment) +&apos;&lt;/p&gt;&apos;);
		} else {
			resPatient.text.*::div.* += new XML(&apos;&lt;p&gt;&apos; + stripNonValidXMLChars(comment) +&apos;&lt;/p&gt;&apos;);	
		}
	}
}

if (!patientComment) delete resPatient.text;

// Patient Quest360 identifier list (repeatable)
// (SN)  Only first PID.3.1 [ID Number] is mapped in this version
var identifierTypeCode = msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.3&apos;][&apos;CX.5&apos;].toString();
if (identifierTypeCode) {
	resPatient.identifier.type.coding.code.@value = identifierTypeCode;
}

//======================= ~~ RKW IMPORTANT: This is where the patient SAFE ID is found
// Quest identifier - Required

var patientID = msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString();
//var patientID = msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.3&apos;][&apos;CX.1&apos;].toString();
resPatient.identifier.(use.@value == &quot;official&quot;).value.@value = patientID;


// ============================ RKW ~~ New Stuff

importPackage(Packages.ca.uhn.fhir.context);
importPackage(Packages.ca.uhn.fhir.model.dstu2.resource);
importPackage(Packages.ca.uhn.fhir.rest.api);
importPackage(Packages.ca.uhn.fhir.rest.client);

var Url = configurationMap.get(&apos;sparkRawURL&apos;)

var ctx = Packages.ca.uhn.fhir.context.FhirContext.forDstu2();
var client = ctx.newRestfulGenericClient( Url );
		
ctx.getRestfulClientFactory().setSocketTimeout(60 * 1000); 
ctx.getRestfulClientFactory().setConnectTimeout(60 * 1000); 
channelMap.put( &quot;ctx&quot;, ctx );

logger.error( &quot;Query for Patient: &quot; + msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.3&apos;][0][&apos;CX.1&apos;].toString() );

var patientSearchResults = client
	.search()
	.forResource(Patient)
	.where(Packages.ca.uhn.fhir.model.dstu2.resource.Patient.IDENTIFIER.exactly().identifier( msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.3&apos;][0][&apos;CX.1&apos;].toString() ))
	.returnBundle(Bundle)
	.execute();

var ms = patientSearchResults.getEntry();

var msSize = ms.size();

var patientResource;
var patientString;

if( msSize )
{
	var patientResource = ms.get(0).getResource();
//	var patientString = ctx.newJsonParser().encodeResourceToString(patientResource);
	
	logger.error( &quot;Patient: \n&quot; + patientResource.getId().getIdPart() );
//	logger.error( &quot;Patient: \n&quot; + patientString );	
}
else
{
	throw &quot;ORU Processing: Patient Not Found&quot;;
}

//var PatientSource = JSON.parse( patientString );
channelMap.put(&quot;PatientResourceID&quot;, patientResource.getId().getIdPart() );


 //=========================================================== ~~ RKW Leave - this is part of old code
// Store Patient resource to be processed by FHIR_Submit destination
channelMap.put(&quot;Patient&quot;, resPatient);</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>// Mar 16: &lt;value value=&quot;&quot;/&gt; removed from identifier


var resPatient = &lt;Patient&gt;
			&lt;id value=&quot;PID-patient-identification&quot;/&gt;
			&lt;text&gt;
				&lt;status value=&quot;generated&quot;/&gt;
				&lt;xhtml:div xmlns:xhtml=&quot;http://www.w3.org/1999/xhtml&quot;/&gt;
			&lt;/text&gt;			
			&lt;identifier&gt;
				&lt;use value=&quot;official&quot;/&gt;				
			&lt;/identifier&gt;
			&lt;name&gt;
				&lt;use value=&quot;official&quot;/&gt;
				&lt;family value=&quot;&quot;/&gt;
			&lt;/name&gt;
				&lt;telecom&gt;
					&lt;system value=&quot;phone&quot;/&gt;
					&lt;value value=&quot;&quot;/&gt;
					&lt;use value=&quot;home&quot;/&gt;
				&lt;/telecom&gt;
			&lt;gender value=&quot;&quot;/&gt;
			&lt;birthDate value=&quot;&quot;/&gt;
			&lt;address&gt;
				&lt;use value=&quot;home&quot;/&gt;
			&lt;/address&gt;
		&lt;/Patient&gt;;


// Process NTE segments
// (SN) Known deficiency - &quot;p&quot; element namespace is not bound, must be &quot;xhtml:p&quot;  
resPatient.text.*::div.* = new XMLList();
var 	patientComment = false;
for each (var nte in msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;].children()) {
	if (&quot;NTE&quot; == nte.name().toString()) {

		patientComment = true;
		
		// Source of Comment - Optional
		var commentSources = [&quot;L&quot;,&quot;P&quot;,&quot;O&quot;];
		var source = nte[&apos;NTE.2&apos;].toString();
		
		// Comments that are contained in the segment - Required
		var comment = nte[&apos;NTE.3&apos;].toString();

		if (commentSources.indexOf(source) &gt; -1) {	
			resPatient.text.*::div.* += new XML(&apos;&lt;p class=&quot;&apos; + source + &apos;&quot;&gt;&apos; + stripNonValidXMLChars(comment) +&apos;&lt;/p&gt;&apos;);
		} else {
			resPatient.text.*::div.* += new XML(&apos;&lt;p&gt;&apos; + stripNonValidXMLChars(comment) +&apos;&lt;/p&gt;&apos;);	
		}
	}
}

if (!patientComment) delete resPatient.text;

// Patient Quest360 identifier list (repeatable)
// (SN)  Only first PID.3.1 [ID Number] is mapped in this version
var identifierTypeCode = msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.3&apos;][&apos;CX.5&apos;].toString();
if (identifierTypeCode) {
	resPatient.identifier.type.coding.code.@value = identifierTypeCode;
}

//======================= ~~ RKW IMPORTANT: This is where the patient SAFE ID is found
// Quest identifier - Required

var patientID = msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString();
//var patientID = msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.3&apos;][&apos;CX.1&apos;].toString();
resPatient.identifier.(use.@value == &quot;official&quot;).value.@value = patientID;


// ============================ RKW ~~ New Stuff

importPackage(Packages.ca.uhn.fhir.context);
importPackage(Packages.ca.uhn.fhir.model.dstu2.resource);
importPackage(Packages.ca.uhn.fhir.rest.api);
importPackage(Packages.ca.uhn.fhir.rest.client);

var Url = configurationMap.get(&apos;sparkRawURL&apos;)

var ctx = Packages.ca.uhn.fhir.context.FhirContext.forDstu2();
var client = ctx.newRestfulGenericClient( Url );
		
ctx.getRestfulClientFactory().setSocketTimeout(60 * 1000); 
ctx.getRestfulClientFactory().setConnectTimeout(60 * 1000); 
channelMap.put( &quot;ctx&quot;, ctx );

logger.error( &quot;Query for Patient: &quot; + msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.3&apos;][0][&apos;CX.1&apos;].toString() );

var patientSearchResults = client
	.search()
	.forResource(Patient)
	.where(Packages.ca.uhn.fhir.model.dstu2.resource.Patient.IDENTIFIER.exactly().identifier( msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.PATIENT&apos;][&apos;PID&apos;][&apos;PID.3&apos;][0][&apos;CX.1&apos;].toString() ))
	.returnBundle(Bundle)
	.execute();

var ms = patientSearchResults.getEntry();

var msSize = ms.size();

var patientResource;
var patientString;

if( msSize )
{
	var patientResource = ms.get(0).getResource();
//	var patientString = ctx.newJsonParser().encodeResourceToString(patientResource);
	
	logger.error( &quot;Patient: \n&quot; + patientResource.getId().getIdPart() );
//	logger.error( &quot;Patient: \n&quot; + patientString );	
}
else
{
	throw &quot;ORU Processing: Patient Not Found&quot;;
}

//var PatientSource = JSON.parse( patientString );
channelMap.put(&quot;PatientResourceID&quot;, patientResource.getId().getIdPart() );


 //=========================================================== ~~ RKW Leave - this is part of old code
// Store Patient resource to be processed by FHIR_Submit destination
channelMap.put(&quot;Patient&quot;, resPatient);</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>1</sequenceNumber>
            <name>Save PDF Report</name>
            <script>for each (var observation in msg[&apos;ORU_R01.PATIENT_RESULT&apos;].children()) {

	// Find attachment
	for each (var obs in observation[&apos;ORU_R01.OBSERVATION&apos;].children()) {
		if (&quot;OBX&quot; == obs.name().toString() &amp;&amp;  obs[&apos;OBX.2&apos;].toString() == &quot;ED&quot; ) {
			
			var bytes = new java.lang.String(obs[&apos;OBX.5&apos;][&apos;ED.5&apos;].toString()).getBytes();
			channelMap.put( &quot;PDFBase64&quot;, FileUtil.encode(bytes).replaceAll(&apos;\r\n|\r|\n&apos;, &apos;&apos;) );			
		}	
	}
}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>for each (var observation in msg[&apos;ORU_R01.PATIENT_RESULT&apos;].children()) {

	// Find attachment
	for each (var obs in observation[&apos;ORU_R01.OBSERVATION&apos;].children()) {
		if (&quot;OBX&quot; == obs.name().toString() &amp;&amp;  obs[&apos;OBX.2&apos;].toString() == &quot;ED&quot; ) {
			
			var bytes = new java.lang.String(obs[&apos;OBX.5&apos;][&apos;ED.5&apos;].toString()).getBytes();
			channelMap.put( &quot;PDFBase64&quot;, FileUtil.encode(bytes).replaceAll(&apos;\r\n|\r|\n&apos;, &apos;&apos;) );			
		}	
	}
}</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>2</sequenceNumber>
            <name>Create Map of DiagnosticOrder Resources to create lookup</name>
            <script>/*
importPackage(Packages.java.util);
importPackage(Packages.ca.uhn.fhir.context);
importPackage(Packages.ca.uhn.fhir.model.dstu2.resource);
importPackage(Packages.ca.uhn.fhir.rest.api);
importPackage(Packages.ca.uhn.fhir.rest.client);

var ctx = channelMap.get( &quot;ctx&quot; );
var client = ctx.newRestfulGenericClient( configurationMap.get(&apos;sparkRawURL&apos;) );

var orderSearchResults = client
	.search()
	.forResource(DiagnosticOrder)
	.where(DiagnosticOrder.IDENTIFIER.exactly().systemAndIdentifier($(&apos;sparkRawURL&apos;) + &quot;/&quot; + &quot;90046003&quot;, msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.ORDER_OBSERVATION&apos;][0][&apos;ORC&apos;][&apos;ORC.2&apos;][&apos;EI.1&apos;].toString() ))	
	.returnBundle(Bundle)	
	.execute();
		
var ms;
var firstTime = true; 
var orders = new HashMap();

logger.error(&quot;About to iterate through DiagnosticOrders...&quot; );&#xd;
		
do
{
	if( !firstTime )
	{
		orderSearchResults = client.loadPage().next(orderSearchResults).execute();
	}
	
	ms = orderSearchResults.getEntry();
		
	for(var i=0; i&lt;ms.size() ; i++ )
	{
		var order = ms.get(i).getResource();
		var orderString = ctx.newJsonParser().encodeResourceToString(order);

		orders.put( order.getItemFirstRep().getCode().getCoding().get(0).getCode(), order.getId().getIdPart() );
		
//		logger.error( &quot;DiagnosticOrder Resource ID: \n&quot; + order.getId().getIdPart() );
//		logger.error( &quot;DiagnosticOrder: \n&quot; + orderString );
	}
	
	firstTime = false;
}
while( orderSearchResults.getLink(Bundle.LINK_NEXT) != null );

channelMap.put( &quot;theOrders&quot;, orders );

*/</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>/*
importPackage(Packages.java.util);
importPackage(Packages.ca.uhn.fhir.context);
importPackage(Packages.ca.uhn.fhir.model.dstu2.resource);
importPackage(Packages.ca.uhn.fhir.rest.api);
importPackage(Packages.ca.uhn.fhir.rest.client);

var ctx = channelMap.get( &quot;ctx&quot; );
var client = ctx.newRestfulGenericClient( configurationMap.get(&apos;sparkRawURL&apos;) );

var orderSearchResults = client
	.search()
	.forResource(DiagnosticOrder)
	.where(DiagnosticOrder.IDENTIFIER.exactly().systemAndIdentifier($(&apos;sparkRawURL&apos;) + &quot;/&quot; + &quot;90046003&quot;, msg[&apos;ORU_R01.PATIENT_RESULT&apos;][&apos;ORU_R01.ORDER_OBSERVATION&apos;][0][&apos;ORC&apos;][&apos;ORC.2&apos;][&apos;EI.1&apos;].toString() ))	
	.returnBundle(Bundle)	
	.execute();
		
var ms;
var firstTime = true; 
var orders = new HashMap();

logger.error(&quot;About to iterate through DiagnosticOrders...&quot; );&#xd;
		
do
{
	if( !firstTime )
	{
		orderSearchResults = client.loadPage().next(orderSearchResults).execute();
	}
	
	ms = orderSearchResults.getEntry();
		
	for(var i=0; i&lt;ms.size() ; i++ )
	{
		var order = ms.get(i).getResource();
		var orderString = ctx.newJsonParser().encodeResourceToString(order);

		orders.put( order.getItemFirstRep().getCode().getCoding().get(0).getCode(), order.getId().getIdPart() );
		
//		logger.error( &quot;DiagnosticOrder Resource ID: \n&quot; + order.getId().getIdPart() );
//		logger.error( &quot;DiagnosticOrder: \n&quot; + orderString );
	}
	
	firstTime = false;
}
while( orderSearchResults.getLink(Bundle.LINK_NEXT) != null );

channelMap.put( &quot;theOrders&quot;, orders );

*/</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>3</sequenceNumber>
            <name>DiagnosticReport resource</name>
            <script>var arrDiagnosticReport = [];
var arrOrderingProvider = [];
var arrProviderID = [];

/*
* (SN) Practitioner resource for Performing Organization or Medical Doctor is not mapped (see comments below)
*
*/ 

for each (var observation in msg[&apos;ORU_R01.PATIENT_RESULT&apos;].children()) {

logger.error( &quot;Processing Observation&quot; );

	// Ignore &quot;comment&quot; results
	if( observation[&apos;OBX&apos;][&apos;OBX.3&apos;][&apos;CE.1&apos;].toString() == &quot;86006556&quot; )
	{
		continue; 
	}

	var resDiagnosticReport = &lt;DiagnosticReport&gt;
							&lt;text&gt;
								&lt;status value=&quot;generated&quot;/&gt;
								&lt;xhtml:div xmlns:xhtml=&quot;http://www.w3.org/1999/xhtml&quot;/&gt;
							&lt;/text&gt;
						&lt;/DiagnosticReport&gt;;
	
	// Process only ORC-OBR-OBX group
	if (observation[&apos;ORC&apos;][&apos;ORC.1&apos;].toString() != &quot;RE&quot;) { continue; }

	// Reference to contained observations
	for each (var obs in observation[&apos;ORU_R01.OBSERVATION&apos;].children()) 
	{
		if (&quot;OBX&quot; == obs.name().toString() &amp;&amp; obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString() != &quot;&quot;)
		{
			logger.error( &quot;OBX Found: &quot; + obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString())
			var id = obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString();
			var resultReference = &lt;contained&gt;
									&lt;Observation&gt;
										&lt;id value=&quot;&quot;/&gt;
									&lt;/Observation&gt;
								&lt;/contained&gt;;
			resultReference.Observation.id.@value = id;
			resDiagnosticReport.appendChild(resultReference);	
		}
	}	

//	resDiagnosticReport.id.@value = observation[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;EI.1&apos;].toString();

	// Process Observation Request (OBR) level NTE segments
	// (SN) Known deficiency - &quot;p&quot; element namespace is not bound, must be &quot;xhtml:p&quot; 
	// March 14 2017: Issue #3 &quot;Comments appear twice&quot; fixed 
	resDiagnosticReport.text.*::div.* = new XMLList();
	var observationComment = false;	

	// Extract ORC-OBR-OBX group related comments only
	var orderObservationGroup = new XML(observation.toString());
	
	// March 14: This returns all children and grandchildren NTE segments of the this object
	for each (var nte in orderObservationGroup.descendants(&quot;NTE&quot;)) { 
		
		if (&quot;NTE&quot; == nte.name().toString()) {

			observationComment = true;

			// March 14, 2017: Comment source depends on the group and appended as a prefix 
			var prefix = &quot;&quot;;
			if (nte.parent().name().toString().indexOf(&quot;.ORDER_OBSERVATION&quot;) &gt; -1) {
				prefix = &quot;OBR&quot;;
			} else if (nte.parent().name().toString().indexOf(&quot;.OBSERVATION&quot;) &gt; -1) {
				prefix = &quot;OBX&quot;;
			}
			
			// Source of Comment - Optional
			var commentSources = [&quot;L&quot;,&quot;P&quot;,&quot;O&quot;];
			var source = nte[&apos;NTE.2&apos;].toString();
			
			// Comments contained in the segment - Required
			var comment = nte[&apos;NTE.3&apos;].toString();

			if (commentSources.indexOf(source) &gt; -1) {	
				resDiagnosticReport.text.*::div.* += new XML(&apos;&lt;p class=&quot;&apos; + prefix + &apos;-&apos; + source + &apos;&quot;&gt;&apos; + stripNonValidXMLChars(comment) +&apos;&lt;/p&gt;&apos;);
			} else {
				resDiagnosticReport.text.*::div.* += new XML(&apos;&lt;p class=&quot;&apos; + prefix + &apos;&quot;&gt;&apos; + stripNonValidXMLChars(comment) +&apos;&lt;/p&gt;&apos;);	
			}
		}
	}

	if (!observationComment) delete resDiagnosticReport.text;

	// Process single OBR segment
//	resDiagnosticReport.appendChild(new XML(&quot;&lt;contained&gt;&quot; + getDiagnosticOrder(observation) + &quot;&lt;/contained&gt;&quot;));

/*
	// Process Ordering Provider
	// (SN) Add only if such Ordering Provider is not in the list already
	var provID =  observation[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.1&apos;].toString();
	if (arrProviderID.indexOf(provID) &lt; 0) {
		arrOrderingProvider.push(getOrderingProvider(observation));
		arrProviderID.push(provID);
	}

	// Process multiple OBX segments
	for each (var obs in observation[&apos;ORU_R01.OBSERVATION&apos;].children()) {
		if (&quot;OBX&quot; == obs.name().toString()) {

			// OBX segments nested under DiagnosticReport as contained resources
			resDiagnosticReport.appendChild(new XML(&quot;&lt;contained&gt;&quot; + getObservationResource(obs) + &quot;&lt;/contained&gt;&quot;));
		}	
	}	
*/
	// Placer Order Number - If populated, this field contains the placer application’s order number.
	if (observation[&apos;ORC&apos;][&apos;ORC.2&apos;][&apos;EI.1&apos;].toString()) {
		var identifier1 = &lt;identifier&gt;
						&lt;system value=&quot;&quot;/&gt;
						&lt;value value=&quot;&quot;/&gt;
					&lt;/identifier&gt;;
		identifier1.value.@value = observation[&apos;ORC&apos;][&apos;ORC.2&apos;][&apos;EI.1&apos;].toString();
//		identifier1.system.@value = observation[&apos;ORC&apos;][&apos;ORC.2&apos;][&apos;EI.2&apos;].toString();
		identifier1.system.@value = &quot;90046003&quot;
		resDiagnosticReport.appendChild(identifier1);
	}

	// Filler Order Number - The order number associated with the filler’s application. 
	if (observation[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;EI.1&apos;].toString()) {
		var identifier2 = &lt;identifier&gt;
						&lt;system value=&quot;&quot;/&gt;
						&lt;value value=&quot;&quot;/&gt;
					&lt;/identifier&gt;;
		identifier2.value.@value = observation[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;EI.1&apos;].toString();
		identifier2.system.@value = &quot;Observation/&quot; +  observation[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;EI.2&apos;].toString();
		resDiagnosticReport.appendChild(identifier2);		
	}

	var identifier3 = &lt;identifier&gt;
					&lt;system value=&quot;&quot;/&gt;
					&lt;value value=&quot;&quot;/&gt;
				&lt;/identifier&gt;;
		identifier3.value.@value = observation[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;CE.1&apos;].toString();
		identifier3.system.@value = &quot;QUEST&quot;;
		resDiagnosticReport.appendChild(identifier3);		
	

	// Order Status - Indicates whether the result is partial or final.
	// March 25 2017: updated to pass API validation (see Terminology Mapping spreadsheet)
	var statusCode = observation[&apos;ORC&apos;][&apos;ORC.5&apos;].toString();
	if (statusCode) {
		var statusXML = &lt;status value=&quot;final&quot;&gt;
					&lt;/status&gt;;

		resDiagnosticReport.appendChild(statusXML);
	}

	resDiagnosticReport.code.@id = observation[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;EI.1&apos;].toString();

	// Hard-coded, required by FHIR
	resDiagnosticReport.appendChild(new XML(&apos;&lt;subject&gt;&lt;reference value=&quot;Patient&quot;/&gt;&lt;/subject&gt;&apos;));

	// Observation Date/Time
	resDiagnosticReport.effectiveDateTime.@value = convertHL7DateTime(observation[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;TS.1&apos;].toString());
	resDiagnosticReport.issued.@value = convertHL7DateTime(observation[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;TS.1&apos;].toString());

	// Reference to observation this report is based on
	for each (var obs in observation[&apos;ORU_R01.OBSERVATION&apos;].children()) {
		if (&quot;OBX&quot; == obs.name().toString() &amp;&amp; obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString() != &quot;&quot;) {
			var id = &quot;Observation/#&quot; + obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString();
			var resultReference = &lt;result&gt;
									&lt;reference value=&quot;&quot;/&gt;
								&lt;/result&gt;;
			resultReference.reference.@value = id;
			resDiagnosticReport.appendChild(resultReference);	
		}	
	}


//	logger.error( &quot;Diagnostic Report\n:&quot; +  resDiagnosticReport.toString() );

	// ~~ STEPS: 
	// 1. Add test code to ID
	// 2. Pull array of Observations for each Order/Report
	// 3. Put Observations into Diagnostic Report
	// 5. Populate Conclusion

	importPackage(Packages.java.util);
	importPackage(Packages.ca.uhn.fhir.context);
	importPackage(Packages.ca.uhn.fhir.model.dstu2.resource);
	importPackage(Packages.ca.uhn.fhir.model.dstu2.composite);	
	importPackage(Packages.ca.uhn.fhir.rest.api);
	importPackage(Packages.ca.uhn.fhir.rest.client);

	var ctx = channelMap.get( &quot;ctx&quot; );
	var client = ctx.newRestfulGenericClient( configurationMap.get(&apos;sparkRawURL&apos;) );

	var originatingCode = observation[&apos;OBR&apos;][&apos;OBR.50&apos;][&apos;CWE.1&apos;].toString();

	// The parent test is itself, but a reflex has a different parent test
	if( originatingCode == null || originatingCode == &quot;&quot; ) 
	{
		originatingCode = observation[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;CE.1&apos;].toString();
	}


	logger.error( &quot;String Report 1: &quot; + resDiagnosticReport.toString() );
	
	var report = ctx.newXmlParser().parseResource( resDiagnosticReport.toString() );	
	
	report.setSubject(new ResourceReferenceDt(  &quot;Patient/&quot; + $(&apos;PatientResourceID&apos;) ));	

	var theAttachments = new ArrayList();
	
	var attachment = new AttachmentDt();
	attachment.setContentType(&quot;application/pdf&quot;);
	attachment.setData( new java.lang.String( $(&apos;PDFBase64&apos;) ).getBytes() );
	theAttachments.add(attachment);

	var attachment2 = new AttachmentDt();
	attachment2.setContentType(&quot;text/hl7&quot;);
	attachment2.setData( new java.lang.String( $(&apos;HL7Base64&apos;) ).getBytes() );
	theAttachments.add(attachment2);
	
	report.setPresentedForm(theAttachments );	

	// Contained Observations

	var jp = ctx.newJsonParser();

     var resourceList = new ArrayList();

	var containedDt = new ContainedDt();

	for each (var obs in observation[&apos;ORU_R01.OBSERVATION&apos;].children()) {
		if (&quot;OBX&quot; == obs.name().toString()) 
		{
			// ~~ Make sure to exclude OBX observations containing PDF
//			var obxObservation = ctx.newXmlParser().parseResource( getObservationResource(obs).toString() );	
			var obxObservation = getObservationResourcePopulated( obs );

			logger.error( &quot;OBSERVATION: &quot; + jp.encodeResourceToString( obxObservation ) );			

			resourceList.add(obxObservation);
	    
		}	
	}

	containedDt.setContainedResources(resourceList);
	report.setContained(containedDt);		


	// Conclusion
	var abnormalFlags = observation[&apos;OBX.8&apos;].toString();
	if (abnormalFlags) {
		report.setConclusion(&quot;ABNORMAL&quot;);
	} else {
		report.setConclusion(&quot;NORMAL&quot;);
	}

	logger.error( &quot;String Report 2: &quot; + jp.encodeResourceToString( report) );
		
	var outcome = client.create()
		.resource(report)
		.execute();	

	logger.error( &quot;Outcome: &quot; + outcome.getResource().toString() );
	
//	arrDiagnosticReport.push(resDiagnosticReport.toString());
}

// Store DiagnosticReport resource to be processed by FHIR_Submit destination
channelMap.put(&quot;DiagnosticReport&quot;, arrDiagnosticReport);

// Store Practitioner resource to be processed by FHIR_Submit destination
channelMap.put(&quot;Practitioner&quot;, arrOrderingProvider);</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>var arrDiagnosticReport = [];
var arrOrderingProvider = [];
var arrProviderID = [];

/*
* (SN) Practitioner resource for Performing Organization or Medical Doctor is not mapped (see comments below)
*
*/ 

for each (var observation in msg[&apos;ORU_R01.PATIENT_RESULT&apos;].children()) {

logger.error( &quot;Processing Observation&quot; );

	// Ignore &quot;comment&quot; results
	if( observation[&apos;OBX&apos;][&apos;OBX.3&apos;][&apos;CE.1&apos;].toString() == &quot;86006556&quot; )
	{
		continue; 
	}

	var resDiagnosticReport = &lt;DiagnosticReport&gt;
							&lt;text&gt;
								&lt;status value=&quot;generated&quot;/&gt;
								&lt;xhtml:div xmlns:xhtml=&quot;http://www.w3.org/1999/xhtml&quot;/&gt;
							&lt;/text&gt;
						&lt;/DiagnosticReport&gt;;
	
	// Process only ORC-OBR-OBX group
	if (observation[&apos;ORC&apos;][&apos;ORC.1&apos;].toString() != &quot;RE&quot;) { continue; }

	// Reference to contained observations
	for each (var obs in observation[&apos;ORU_R01.OBSERVATION&apos;].children()) 
	{
		if (&quot;OBX&quot; == obs.name().toString() &amp;&amp; obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString() != &quot;&quot;)
		{
			logger.error( &quot;OBX Found: &quot; + obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString())
			var id = obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString();
			var resultReference = &lt;contained&gt;
									&lt;Observation&gt;
										&lt;id value=&quot;&quot;/&gt;
									&lt;/Observation&gt;
								&lt;/contained&gt;;
			resultReference.Observation.id.@value = id;
			resDiagnosticReport.appendChild(resultReference);	
		}
	}	

//	resDiagnosticReport.id.@value = observation[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;EI.1&apos;].toString();

	// Process Observation Request (OBR) level NTE segments
	// (SN) Known deficiency - &quot;p&quot; element namespace is not bound, must be &quot;xhtml:p&quot; 
	// March 14 2017: Issue #3 &quot;Comments appear twice&quot; fixed 
	resDiagnosticReport.text.*::div.* = new XMLList();
	var observationComment = false;	

	// Extract ORC-OBR-OBX group related comments only
	var orderObservationGroup = new XML(observation.toString());
	
	// March 14: This returns all children and grandchildren NTE segments of the this object
	for each (var nte in orderObservationGroup.descendants(&quot;NTE&quot;)) { 
		
		if (&quot;NTE&quot; == nte.name().toString()) {

			observationComment = true;

			// March 14, 2017: Comment source depends on the group and appended as a prefix 
			var prefix = &quot;&quot;;
			if (nte.parent().name().toString().indexOf(&quot;.ORDER_OBSERVATION&quot;) &gt; -1) {
				prefix = &quot;OBR&quot;;
			} else if (nte.parent().name().toString().indexOf(&quot;.OBSERVATION&quot;) &gt; -1) {
				prefix = &quot;OBX&quot;;
			}
			
			// Source of Comment - Optional
			var commentSources = [&quot;L&quot;,&quot;P&quot;,&quot;O&quot;];
			var source = nte[&apos;NTE.2&apos;].toString();
			
			// Comments contained in the segment - Required
			var comment = nte[&apos;NTE.3&apos;].toString();

			if (commentSources.indexOf(source) &gt; -1) {	
				resDiagnosticReport.text.*::div.* += new XML(&apos;&lt;p class=&quot;&apos; + prefix + &apos;-&apos; + source + &apos;&quot;&gt;&apos; + stripNonValidXMLChars(comment) +&apos;&lt;/p&gt;&apos;);
			} else {
				resDiagnosticReport.text.*::div.* += new XML(&apos;&lt;p class=&quot;&apos; + prefix + &apos;&quot;&gt;&apos; + stripNonValidXMLChars(comment) +&apos;&lt;/p&gt;&apos;);	
			}
		}
	}

	if (!observationComment) delete resDiagnosticReport.text;

	// Process single OBR segment
//	resDiagnosticReport.appendChild(new XML(&quot;&lt;contained&gt;&quot; + getDiagnosticOrder(observation) + &quot;&lt;/contained&gt;&quot;));

/*
	// Process Ordering Provider
	// (SN) Add only if such Ordering Provider is not in the list already
	var provID =  observation[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.1&apos;].toString();
	if (arrProviderID.indexOf(provID) &lt; 0) {
		arrOrderingProvider.push(getOrderingProvider(observation));
		arrProviderID.push(provID);
	}

	// Process multiple OBX segments
	for each (var obs in observation[&apos;ORU_R01.OBSERVATION&apos;].children()) {
		if (&quot;OBX&quot; == obs.name().toString()) {

			// OBX segments nested under DiagnosticReport as contained resources
			resDiagnosticReport.appendChild(new XML(&quot;&lt;contained&gt;&quot; + getObservationResource(obs) + &quot;&lt;/contained&gt;&quot;));
		}	
	}	
*/
	// Placer Order Number - If populated, this field contains the placer application’s order number.
	if (observation[&apos;ORC&apos;][&apos;ORC.2&apos;][&apos;EI.1&apos;].toString()) {
		var identifier1 = &lt;identifier&gt;
						&lt;system value=&quot;&quot;/&gt;
						&lt;value value=&quot;&quot;/&gt;
					&lt;/identifier&gt;;
		identifier1.value.@value = observation[&apos;ORC&apos;][&apos;ORC.2&apos;][&apos;EI.1&apos;].toString();
//		identifier1.system.@value = observation[&apos;ORC&apos;][&apos;ORC.2&apos;][&apos;EI.2&apos;].toString();
		identifier1.system.@value = &quot;90046003&quot;
		resDiagnosticReport.appendChild(identifier1);
	}

	// Filler Order Number - The order number associated with the filler’s application. 
	if (observation[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;EI.1&apos;].toString()) {
		var identifier2 = &lt;identifier&gt;
						&lt;system value=&quot;&quot;/&gt;
						&lt;value value=&quot;&quot;/&gt;
					&lt;/identifier&gt;;
		identifier2.value.@value = observation[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;EI.1&apos;].toString();
		identifier2.system.@value = &quot;Observation/&quot; +  observation[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;EI.2&apos;].toString();
		resDiagnosticReport.appendChild(identifier2);		
	}

	var identifier3 = &lt;identifier&gt;
					&lt;system value=&quot;&quot;/&gt;
					&lt;value value=&quot;&quot;/&gt;
				&lt;/identifier&gt;;
		identifier3.value.@value = observation[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;CE.1&apos;].toString();
		identifier3.system.@value = &quot;QUEST&quot;;
		resDiagnosticReport.appendChild(identifier3);		
	

	// Order Status - Indicates whether the result is partial or final.
	// March 25 2017: updated to pass API validation (see Terminology Mapping spreadsheet)
	var statusCode = observation[&apos;ORC&apos;][&apos;ORC.5&apos;].toString();
	if (statusCode) {
		var statusXML = &lt;status value=&quot;final&quot;&gt;
					&lt;/status&gt;;

		resDiagnosticReport.appendChild(statusXML);
	}

	resDiagnosticReport.code.@id = observation[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;EI.1&apos;].toString();

	// Hard-coded, required by FHIR
	resDiagnosticReport.appendChild(new XML(&apos;&lt;subject&gt;&lt;reference value=&quot;Patient&quot;/&gt;&lt;/subject&gt;&apos;));

	// Observation Date/Time
	resDiagnosticReport.effectiveDateTime.@value = convertHL7DateTime(observation[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;TS.1&apos;].toString());
	resDiagnosticReport.issued.@value = convertHL7DateTime(observation[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;TS.1&apos;].toString());

	// Reference to observation this report is based on
	for each (var obs in observation[&apos;ORU_R01.OBSERVATION&apos;].children()) {
		if (&quot;OBX&quot; == obs.name().toString() &amp;&amp; obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString() != &quot;&quot;) {
			var id = &quot;Observation/#&quot; + obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString();
			var resultReference = &lt;result&gt;
									&lt;reference value=&quot;&quot;/&gt;
								&lt;/result&gt;;
			resultReference.reference.@value = id;
			resDiagnosticReport.appendChild(resultReference);	
		}	
	}


//	logger.error( &quot;Diagnostic Report\n:&quot; +  resDiagnosticReport.toString() );

	// ~~ STEPS: 
	// 1. Add test code to ID
	// 2. Pull array of Observations for each Order/Report
	// 3. Put Observations into Diagnostic Report
	// 5. Populate Conclusion

	importPackage(Packages.java.util);
	importPackage(Packages.ca.uhn.fhir.context);
	importPackage(Packages.ca.uhn.fhir.model.dstu2.resource);
	importPackage(Packages.ca.uhn.fhir.model.dstu2.composite);	
	importPackage(Packages.ca.uhn.fhir.rest.api);
	importPackage(Packages.ca.uhn.fhir.rest.client);

	var ctx = channelMap.get( &quot;ctx&quot; );
	var client = ctx.newRestfulGenericClient( configurationMap.get(&apos;sparkRawURL&apos;) );

	var originatingCode = observation[&apos;OBR&apos;][&apos;OBR.50&apos;][&apos;CWE.1&apos;].toString();

	// The parent test is itself, but a reflex has a different parent test
	if( originatingCode == null || originatingCode == &quot;&quot; ) 
	{
		originatingCode = observation[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;CE.1&apos;].toString();
	}


	logger.error( &quot;String Report 1: &quot; + resDiagnosticReport.toString() );
	
	var report = ctx.newXmlParser().parseResource( resDiagnosticReport.toString() );	
	
	report.setSubject(new ResourceReferenceDt(  &quot;Patient/&quot; + $(&apos;PatientResourceID&apos;) ));	

	var theAttachments = new ArrayList();
	
	var attachment = new AttachmentDt();
	attachment.setContentType(&quot;application/pdf&quot;);
	attachment.setData( new java.lang.String( $(&apos;PDFBase64&apos;) ).getBytes() );
	theAttachments.add(attachment);

	var attachment2 = new AttachmentDt();
	attachment2.setContentType(&quot;text/hl7&quot;);
	attachment2.setData( new java.lang.String( $(&apos;HL7Base64&apos;) ).getBytes() );
	theAttachments.add(attachment2);
	
	report.setPresentedForm(theAttachments );	

	// Contained Observations

	var jp = ctx.newJsonParser();

     var resourceList = new ArrayList();

	var containedDt = new ContainedDt();

	for each (var obs in observation[&apos;ORU_R01.OBSERVATION&apos;].children()) {
		if (&quot;OBX&quot; == obs.name().toString()) 
		{
			// ~~ Make sure to exclude OBX observations containing PDF
//			var obxObservation = ctx.newXmlParser().parseResource( getObservationResource(obs).toString() );	
			var obxObservation = getObservationResourcePopulated( obs );

			logger.error( &quot;OBSERVATION: &quot; + jp.encodeResourceToString( obxObservation ) );			

			resourceList.add(obxObservation);
	    
		}	
	}

	containedDt.setContainedResources(resourceList);
	report.setContained(containedDt);		


	// Conclusion
	var abnormalFlags = observation[&apos;OBX.8&apos;].toString();
	if (abnormalFlags) {
		report.setConclusion(&quot;ABNORMAL&quot;);
	} else {
		report.setConclusion(&quot;NORMAL&quot;);
	}

	logger.error( &quot;String Report 2: &quot; + jp.encodeResourceToString( report) );
		
	var outcome = client.create()
		.resource(report)
		.execute();	

	logger.error( &quot;Outcome: &quot; + outcome.getResource().toString() );
	
//	arrDiagnosticReport.push(resDiagnosticReport.toString());
}

// Store DiagnosticReport resource to be processed by FHIR_Submit destination
channelMap.put(&quot;DiagnosticReport&quot;, arrDiagnosticReport);

// Store Practitioner resource to be processed by FHIR_Submit destination
channelMap.put(&quot;Practitioner&quot;, arrOrderingProvider);</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>4</sequenceNumber>
            <name>Functions pool</name>
            <script>/**
	Creates the DiagnosticOrder resourse with OBR segment mappings

	@param {String} obs - original ORU_R01.ORDER_OBSERVATION XML string
	@return {String} return DiagnosticOrder XML string
*/

function getObservationResourcePopulated(obs) {

	importPackage( Packages.java.util );
	importPackage( Packages.org.hl7.fhir.instance.model );
	importPackage( Packages.ca.uhn.fhir.model.dstu2.resource );
	importPackage( Packages.ca.uhn.fhir.model.dstu2.valueset );
	importPackage( Packages.ca.uhn.fhir.model.primitive );
	importPackage( Packages.ca.uhn.fhir.model.dstu2.composite );
	importPackage( Packages.java.text );

	var HL7DateFormat = new SimpleDateFormat(&quot;YYYYMMdd&quot;);

	var obsResource = new Observation();

	obsResource.setId( obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString());				
		
	obsResource.addIdentifier().setValue(obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString());

	switch( obs[&apos;OBX.11&apos;].toString() + &apos;&apos; )
	{
		case &quot;F&quot;:
			obsResource.setStatus(ObservationStatusEnum.FINAL);				
		break;

		case &quot;P&quot;:
			obsResource.setStatus(ObservationStatusEnum.PRELIMINARY);			
		break;

		case &quot;S&quot;:
			obsResource.setStatus(ObservationStatusEnum.AMENDED);	
		break;

		case &quot;C&quot;:
			obsResource.setStatus(ObservationStatusEnum.CANCELLED);
		break;
			
		default:
			obsResource.setStatus(ObservationStatusEnum.UNKNOWN_STATUS);
			logger.error( &quot;Unrecognized Status Code: &quot; + obs[&apos;OBX.11&apos;].toString() );	
	}

	var theCodeableConcept = new CodeableConceptDt();
	var theLoincCoding = new CodingDt();
	var theQuestCoding = new CodingDt();
	
	if (obs[&apos;OBX.3&apos;][&apos;CE.6&apos;].toString() == &quot;LN&quot;) 
	{
		// LOINC coding
		theLoincCoding.setSystem(&quot;http://loinc.org&quot;);
		theLoincCoding.setCode(obs[&apos;OBX.3&apos;][&apos;CE.4&apos;].toString());
		theLoincCoding.setDisplay(obs[&apos;OBX.3&apos;][&apos;CE.5&apos;].toString());
		theCodeableConcept.addCoding(theLoincCoding );		
	}

	theQuestCoding.setSystem(obs[&apos;OBX.3&apos;][&apos;CE.3&apos;].toString());
	theQuestCoding.setCode(obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString());
	theQuestCoding.setDisplay(obs[&apos;OBX.3&apos;][&apos;CE.2&apos;].toString());
	theCodeableConcept.addCoding(theQuestCoding );				

	obsResource.setCode(theCodeableConcept );

	if( obs[&apos;OBX.14&apos;][&apos;TS.1&apos;].toString() )
	{
		obsResource.setEffective(new DateTimeDt(HL7DateFormat.parse(obs[&apos;OBX.14&apos;][&apos;TS.1&apos;].toString())));		
	}

	if( obs[&apos;OBX.19&apos;][&apos;TS.1&apos;].toString() )
	{
		obsResource.setIssuedWithMillisPrecision(HL7DateFormat.parse(obs[&apos;OBX.19&apos;][&apos;TS.1&apos;].toString()));
	}
	obsResource.setValue( new StringDt( obs[&apos;OBX.5&apos;].toString() ) );

	var theInterpretation = new CodeableConceptDt();
	theInterpretation.setText(obs[&apos;OBX.8&apos;].toString());	
	obsResource.setInterpretation(theInterpretation );	

	var theReferenceRange = new Observation.ReferenceRange();
	var theMeaningCoding = new CodeableConceptDt();
	var theReferenceRangeMeaningCoding = new CodingDt();	

	theReferenceRangeMeaningCoding.setCode(obs[&apos;OBX.6&apos;][&apos;CE.1&apos;].toString());
	theReferenceRangeMeaningCoding.setSystem(obs[&apos;OBX.6&apos;][&apos;CE.3&apos;].toString());
	theReferenceRangeMeaningCoding.setDisplay(obs[&apos;OBX.6&apos;][&apos;CE.2&apos;].toString());
		
	theMeaningCoding.addCoding(theReferenceRangeMeaningCoding );
	theReferenceRange.setText(obs[&apos;OBX.7&apos;].toString());
		
	theReferenceRange.setMeaning(theMeaningCoding );
	obsResource.addReferenceRange(theReferenceRange);	

	logger.error( &quot;Contained Observation: \n&quot; + obsResource.toString() );
	return obsResource;
}

/*
function getDiagnosticOrder(obs) {

//
//(SN) Following fields are not mapped in this version:
// OBR.26 [Parent Result] - Optional - If OBR.11 (Specimen Action Code) is populated, then this field is populated with the data in the parent OBX.03 (Observation Identifier) subfield.
// OBR.29 [Parent] - Optional - This field is populated if OBR.11 (Specimen Action Code) is populated.
// OBR.50 [Parent Universal Service Identifier] - Optional - The universal service identifier of the parent order. This field is populated if OBR.11 (Specimen Action Code) is populated.
//
	var diagnosticOrder = &lt;DiagnosticOrder&gt;
					&lt;id value=&quot;obr-observation-request&quot;/&gt;
					&lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/diagnosticorder-precondition&quot;&gt;
						&lt;valueDateTime value=&quot;&quot;/&gt;
					&lt;/extension&gt;
					&lt;subject id=&quot;Patient&quot;/&gt;
					&lt;event&gt;
						&lt;status value=&quot;completed&quot;&gt;
							&lt;extension url=&quot;http://hl7.org/fhir/ValueSet&quot;&gt;
								&lt;valueCodeableConcept&gt;
									&lt;coding&gt;
										&lt;system value=&quot;http://hl7.org/fhir/ValueSet/v2-0123&quot;/&gt;
										&lt;code value=&quot;&quot;/&gt;
										&lt;display value=&quot;&quot;/&gt;
									&lt;/coding&gt;
								&lt;/valueCodeableConcept&gt;
							&lt;/extension&gt;
						&lt;/status&gt;
						&lt;dateTime value=&quot;&quot;/&gt;
						&lt;actor&gt;
							&lt;reference value=&quot;Practitioner/ordering-provider&quot;/&gt;
						&lt;/actor&gt;
					&lt;/event&gt;
					&lt;item&gt;
						&lt;code&gt;
							&lt;coding&gt;
								&lt;system value=&quot;&quot;/&gt;
								&lt;code value=&quot;&quot;/&gt;
								&lt;display value=&quot;&quot;/&gt;
							&lt;/coding&gt;
						&lt;/code&gt;
						&lt;specimen&gt;
							&lt;display value=&quot;G&quot;/&gt;
						&lt;/specimen&gt;
					&lt;/item&gt;
				&lt;/DiagnosticOrder&gt;;

	diagnosticOrder.extension.valueDateTime.@value = convertHL7DateTime(obs[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;TS.1&apos;].toString());

	var resultHandling = obs[&apos;OBR&apos;][&apos;OBR.49&apos;].toString();
	if (resultHandling) {
		diagnosticOrder.supportingInformation.display.@value = obs[&apos;OBR&apos;][&apos;OBR.49&apos;].toString();
	} else {
		delete diagnosticOrder.supportingInformation;
	}

	// Result Status - Indicates whether the result is partial or final.
	// March 25 2017: updated to pass API validation (see Terminology Mapping spreadsheet)	
	var statusCode = obs[&apos;OBR&apos;][&apos;OBR.25&apos;].toString();
	if (statusCode) {
		 diagnosticOrder.event.status.extension.valueCodeableConcept.coding.code.@value = statusCode;
		 diagnosticOrder.event.status.extension.valueCodeableConcept.coding.display.@value = getHL7v2CodeDescription(&quot;0123&quot;, statusCode);
	}

	//  The date/time the results were reported or status changed
	diagnosticOrder.event.dateTime.@value = convertHL7DateTime(obs[&apos;OBR&apos;][&apos;OBR.22&apos;][&apos;TS.1&apos;].toString());

	// Quest samples contain local and LOINC codes
	diagnosticOrder.item.code.coding.system.@value = obs[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;CE.3&apos;].toString();
	diagnosticOrder.item.code.coding.code.@value = obs[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;CE.1&apos;].toString();
	diagnosticOrder.item.code.coding.display.@value = obs[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;CE.2&apos;].toString();

	// Specimen Action Code
	var specimenActionCode = obs[&apos;OBR&apos;][&apos;OBR.11&apos;].toString();
	if (specimenActionCode) {
		diagnosticOrder.item.specimen.display.@value = specimenActionCode;
	} else {
		delete diagnosticOrder.item.specimen;
	}

	return diagnosticOrder.toString();
}
*/
/**
	Creates the Observation resourse with a single OBX segment mappings

	@param {String} obs - original ORU_R01.OBSERVATION XML string
	@return {String} return Observation XML string
*/
function getObservationResource(obs) {

	var obsResource = &lt;Observation xmlns=&quot;http://hl7.org/fhir&quot;&gt;			
					&lt;identifier id=&quot;&quot;/&gt;
					&lt;status value=&quot;final&quot;&gt;
						&lt;extension url=&quot;http://hl7.org/fhir/ValueSet&quot;&gt;
							&lt;valueCodeableConcept&gt;
								&lt;coding&gt;
									&lt;system value=&quot;http://hl7.org/fhir/ValueSet/v2-0085&quot;/&gt;
									&lt;code value=&quot;F&quot;/&gt;
									&lt;display value=&quot;Final results; can only be changed with a corrected result&quot;/&gt;
								&lt;/coding&gt;
							&lt;/valueCodeableConcept&gt;
						&lt;/extension&gt;
					&lt;/status&gt;
					&lt;code&gt;
						&lt;extension url=&quot;http://www.questdiagnostics.com&quot;&gt;
							&lt;valueCoding&gt;
								&lt;system value=&quot;&quot;/&gt;
								&lt;code value=&quot;&quot;/&gt;
								&lt;display value=&quot;&quot;/&gt;
							&lt;/valueCoding&gt;
						&lt;/extension&gt;
						&lt;coding&gt;
							&lt;system value=&quot;http://loinc.org&quot;/&gt;
							&lt;code value=&quot;&quot;/&gt;
							&lt;display value=&quot;&quot;/&gt;
						&lt;/coding&gt;
					&lt;/code&gt;
					&lt;effectiveDateTime value=&quot;&quot;/&gt;
					&lt;issued value=&quot;&quot;/&gt;
					&lt;valueString value=&quot;&quot;/&gt;
					&lt;interpretation&gt;
						&lt;text value=&quot;&quot;/&gt;
					&lt;/interpretation&gt;
					&lt;referenceRange&gt;
						&lt;meaning&gt;
							&lt;coding&gt;
								&lt;system value=&quot;&quot;/&gt;
								&lt;code value=&quot;&quot;/&gt;
								&lt;display value=&quot;&quot;/&gt;
							&lt;/coding&gt;
						&lt;/meaning&gt;
						&lt;text value=&quot;&quot;/&gt;
					&lt;/referenceRange&gt;
				&lt;/Observation&gt;;

	obsResource.identifier.@id =  obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString();

	// Result Status - the status of the result value
	// March 25 2017: updated to pass API validation (see Terminology Mapping spreadsheet)	
	var statusCode = obs[&apos;OBX.11&apos;].toString();
	if (statusCode) {
		 obsResource.status.extension.valueCodeableConcept.coding.code.@value = statusCode;
		 obsResource.status.extension.valueCodeableConcept.coding.display.@value = getHL7v2CodeDescription(&quot;0085&quot;, statusCode);
	}
	
	if (obs[&apos;OBX.3&apos;][&apos;CE.6&apos;].toString() == &quot;LN&quot;) {
		// Care360 own coding
		obsResource.code.extension.valueCoding.system.@value =  obs[&apos;OBX.3&apos;][&apos;CE.3&apos;].toString();
		obsResource.code.extension.valueCoding.code.@value = obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString();
		obsResource.code.extension.valueCoding.display.@value = obs[&apos;OBX.3&apos;][&apos;CE.2&apos;].toString();

		// LOINC coding
		obsResource.code.coding.system.@value = &quot;http://loinc.org&quot;;
		obsResource.code.coding.code.@value = obs[&apos;OBX.3&apos;][&apos;CE.4&apos;].toString();
		obsResource.code.coding.display.@value = obs[&apos;OBX.3&apos;][&apos;CE.5&apos;].toString();		
	} else {
		delete obsResource.code.extension;
		obsResource.code.coding.system.@value =  obs[&apos;OBX.3&apos;][&apos;CE.3&apos;].toString();
		obsResource.code.coding.code.@value = obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString();
		obsResource.code.coding.display.@value = obs[&apos;OBX.3&apos;][&apos;CE.2&apos;].toString();			
	}

	var dateTimeOfObservation = obs[&apos;OBX.14&apos;][&apos;TS.1&apos;].toString();
	if (dateTimeOfObservation) {
		obsResource.effectiveDateTime.@value = convertHL7DateTime(dateTimeOfObservation);
	} else {
		delete obsResource.effectiveDateTime;
	}

	var dateTimeOfAnalysis = obs[&apos;OBX.19&apos;][&apos;TS.1&apos;].toString();
	if (dateTimeOfAnalysis) {
		obsResource.issued.@value = convertHL7DateTime(dateTimeOfAnalysis);
	} else {
		delete obsResource.issued;
	}

	// March 15: Issues #13: OBX.5 [Observation Value] using SN (Structured Numeric) data type
	var observationValue = &quot;&quot;;
	if (obs[&apos;OBX.5&apos;][&apos;SN.3&apos;]) {
		for each (var sn in obs[&apos;OBX.5&apos;].children()) {
			if (sn.toString()) observationValue += sn.toString(); 
		}
	} else {
		observationValue = obs[&apos;OBX.5&apos;].toString();
	}
	
	if (observationValue) {
		obsResource.valueString.@value = observationValue;
	} else {
		delete obsResource.valueString;
	}

	var abnormalFlags = obs[&apos;OBX.8&apos;].toString();
	if (abnormalFlags) {
		obsResource.interpretation.text.@value = abnormalFlags;
	} else {
		delete obsResource.interpretation;
	}

	var unitsOfMeasure = obs[&apos;OBX.6&apos;][&apos;CE.1&apos;].toString();
	var meaningPresent = true;
	if (unitsOfMeasure) {
		obsResource.referenceRange.meaning.coding.code.@value = unitsOfMeasure;
		if (obs[&apos;OBX.6&apos;][&apos;CE.3&apos;].toString() != &quot;&quot;) {
			obsResource.referenceRange.meaning.coding.system.@value = obs[&apos;OBX.6&apos;][&apos;CE.3&apos;].toString();
		} else {
			delete obsResource.referenceRange.meaning.coding.system;
		}
		if (obs[&apos;OBX.6&apos;][&apos;CE.2&apos;].toString() != &quot;&quot;) {
			obsResource.referenceRange.meaning.coding.display.@value = obs[&apos;OBX.6&apos;][&apos;CE.2&apos;].toString();
		} else {
			delete obsResource.referenceRange.meaning.coding.display;
		}
	} else {
		delete obsResource.referenceRange.meaning;
		meaningPresent = false;
	}
	
	var referencesRange = obs[&apos;OBX.7&apos;].toString();
	var rangePresent = true;
	if (referencesRange) {
		obsResource.referenceRange.text.@value = referencesRange;
	} else {
		delete obsResource.referenceRange.text;
		rangePresent = false;
	}

	if (!meaningPresent &amp;&amp; !rangePresent) delete obsResource.referenceRange;

	// Reference to performing organization
//	obsResource.performer.reference.@value=&quot;Practitioner/obx-performing-organization-&quot; + obs[&apos;OBX.23&apos;][&apos;XON.10&apos;].toString();
	logger.error( &quot;Contained Observation: \n&quot; + obsResource.toString() );
	return obsResource.toString();
	
}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>/**
	Creates the DiagnosticOrder resourse with OBR segment mappings

	@param {String} obs - original ORU_R01.ORDER_OBSERVATION XML string
	@return {String} return DiagnosticOrder XML string
*/

function getObservationResourcePopulated(obs) {

	importPackage( Packages.java.util );
	importPackage( Packages.org.hl7.fhir.instance.model );
	importPackage( Packages.ca.uhn.fhir.model.dstu2.resource );
	importPackage( Packages.ca.uhn.fhir.model.dstu2.valueset );
	importPackage( Packages.ca.uhn.fhir.model.primitive );
	importPackage( Packages.ca.uhn.fhir.model.dstu2.composite );
	importPackage( Packages.java.text );

	var HL7DateFormat = new SimpleDateFormat(&quot;YYYYMMdd&quot;);

	var obsResource = new Observation();

	obsResource.setId( obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString());				
		
	obsResource.addIdentifier().setValue(obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString());

	switch( obs[&apos;OBX.11&apos;].toString() + &apos;&apos; )
	{
		case &quot;F&quot;:
			obsResource.setStatus(ObservationStatusEnum.FINAL);				
		break;

		case &quot;P&quot;:
			obsResource.setStatus(ObservationStatusEnum.PRELIMINARY);			
		break;

		case &quot;S&quot;:
			obsResource.setStatus(ObservationStatusEnum.AMENDED);	
		break;

		case &quot;C&quot;:
			obsResource.setStatus(ObservationStatusEnum.CANCELLED);
		break;
			
		default:
			obsResource.setStatus(ObservationStatusEnum.UNKNOWN_STATUS);
			logger.error( &quot;Unrecognized Status Code: &quot; + obs[&apos;OBX.11&apos;].toString() );	
	}

	var theCodeableConcept = new CodeableConceptDt();
	var theLoincCoding = new CodingDt();
	var theQuestCoding = new CodingDt();
	
	if (obs[&apos;OBX.3&apos;][&apos;CE.6&apos;].toString() == &quot;LN&quot;) 
	{
		// LOINC coding
		theLoincCoding.setSystem(&quot;http://loinc.org&quot;);
		theLoincCoding.setCode(obs[&apos;OBX.3&apos;][&apos;CE.4&apos;].toString());
		theLoincCoding.setDisplay(obs[&apos;OBX.3&apos;][&apos;CE.5&apos;].toString());
		theCodeableConcept.addCoding(theLoincCoding );		
	}

	theQuestCoding.setSystem(obs[&apos;OBX.3&apos;][&apos;CE.3&apos;].toString());
	theQuestCoding.setCode(obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString());
	theQuestCoding.setDisplay(obs[&apos;OBX.3&apos;][&apos;CE.2&apos;].toString());
	theCodeableConcept.addCoding(theQuestCoding );				

	obsResource.setCode(theCodeableConcept );

	if( obs[&apos;OBX.14&apos;][&apos;TS.1&apos;].toString() )
	{
		obsResource.setEffective(new DateTimeDt(HL7DateFormat.parse(obs[&apos;OBX.14&apos;][&apos;TS.1&apos;].toString())));		
	}

	if( obs[&apos;OBX.19&apos;][&apos;TS.1&apos;].toString() )
	{
		obsResource.setIssuedWithMillisPrecision(HL7DateFormat.parse(obs[&apos;OBX.19&apos;][&apos;TS.1&apos;].toString()));
	}
	obsResource.setValue( new StringDt( obs[&apos;OBX.5&apos;].toString() ) );

	var theInterpretation = new CodeableConceptDt();
	theInterpretation.setText(obs[&apos;OBX.8&apos;].toString());	
	obsResource.setInterpretation(theInterpretation );	

	var theReferenceRange = new Observation.ReferenceRange();
	var theMeaningCoding = new CodeableConceptDt();
	var theReferenceRangeMeaningCoding = new CodingDt();	

	theReferenceRangeMeaningCoding.setCode(obs[&apos;OBX.6&apos;][&apos;CE.1&apos;].toString());
	theReferenceRangeMeaningCoding.setSystem(obs[&apos;OBX.6&apos;][&apos;CE.3&apos;].toString());
	theReferenceRangeMeaningCoding.setDisplay(obs[&apos;OBX.6&apos;][&apos;CE.2&apos;].toString());
		
	theMeaningCoding.addCoding(theReferenceRangeMeaningCoding );
	theReferenceRange.setText(obs[&apos;OBX.7&apos;].toString());
		
	theReferenceRange.setMeaning(theMeaningCoding );
	obsResource.addReferenceRange(theReferenceRange);	

	logger.error( &quot;Contained Observation: \n&quot; + obsResource.toString() );
	return obsResource;
}

/*
function getDiagnosticOrder(obs) {

//
//(SN) Following fields are not mapped in this version:
// OBR.26 [Parent Result] - Optional - If OBR.11 (Specimen Action Code) is populated, then this field is populated with the data in the parent OBX.03 (Observation Identifier) subfield.
// OBR.29 [Parent] - Optional - This field is populated if OBR.11 (Specimen Action Code) is populated.
// OBR.50 [Parent Universal Service Identifier] - Optional - The universal service identifier of the parent order. This field is populated if OBR.11 (Specimen Action Code) is populated.
//
	var diagnosticOrder = &lt;DiagnosticOrder&gt;
					&lt;id value=&quot;obr-observation-request&quot;/&gt;
					&lt;extension url=&quot;http://hl7.org/fhir/StructureDefinition/diagnosticorder-precondition&quot;&gt;
						&lt;valueDateTime value=&quot;&quot;/&gt;
					&lt;/extension&gt;
					&lt;subject id=&quot;Patient&quot;/&gt;
					&lt;event&gt;
						&lt;status value=&quot;completed&quot;&gt;
							&lt;extension url=&quot;http://hl7.org/fhir/ValueSet&quot;&gt;
								&lt;valueCodeableConcept&gt;
									&lt;coding&gt;
										&lt;system value=&quot;http://hl7.org/fhir/ValueSet/v2-0123&quot;/&gt;
										&lt;code value=&quot;&quot;/&gt;
										&lt;display value=&quot;&quot;/&gt;
									&lt;/coding&gt;
								&lt;/valueCodeableConcept&gt;
							&lt;/extension&gt;
						&lt;/status&gt;
						&lt;dateTime value=&quot;&quot;/&gt;
						&lt;actor&gt;
							&lt;reference value=&quot;Practitioner/ordering-provider&quot;/&gt;
						&lt;/actor&gt;
					&lt;/event&gt;
					&lt;item&gt;
						&lt;code&gt;
							&lt;coding&gt;
								&lt;system value=&quot;&quot;/&gt;
								&lt;code value=&quot;&quot;/&gt;
								&lt;display value=&quot;&quot;/&gt;
							&lt;/coding&gt;
						&lt;/code&gt;
						&lt;specimen&gt;
							&lt;display value=&quot;G&quot;/&gt;
						&lt;/specimen&gt;
					&lt;/item&gt;
				&lt;/DiagnosticOrder&gt;;

	diagnosticOrder.extension.valueDateTime.@value = convertHL7DateTime(obs[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;TS.1&apos;].toString());

	var resultHandling = obs[&apos;OBR&apos;][&apos;OBR.49&apos;].toString();
	if (resultHandling) {
		diagnosticOrder.supportingInformation.display.@value = obs[&apos;OBR&apos;][&apos;OBR.49&apos;].toString();
	} else {
		delete diagnosticOrder.supportingInformation;
	}

	// Result Status - Indicates whether the result is partial or final.
	// March 25 2017: updated to pass API validation (see Terminology Mapping spreadsheet)	
	var statusCode = obs[&apos;OBR&apos;][&apos;OBR.25&apos;].toString();
	if (statusCode) {
		 diagnosticOrder.event.status.extension.valueCodeableConcept.coding.code.@value = statusCode;
		 diagnosticOrder.event.status.extension.valueCodeableConcept.coding.display.@value = getHL7v2CodeDescription(&quot;0123&quot;, statusCode);
	}

	//  The date/time the results were reported or status changed
	diagnosticOrder.event.dateTime.@value = convertHL7DateTime(obs[&apos;OBR&apos;][&apos;OBR.22&apos;][&apos;TS.1&apos;].toString());

	// Quest samples contain local and LOINC codes
	diagnosticOrder.item.code.coding.system.@value = obs[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;CE.3&apos;].toString();
	diagnosticOrder.item.code.coding.code.@value = obs[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;CE.1&apos;].toString();
	diagnosticOrder.item.code.coding.display.@value = obs[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;CE.2&apos;].toString();

	// Specimen Action Code
	var specimenActionCode = obs[&apos;OBR&apos;][&apos;OBR.11&apos;].toString();
	if (specimenActionCode) {
		diagnosticOrder.item.specimen.display.@value = specimenActionCode;
	} else {
		delete diagnosticOrder.item.specimen;
	}

	return diagnosticOrder.toString();
}
*/
/**
	Creates the Observation resourse with a single OBX segment mappings

	@param {String} obs - original ORU_R01.OBSERVATION XML string
	@return {String} return Observation XML string
*/
function getObservationResource(obs) {

	var obsResource = &lt;Observation xmlns=&quot;http://hl7.org/fhir&quot;&gt;			
					&lt;identifier id=&quot;&quot;/&gt;
					&lt;status value=&quot;final&quot;&gt;
						&lt;extension url=&quot;http://hl7.org/fhir/ValueSet&quot;&gt;
							&lt;valueCodeableConcept&gt;
								&lt;coding&gt;
									&lt;system value=&quot;http://hl7.org/fhir/ValueSet/v2-0085&quot;/&gt;
									&lt;code value=&quot;F&quot;/&gt;
									&lt;display value=&quot;Final results; can only be changed with a corrected result&quot;/&gt;
								&lt;/coding&gt;
							&lt;/valueCodeableConcept&gt;
						&lt;/extension&gt;
					&lt;/status&gt;
					&lt;code&gt;
						&lt;extension url=&quot;http://www.questdiagnostics.com&quot;&gt;
							&lt;valueCoding&gt;
								&lt;system value=&quot;&quot;/&gt;
								&lt;code value=&quot;&quot;/&gt;
								&lt;display value=&quot;&quot;/&gt;
							&lt;/valueCoding&gt;
						&lt;/extension&gt;
						&lt;coding&gt;
							&lt;system value=&quot;http://loinc.org&quot;/&gt;
							&lt;code value=&quot;&quot;/&gt;
							&lt;display value=&quot;&quot;/&gt;
						&lt;/coding&gt;
					&lt;/code&gt;
					&lt;effectiveDateTime value=&quot;&quot;/&gt;
					&lt;issued value=&quot;&quot;/&gt;
					&lt;valueString value=&quot;&quot;/&gt;
					&lt;interpretation&gt;
						&lt;text value=&quot;&quot;/&gt;
					&lt;/interpretation&gt;
					&lt;referenceRange&gt;
						&lt;meaning&gt;
							&lt;coding&gt;
								&lt;system value=&quot;&quot;/&gt;
								&lt;code value=&quot;&quot;/&gt;
								&lt;display value=&quot;&quot;/&gt;
							&lt;/coding&gt;
						&lt;/meaning&gt;
						&lt;text value=&quot;&quot;/&gt;
					&lt;/referenceRange&gt;
				&lt;/Observation&gt;;

	obsResource.identifier.@id =  obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString();

	// Result Status - the status of the result value
	// March 25 2017: updated to pass API validation (see Terminology Mapping spreadsheet)	
	var statusCode = obs[&apos;OBX.11&apos;].toString();
	if (statusCode) {
		 obsResource.status.extension.valueCodeableConcept.coding.code.@value = statusCode;
		 obsResource.status.extension.valueCodeableConcept.coding.display.@value = getHL7v2CodeDescription(&quot;0085&quot;, statusCode);
	}
	
	if (obs[&apos;OBX.3&apos;][&apos;CE.6&apos;].toString() == &quot;LN&quot;) {
		// Care360 own coding
		obsResource.code.extension.valueCoding.system.@value =  obs[&apos;OBX.3&apos;][&apos;CE.3&apos;].toString();
		obsResource.code.extension.valueCoding.code.@value = obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString();
		obsResource.code.extension.valueCoding.display.@value = obs[&apos;OBX.3&apos;][&apos;CE.2&apos;].toString();

		// LOINC coding
		obsResource.code.coding.system.@value = &quot;http://loinc.org&quot;;
		obsResource.code.coding.code.@value = obs[&apos;OBX.3&apos;][&apos;CE.4&apos;].toString();
		obsResource.code.coding.display.@value = obs[&apos;OBX.3&apos;][&apos;CE.5&apos;].toString();		
	} else {
		delete obsResource.code.extension;
		obsResource.code.coding.system.@value =  obs[&apos;OBX.3&apos;][&apos;CE.3&apos;].toString();
		obsResource.code.coding.code.@value = obs[&apos;OBX.3&apos;][&apos;CE.1&apos;].toString();
		obsResource.code.coding.display.@value = obs[&apos;OBX.3&apos;][&apos;CE.2&apos;].toString();			
	}

	var dateTimeOfObservation = obs[&apos;OBX.14&apos;][&apos;TS.1&apos;].toString();
	if (dateTimeOfObservation) {
		obsResource.effectiveDateTime.@value = convertHL7DateTime(dateTimeOfObservation);
	} else {
		delete obsResource.effectiveDateTime;
	}

	var dateTimeOfAnalysis = obs[&apos;OBX.19&apos;][&apos;TS.1&apos;].toString();
	if (dateTimeOfAnalysis) {
		obsResource.issued.@value = convertHL7DateTime(dateTimeOfAnalysis);
	} else {
		delete obsResource.issued;
	}

	// March 15: Issues #13: OBX.5 [Observation Value] using SN (Structured Numeric) data type
	var observationValue = &quot;&quot;;
	if (obs[&apos;OBX.5&apos;][&apos;SN.3&apos;]) {
		for each (var sn in obs[&apos;OBX.5&apos;].children()) {
			if (sn.toString()) observationValue += sn.toString(); 
		}
	} else {
		observationValue = obs[&apos;OBX.5&apos;].toString();
	}
	
	if (observationValue) {
		obsResource.valueString.@value = observationValue;
	} else {
		delete obsResource.valueString;
	}

	var abnormalFlags = obs[&apos;OBX.8&apos;].toString();
	if (abnormalFlags) {
		obsResource.interpretation.text.@value = abnormalFlags;
	} else {
		delete obsResource.interpretation;
	}

	var unitsOfMeasure = obs[&apos;OBX.6&apos;][&apos;CE.1&apos;].toString();
	var meaningPresent = true;
	if (unitsOfMeasure) {
		obsResource.referenceRange.meaning.coding.code.@value = unitsOfMeasure;
		if (obs[&apos;OBX.6&apos;][&apos;CE.3&apos;].toString() != &quot;&quot;) {
			obsResource.referenceRange.meaning.coding.system.@value = obs[&apos;OBX.6&apos;][&apos;CE.3&apos;].toString();
		} else {
			delete obsResource.referenceRange.meaning.coding.system;
		}
		if (obs[&apos;OBX.6&apos;][&apos;CE.2&apos;].toString() != &quot;&quot;) {
			obsResource.referenceRange.meaning.coding.display.@value = obs[&apos;OBX.6&apos;][&apos;CE.2&apos;].toString();
		} else {
			delete obsResource.referenceRange.meaning.coding.display;
		}
	} else {
		delete obsResource.referenceRange.meaning;
		meaningPresent = false;
	}
	
	var referencesRange = obs[&apos;OBX.7&apos;].toString();
	var rangePresent = true;
	if (referencesRange) {
		obsResource.referenceRange.text.@value = referencesRange;
	} else {
		delete obsResource.referenceRange.text;
		rangePresent = false;
	}

	if (!meaningPresent &amp;&amp; !rangePresent) delete obsResource.referenceRange;

	// Reference to performing organization
//	obsResource.performer.reference.@value=&quot;Practitioner/obx-performing-organization-&quot; + obs[&apos;OBX.23&apos;][&apos;XON.10&apos;].toString();
	logger.error( &quot;Contained Observation: \n&quot; + obsResource.toString() );
	return obsResource.toString();
	
}</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>5</sequenceNumber>
            <name>Practitioner (Ordering Provider) resource</name>
            <script>/**
	Creates the Practitioner resourse for Ordering Provider with ORC segment mappings

	@param {String} obs - original ORU_R01.ORDER_OBSERVATION XML string
	@return {String} return Practitioner XML string
*/
function getOrderingProvider(obs) {

	// Mar 16 update: /Practitioner/practitionerRole/organization is changed to 
	// /Practitioner/practitionerRole/managingOrganization - tooling issue on the &quot;left side&quot;
	// Note: this breaks STU3 1.4.0 XML Schema validation

	var resPractitioner = &lt;Practitioner&gt;
						&lt;id value=&quot;ordering-provider&quot;/&gt;
						&lt;contained&gt;
							&lt;Organization&gt;
								&lt;id value=&quot;orc21-ordering-facility-1&quot;/&gt;
								&lt;identifier&gt;
									&lt;value value=&quot;&quot;/&gt;
								&lt;/identifier&gt;
								&lt;name value=&quot;&quot;/&gt;
								&lt;telecom&gt;
									&lt;system value=&quot;phone&quot;/&gt;
									&lt;value value=&quot;&quot;/&gt;
									&lt;use value=&quot;work&quot;/&gt;
								&lt;/telecom&gt;
								&lt;address&gt;
									&lt;line value=&quot;&quot;/&gt;
									&lt;city value=&quot;&quot;/&gt;
									&lt;state value=&quot;&quot;/&gt;
									&lt;postalCode value=&quot;&quot;/&gt;
								&lt;/address&gt;
							&lt;/Organization&gt;
						&lt;/contained&gt;
						&lt;identifier&gt;
							&lt;system value=&quot;NPI&quot;/&gt;
							&lt;value value=&quot;&quot;/&gt;
						&lt;/identifier&gt;
						&lt;name/&gt;
						&lt;practitionerRole&gt;
							&lt;managingOrganization&gt;
								&lt;reference value=&quot;Organization/orc21-ordering-facility-1&quot;/&gt;
							&lt;/managingOrganization&gt;
						&lt;/practitionerRole&gt;
					&lt;/Practitioner&gt;;

	// Practitioner&apos;s own ID
	resPractitioner.identifier.value.@value = obs[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.1&apos;].toString();
	resPractitioner.identifier.system.@value = obs[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.13&apos;].toString();

	// Organization this Practitioner belongs to
	resPractitioner.contained.Organization.identifier.value.@value = obs[&apos;ORC&apos;][&apos;ORC.21&apos;][&apos;XON.10&apos;].toString();
	resPractitioner.contained.Organization.name.@value = obs[&apos;ORC&apos;][&apos;ORC.21&apos;][&apos;XON.1&apos;].toString();

	// Organization telecom
	var telecom = &quot;(&quot; + obs[&apos;ORC&apos;][&apos;ORC.23&apos;][&apos;XTN.6&apos;].toString() + &quot;) &quot; + convertPhone(obs[&apos;ORC&apos;][&apos;ORC.23&apos;][&apos;XTN.7&apos;].toString());
	if (telecom.length &gt; 4) {
		resPractitioner.contained.Organization.telecom.value.@value = telecom;
	} else delete resPractitioner.contained.Organization.telecom;

	// Organization address
	var addressInUse = false;
	var line = obs[&apos;ORC&apos;][&apos;ORC.22&apos;][&apos;XAD.1&apos;][&apos;SAD.1&apos;].toString();
	if (line) {
		addressInUse = true;
		resPractitioner.contained.Organization.address.line.@value = line;
	}

	var city = obs[&apos;ORC&apos;][&apos;ORC.22&apos;][&apos;XAD.3&apos;].toString();
	if (city) {
		addressInUse = true;		
		resPractitioner.contained.Organization.address.city.@value = city;
	}

	var state = obs[&apos;ORC&apos;][&apos;ORC.22&apos;][&apos;XAD.4&apos;].toString();
	if (state) {
		addressInUse = true;		
		resPractitioner.contained.Organization.address.state.@value = state;
	}	

	var postalCode = obs[&apos;ORC&apos;][&apos;ORC.22&apos;][&apos;XAD.5&apos;].toString();
	if (postalCode) {
		addressInUse = true;		
		resPractitioner.contained.Organization.address.postalCode.@value = postalCode;
	}

	if (!addressInUse) delete resPractitioner.contained.Organization.address;

	// Practitioner name
	var familyName = obs[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.2&apos;][&apos;FN.1&apos;].toString();
	if (familyName) {
		resPractitioner.name.* = new XMLList();
		resPractitioner.name.* += new XML(&apos;&lt;family value=&quot;&apos; + familyName +&apos;&quot;/&gt;&apos;);
		if (obs[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.3&apos;].toString())
			resPractitioner.name.* += new XML(&apos;&lt;given value=&quot;&apos; + obs[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.3&apos;].toString() +&apos;&quot;/&gt;&apos;);
		if (obs[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.4&apos;].toString())
			resPractitioner.name.* += new XML(&apos;&lt;given value=&quot;&apos; + obs[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.4&apos;].toString() +&apos;&quot;/&gt;&apos;);	
	} else {
		delete resPractitioner.name;
	}

	return resPractitioner.toString();	
}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>/**
	Creates the Practitioner resourse for Ordering Provider with ORC segment mappings

	@param {String} obs - original ORU_R01.ORDER_OBSERVATION XML string
	@return {String} return Practitioner XML string
*/
function getOrderingProvider(obs) {

	// Mar 16 update: /Practitioner/practitionerRole/organization is changed to 
	// /Practitioner/practitionerRole/managingOrganization - tooling issue on the &quot;left side&quot;
	// Note: this breaks STU3 1.4.0 XML Schema validation

	var resPractitioner = &lt;Practitioner&gt;
						&lt;id value=&quot;ordering-provider&quot;/&gt;
						&lt;contained&gt;
							&lt;Organization&gt;
								&lt;id value=&quot;orc21-ordering-facility-1&quot;/&gt;
								&lt;identifier&gt;
									&lt;value value=&quot;&quot;/&gt;
								&lt;/identifier&gt;
								&lt;name value=&quot;&quot;/&gt;
								&lt;telecom&gt;
									&lt;system value=&quot;phone&quot;/&gt;
									&lt;value value=&quot;&quot;/&gt;
									&lt;use value=&quot;work&quot;/&gt;
								&lt;/telecom&gt;
								&lt;address&gt;
									&lt;line value=&quot;&quot;/&gt;
									&lt;city value=&quot;&quot;/&gt;
									&lt;state value=&quot;&quot;/&gt;
									&lt;postalCode value=&quot;&quot;/&gt;
								&lt;/address&gt;
							&lt;/Organization&gt;
						&lt;/contained&gt;
						&lt;identifier&gt;
							&lt;system value=&quot;NPI&quot;/&gt;
							&lt;value value=&quot;&quot;/&gt;
						&lt;/identifier&gt;
						&lt;name/&gt;
						&lt;practitionerRole&gt;
							&lt;managingOrganization&gt;
								&lt;reference value=&quot;Organization/orc21-ordering-facility-1&quot;/&gt;
							&lt;/managingOrganization&gt;
						&lt;/practitionerRole&gt;
					&lt;/Practitioner&gt;;

	// Practitioner&apos;s own ID
	resPractitioner.identifier.value.@value = obs[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.1&apos;].toString();
	resPractitioner.identifier.system.@value = obs[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.13&apos;].toString();

	// Organization this Practitioner belongs to
	resPractitioner.contained.Organization.identifier.value.@value = obs[&apos;ORC&apos;][&apos;ORC.21&apos;][&apos;XON.10&apos;].toString();
	resPractitioner.contained.Organization.name.@value = obs[&apos;ORC&apos;][&apos;ORC.21&apos;][&apos;XON.1&apos;].toString();

	// Organization telecom
	var telecom = &quot;(&quot; + obs[&apos;ORC&apos;][&apos;ORC.23&apos;][&apos;XTN.6&apos;].toString() + &quot;) &quot; + convertPhone(obs[&apos;ORC&apos;][&apos;ORC.23&apos;][&apos;XTN.7&apos;].toString());
	if (telecom.length &gt; 4) {
		resPractitioner.contained.Organization.telecom.value.@value = telecom;
	} else delete resPractitioner.contained.Organization.telecom;

	// Organization address
	var addressInUse = false;
	var line = obs[&apos;ORC&apos;][&apos;ORC.22&apos;][&apos;XAD.1&apos;][&apos;SAD.1&apos;].toString();
	if (line) {
		addressInUse = true;
		resPractitioner.contained.Organization.address.line.@value = line;
	}

	var city = obs[&apos;ORC&apos;][&apos;ORC.22&apos;][&apos;XAD.3&apos;].toString();
	if (city) {
		addressInUse = true;		
		resPractitioner.contained.Organization.address.city.@value = city;
	}

	var state = obs[&apos;ORC&apos;][&apos;ORC.22&apos;][&apos;XAD.4&apos;].toString();
	if (state) {
		addressInUse = true;		
		resPractitioner.contained.Organization.address.state.@value = state;
	}	

	var postalCode = obs[&apos;ORC&apos;][&apos;ORC.22&apos;][&apos;XAD.5&apos;].toString();
	if (postalCode) {
		addressInUse = true;		
		resPractitioner.contained.Organization.address.postalCode.@value = postalCode;
	}

	if (!addressInUse) delete resPractitioner.contained.Organization.address;

	// Practitioner name
	var familyName = obs[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.2&apos;][&apos;FN.1&apos;].toString();
	if (familyName) {
		resPractitioner.name.* = new XMLList();
		resPractitioner.name.* += new XML(&apos;&lt;family value=&quot;&apos; + familyName +&apos;&quot;/&gt;&apos;);
		if (obs[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.3&apos;].toString())
			resPractitioner.name.* += new XML(&apos;&lt;given value=&quot;&apos; + obs[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.3&apos;].toString() +&apos;&quot;/&gt;&apos;);
		if (obs[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.4&apos;].toString())
			resPractitioner.name.* += new XML(&apos;&lt;given value=&quot;&apos; + obs[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;XCN.4&apos;].toString() +&apos;&quot;/&gt;&apos;);	
	} else {
		delete resPractitioner.name;
	}

	return resPractitioner.toString();	
}</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>6</sequenceNumber>
            <name>Practitioner (Performing Organization) resource</name>
            <script>/**
	Creates the Practitioner resourse for OBX.23 [Performing Organization Name],
	OBX.24 [Performing Organization Address] and OBX.25[Performing Organization Medical Director] for each OBX segment

	@param {String} obs - original ORU_R01.ORDER_OBSERVATION XML string
	@return {String} return Practitioner XML string
*/
function getPerformingProvider(obs) {

	var resPractitioner = &lt;Practitioner&gt;
						&lt;id value=&quot;obx-performing-organization&quot;/&gt;
						&lt;contained&gt;
							&lt;Organization&gt;
								&lt;identifier&gt;
									&lt;value value=&quot;&quot;/&gt;
									&lt;assigner id=&quot;CLIA&quot;/&gt;
								&lt;/identifier&gt;
								&lt;type&gt;
									&lt;text value=&quot;FI&quot;/&gt;
								&lt;/type&gt;
								&lt;name value=&quot;&quot;/&gt;
								&lt;address&gt;
									&lt;line value=&quot;&quot;/&gt;
									&lt;city value=&quot;&quot;/&gt;
									&lt;state value=&quot;&quot;/&gt;
									&lt;postalCode value=&quot;&quot;/&gt;
								&lt;/address&gt;
							&lt;/Organization&gt;
						&lt;/contained&gt;
						&lt;identifier&gt;
							&lt;type&gt;
								&lt;text value=&quot;NPI&quot;/&gt;
							&lt;/type&gt;
							&lt;value value=&quot;&quot;/&gt;
							&lt;assigner id=&quot;EN&quot;/&gt;
						&lt;/identifier&gt;
						&lt;name/&gt;
					&lt;/Practitioner&gt;;

	// Performing Organization Name
	resPractitioner.id.@value = &quot;obx-performing-organization-&quot; + obs[&apos;OBX.23&apos;][&apos;XON.10&apos;].toString();
	resPractitioner.contained.Organization.identifier.value.@value = obs[&apos;OBX.23&apos;][&apos;XON.10&apos;].toString();
	resPractitioner.contained.Organization.name.@value = obs[&apos;OBX.23&apos;][&apos;XON.1&apos;].toString();
	

	// Performing Organization Address
	var addressInUse = false;
	var line = obs[&apos;OBX.24&apos;][&apos;XAD.1&apos;][&apos;SAD.1&apos;].toString();
	if (line) {
		addressInUse = true;
		resPractitioner.contained.Organization.address.line.@value = line;
	}

	var city = obs[&apos;OBX.24&apos;][&apos;XAD.3&apos;].toString();
	if (city) {
		addressInUse = true;		
		resPractitioner.contained.Organization.address.city.@value = city;
	}

	var state = obs[&apos;OBX.24&apos;][&apos;XAD.4&apos;].toString();
	if (state) {
		addressInUse = true;		
		resPractitioner.contained.Organization.address.state.@value = state;
	}	

	var postalCode = obs[&apos;OBX.24&apos;][&apos;XAD.5&apos;].toString();
	if (postalCode) {
		addressInUse = true;		
		resPractitioner.contained.Organization.address.postalCode.@value = postalCode;
	}

	if (!addressInUse) delete resPractitioner.contained.Organization.address;


	// Medical Director
	resPractitioner.identifier.value.@value = obs[&apos;OBX.25&apos;][&apos;XCN.1&apos;].toString();
	resPractitioner.identifier.assigner.@id = obs[&apos;OBX.25&apos;][&apos;XCN.14&apos;][&apos;HD.1&apos;].toString()

	// Medical Director Name
	var familyName = obs[&apos;OBX.25&apos;][&apos;XCN.2&apos;][&apos;FN.1&apos;].toString();
	if (familyName) {
		resPractitioner.name.* = new XMLList();
		resPractitioner.name.* += new XML(&apos;&lt;family value=&quot;&apos; + familyName +&apos;&quot;/&gt;&apos;);
		if (obs[&apos;OBX.25&apos;][&apos;XCN.3&apos;].toString())
			resPractitioner.name.* += new XML(&apos;&lt;given value=&quot;&apos; + obs[&apos;OBX.25&apos;][&apos;XCN.3&apos;].toString() +&apos;&quot;/&gt;&apos;);
		if (obs[&apos;OBX.25&apos;][&apos;XCN.4&apos;].toString())
			resPractitioner.name.* += new XML(&apos;&lt;given value=&quot;&apos; + obs[&apos;OBX.25&apos;][&apos;XCN.4&apos;].toString() +&apos;&quot;/&gt;&apos;);
		if (obs[&apos;OBX.25&apos;][&apos;XCN.5&apos;].toString())
			resPractitioner.name.* += new XML(&apos;&lt;suffix value=&quot;&apos; + obs[&apos;OBX.25&apos;][&apos;XCN.5&apos;].toString() +&apos;&quot;/&gt;&apos;);				
	} else {
		delete resPractitioner.name;
	}

	
	return resPractitioner.toString();		
}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>/**
	Creates the Practitioner resourse for OBX.23 [Performing Organization Name],
	OBX.24 [Performing Organization Address] and OBX.25[Performing Organization Medical Director] for each OBX segment

	@param {String} obs - original ORU_R01.ORDER_OBSERVATION XML string
	@return {String} return Practitioner XML string
*/
function getPerformingProvider(obs) {

	var resPractitioner = &lt;Practitioner&gt;
						&lt;id value=&quot;obx-performing-organization&quot;/&gt;
						&lt;contained&gt;
							&lt;Organization&gt;
								&lt;identifier&gt;
									&lt;value value=&quot;&quot;/&gt;
									&lt;assigner id=&quot;CLIA&quot;/&gt;
								&lt;/identifier&gt;
								&lt;type&gt;
									&lt;text value=&quot;FI&quot;/&gt;
								&lt;/type&gt;
								&lt;name value=&quot;&quot;/&gt;
								&lt;address&gt;
									&lt;line value=&quot;&quot;/&gt;
									&lt;city value=&quot;&quot;/&gt;
									&lt;state value=&quot;&quot;/&gt;
									&lt;postalCode value=&quot;&quot;/&gt;
								&lt;/address&gt;
							&lt;/Organization&gt;
						&lt;/contained&gt;
						&lt;identifier&gt;
							&lt;type&gt;
								&lt;text value=&quot;NPI&quot;/&gt;
							&lt;/type&gt;
							&lt;value value=&quot;&quot;/&gt;
							&lt;assigner id=&quot;EN&quot;/&gt;
						&lt;/identifier&gt;
						&lt;name/&gt;
					&lt;/Practitioner&gt;;

	// Performing Organization Name
	resPractitioner.id.@value = &quot;obx-performing-organization-&quot; + obs[&apos;OBX.23&apos;][&apos;XON.10&apos;].toString();
	resPractitioner.contained.Organization.identifier.value.@value = obs[&apos;OBX.23&apos;][&apos;XON.10&apos;].toString();
	resPractitioner.contained.Organization.name.@value = obs[&apos;OBX.23&apos;][&apos;XON.1&apos;].toString();
	

	// Performing Organization Address
	var addressInUse = false;
	var line = obs[&apos;OBX.24&apos;][&apos;XAD.1&apos;][&apos;SAD.1&apos;].toString();
	if (line) {
		addressInUse = true;
		resPractitioner.contained.Organization.address.line.@value = line;
	}

	var city = obs[&apos;OBX.24&apos;][&apos;XAD.3&apos;].toString();
	if (city) {
		addressInUse = true;		
		resPractitioner.contained.Organization.address.city.@value = city;
	}

	var state = obs[&apos;OBX.24&apos;][&apos;XAD.4&apos;].toString();
	if (state) {
		addressInUse = true;		
		resPractitioner.contained.Organization.address.state.@value = state;
	}	

	var postalCode = obs[&apos;OBX.24&apos;][&apos;XAD.5&apos;].toString();
	if (postalCode) {
		addressInUse = true;		
		resPractitioner.contained.Organization.address.postalCode.@value = postalCode;
	}

	if (!addressInUse) delete resPractitioner.contained.Organization.address;


	// Medical Director
	resPractitioner.identifier.value.@value = obs[&apos;OBX.25&apos;][&apos;XCN.1&apos;].toString();
	resPractitioner.identifier.assigner.@id = obs[&apos;OBX.25&apos;][&apos;XCN.14&apos;][&apos;HD.1&apos;].toString()

	// Medical Director Name
	var familyName = obs[&apos;OBX.25&apos;][&apos;XCN.2&apos;][&apos;FN.1&apos;].toString();
	if (familyName) {
		resPractitioner.name.* = new XMLList();
		resPractitioner.name.* += new XML(&apos;&lt;family value=&quot;&apos; + familyName +&apos;&quot;/&gt;&apos;);
		if (obs[&apos;OBX.25&apos;][&apos;XCN.3&apos;].toString())
			resPractitioner.name.* += new XML(&apos;&lt;given value=&quot;&apos; + obs[&apos;OBX.25&apos;][&apos;XCN.3&apos;].toString() +&apos;&quot;/&gt;&apos;);
		if (obs[&apos;OBX.25&apos;][&apos;XCN.4&apos;].toString())
			resPractitioner.name.* += new XML(&apos;&lt;given value=&quot;&apos; + obs[&apos;OBX.25&apos;][&apos;XCN.4&apos;].toString() +&apos;&quot;/&gt;&apos;);
		if (obs[&apos;OBX.25&apos;][&apos;XCN.5&apos;].toString())
			resPractitioner.name.* += new XML(&apos;&lt;suffix value=&quot;&apos; + obs[&apos;OBX.25&apos;][&apos;XCN.5&apos;].toString() +&apos;&quot;/&gt;&apos;);				
	} else {
		delete resPractitioner.name;
	}

	
	return resPractitioner.toString();		
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">TVNIfF5+XCZ8UUxTfFRNRV4wNUQwNjQyODI3XkNMSUF8fDkwMDQ2MDAzfDIwMTcwNTExMTEyODM3
LjAwMC0wNzAwfHxPUlVeUjAxXk9SVV9SMDF8ODAwMDAwMDAwMDAwMDEwMzMyMDF8UHwyLjUuMXwx
fHxBTHxORXx8fHx8TFJJX05HX1JOX1Byb2ZpbGVeXjIuMTYuODQwLjEuMTEzODgzLjkuMjBeSVNP
DVBJRHwxfHxTQUZFLjExMTExMTExXl5eXlBUfjg1NjcxMDA5NjAyODQ0NjdeXl5eQU58fFNNSVRI
XkpJTExeXl5eXkx8fDE5NTgxMjI4fE18fHwxMTExIE1JTEwgU1ReXlJPU1dFTExeR0FeMzAwNzZe
VVNBDU5URXwxfEx8RkFTVElORzpOTw1PUkN8UkV8OV5RVUVTVF9UTUVfOTAwNDYwMDN8V0gzNTA5
ODZUXlFVRVNUX1RNRXx8Q018fHx8fHx8MTQ5Nzg3NTAyNV5LQVdFU0NIXkdBUlleXl5eXl5eXl5e
TlBJfHx8fHx8fHx8U0FGRSBJUEMsQSBQUk9GRVNTSU9OQUwgQ09SUC5eXl5eXl5eXl45MDA0NjAw
M3w3OTA0IFNBTlRBIE1PTklDQSBCTFZEIFNURSAzMDBeTUFJTDAwMF5XRVNUIEhPTExZV09PRF5D
QV45MDA0Ni01MTcwXl5PXl5VU0F8Xl5eXl4zMTBeNTc5Mjc3OHx8fHx8fHx8MTEzNjNeQ0hMQU1Z
RElBL0dDIFJOQSxUTUFeOTlRREleNzAwMDAxMTM2M15eVU5JVENPREUNT0JSfDF8OV5RVUVTVF9U
TUVfOTAwNDYwMDN8V0gzNTA5ODZUXlFVRVNUX1RNRXwxNzEzNF5TUEVDIElEIE5PVElGSUNBVElP
Tl45OVFESXx8fDIwMTcwNTEwMTMzNjAwLjAwMC0wNzAwfHx8fEd8fHx8fDE0OTc4NzUwMjVeS0FX
RVNDSF5HQVJZXl5eXl5eXl5eXk5QSXx8fHx8fDIwMTcwNTExMTEyODM3LjAwMC0wNzAwfHx8Rnx8
fHw5JlFVRVNUX1RNRV85MDA0NjAwM15XSDM1MDk4NlQmUVVFU1RfVE1FfHx8fHx8fHx8fHx8fHx8
fHx8fHx8MTEzNjNeQ0hMQU1ZRElBL0dDIFJOQSxUTUFeOTlRREleNzAwMDAxMTM2M15eVU5JVENP
REUNT0JYfDF8fDg2MDA2NTU2XkNPTU1FTlQ6Xjk5UURJXjgyNTEtMV5TZXJ2aWNlIENtbnQgWFhY
LUltcF5MTnwxfHx8fHx8fEZ8fHwyMDE3MDUxMTExMjgzNy4wMDAtMDcwMHx8fHx8MjAxNzA1MTEw
ODE3NDYuMDAwLTA3MDB8fHx8UVVFU1QgRElBR05PU1RJQ1MtV0VTVCBISUxMU15eXl5eXkZJXkNM
SUFeXjA1RDA2NDI4Mjd8ODQwMSBGQUxMQlJPT0sgQVZFTlVFXl5XRVNUIEhJTExTXkNBXjkxMzA0
LTMyMjZ8MTM2NjQ3OTA5OV5URVJSQVpBU15FTlJJUVVFXl5NRF5eXl5eXl5eTlBJXkVODU5URXwx
fEx8U3BlY2ltZW4gbGFiZWxzIG11c3QgaW5jbHVkZSB0d28gZm9ybXMgb2YgcGF0aWVudCANU1BN
fDF8fHxVU1BFQ15Tb3VyY2UsIFVuc3BlY2lmaWVkXkhMNzA0ODd8fHx8fHx8fHx8fHx8MjAxNzA1
MTAxMzM2MDAuMDAwLTA3MDB8MjAxNzA1MTEwODE3NDcuMDAwLTA3MDANT1JDfFJFfDleUVVFU1Rf
VE1FXzkwMDQ2MDAzfFdIMzUwOTg2VF5RVUVTVF9UTUV8fENNfHx8fHx8fDE0OTc4NzUwMjVeS0FX
RVNDSF5HQVJZXl5eXl5eXl5eXk5QSXx8fHx8fHx8fFNBRkUgSVBDLEEgUFJPRkVTU0lPTkFMIENP
UlAuXl5eXl5eXl5eOTAwNDYwMDN8NzkwNCBTQU5UQSBNT05JQ0EgQkxWRCBTVEUgMzAwXk1BSUww
MDBeV0VTVCBIT0xMWVdPT0ReQ0FeOTAwNDYtNTE3MF5eT15eVVNBfF5eXl5eMzEwXjU3OTI3NzgN
T0JSfDJ8OV5RVUVTVF9UTUVfOTAwNDYwMDN8V0gzNTA5ODZUXlFVRVNUX1RNRXwxMTM2M15DSExB
TVlESUEvR0MgUk5BLFRNQV45OVFESXx8fDIwMTcwNTEwMTMzNjAwLjAwMC0wNzAwfHx8fHx8fHx8
MTQ5Nzg3NTAyNV5LQVdFU0NIXkdBUlleXl5eXl5eXl5eTlBJfHx8fHx8MjAxNzA1MTExMTI4Mzcu
MDAwLTA3MDB8fHxGDU5URXwxfEx8VGhpcyB0ZXN0IHdhcyBwZXJmb3JtZWQgdXNpbmcgdGhlIEFQ
VElNQSBDT01CTzIgQXNzYXkNT0JYfDF8U1R8NzAwNDM4MDBeQ0hMQU1ZRElBIFRSQUNIT01BVElT
IFJOQSwgVE1BXjk5UURJXjQzMzA0LTVeQyB0cmFjaCByUk5BIFhYWCBRbCBQQ1JeTE58MXxERVRF
Q1RFRHx8Tk9UIERFVEVDVEVEfEF8fHxGfHx8MjAxNzA1MTExMTI4MzcuMDAwLTA3MDB8fHx8fDIw
MTcwNTExMDgyOTAzLjAwMC0wNzAwfHx8fFFVRVNUIERJQUdOT1NUSUNTLVdFU1QgSElMTFNeXl5e
Xl5GSV5DTElBXl4wNUQwNjQyODI3fDg0MDEgRkFMTEJST09LIEFWRU5VRV5eV0VTVCBISUxMU15D
QV45MTMwNC0zMjI2fDEzNjY0NzkwOTleVEVSUkFaQVNeRU5SSVFVRV5eTUReXl5eXl5eXk5QSV5F
Tg1OVEV8MXxMfCANTlRFfDEwfEx8IA1PQlh8MnxTVHw3MDA0MzkwMF5ORUlTU0VSSUEgR09OT1JS
SE9FQUUgUk5BLCBUTUFeOTlRREleNDMzMDUtMl5OIGdvbm9ycmhvZWEgclJOQSBYWFggUWwgUENS
XkxOfDF8REVURUNURUR8fE5PVCBERVRFQ1RFRHxBfHx8Rnx8fDIwMTcwNTExMTEyODM3LjAwMC0w
NzAwfHx8fHwyMDE3MDUxMTA4MjkwMy4wMDAtMDcwMHx8fHxRVUVTVCBESUFHTk9TVElDUy1XRVNU
IEhJTExTXl5eXl5eRkleQ0xJQV5eMDVEMDY0MjgyN3w4NDAxIEZBTExCUk9PSyBBVkVOVUVeXldF
U1QgSElMTFNeQ0FeOTEzMDQtMzIyNnwxMzY2NDc5MDk5XlRFUlJBWkFTXkVOUklRVUVeXk1EXl5e
Xl5eXl5OUEleRU4NTlRFfDF8THwgDU5URXwxMHxMfCANU1BNfDF8MDFeMDF8fFVTUEVDXlNvdXJj
ZSwgVW5zcGVjaWZpZWReSEw3MDQ4N3x8fHx8fHx8fHx8fHwyMDE3MDUxMDEzMzYwMC4wMDAtMDcw
MHwyMDE3MDUxMTA4MTc0Ny4wMDAtMDcwMA1PUkN8UkV8OV5RVUVTVF9UTUVfOTAwNDYwMDN8V0gz
NTA5ODZUXlFVRVNUX1RNRXx8Q018fHx8fHx8MTQ5Nzg3NTAyNV5LQVdFU0NIXkdBUlleXl5eXl5e
Xl5eTlBJfHx8fHx8fHx8U0FGRSBJUEMsQSBQUk9GRVNTSU9OQUwgQ09SUC5eXl5eXl5eXl45MDA0
NjAwM3w3OTA0IFNBTlRBIE1PTklDQSBCTFZEIFNURSAzMDBeTUFJTDAwMF5XRVNUIEhPTExZV09P
RF5DQV45MDA0Ni01MTcwXl5PXl5VU0F8Xl5eXl4zMTBeNTc5Mjc3OHx8fHx8fHx8MTEzNjNeQ0hM
QU1ZRElBL0dDIFJOQSxUTUFeOTlRREleNzAwMDAxMTM2M15eVU5JVENPREUNT0JSfDN8OV5RVUVT
VF9UTUVfOTAwNDYwMDN8V0gzNTA5ODZUXlFVRVNUX1RNRXxDbGluaWNhbFBERlJlcG9ydDFeQ2xp
bmljYWwgUERGIFJlcG9ydCBXSDM1MDk4NlQtMV45OVFESXx8fDIwMTcwNTEwMTMzNjAwLjAwMC0w
NzAwfHx8fHx8fHx8MTQ5Nzg3NTAyNV5LQVdFU0NIXkdBUlleXl5eXl5eXl5eTlBJfHx8fHx8MjAx
NzA1MTExMTI4MzcuMDAwLTA3MDB8fHxGDU9CWHwxfEVEfENsaW5pY2FsUERGUmVwb3J0MV5DbGlu
aWNhbCBQREYgUmVwb3J0IFdIMzUwOTg2VC0xXjk5UURJfHxUTUVeSU1eXkJhc2U2NF5KVkJFUmkw
eExqVUtKZUxqejlNS015QXdJRzlpYWdvOFBDOU1aVzVuZEdnZ01UQXZSbWxzZEdWeUwwWnNZWFJs
UkdWamIyUmxQajV6ZEhKbFlXMEtlSndyNUFJQUFPNEFmQXBsYm1SemRISmxZVzBLWlc1a2IySnFD
alFnTUNCdlltb0tQRHd2VEdWdVozUm9JRFl5TDBacGJIUmxjaTlHYkdGMFpVUmxZMjlrWlQ0K2Mz
UnlaV0Z0Q25pY1V3amtLdVJ5Q3VIU2o4ZzBVTEJVQ0Vuak1sUXdBRUpEQlZOakl3VmpBNFdRWEM2
TkFFZDNWNkNJdjV1Q2tXWklGcGRyQ0ZjZ0Z3QlZOd3ZLQ21WdVpITjBjbVZoYlFwbGJtUnZZbW9L
TlNBd0lHOWlhZ284UEM5TVpXNW5kR2dnTVRBdlJtbHNkR1Z5TDBac1lYUmxSR1ZqYjJSbFBqNXpk
SEpsWVcwS2VKd3I1QUlBQU80QWZBcGxibVJ6ZEhKbFlXMEtaVzVrYjJKcUNqWWdNQ0J2WW1vS1BE
d3ZUR1Z1WjNSb0lEWXpMMFpwYkhSbGNpOUdiR0YwWlVSbFkyOWtaVDQrYzNSeVpXRnRDbmljVXdq
a0t1UnlDdUhTajhnMFZMQlVDRW5qTWxRd0FFSkRCVk5qSXdWakE0V1FYQzZOQUVkM1Z3VWpCWDgz
QlNQTmtDd3UxeEN1UUM0QVZYUUx6QXBsYm1SemRISmxZVzBLWlc1a2IySnFDamtnTUNCdlltb0tQ
RHd2VEdWdVozUm9JREkzT1RBdlJtbHNkR1Z5TDBac1lYUmxSR1ZqYjJSbFBqNXpkSEpsWVcwS2VK
ekZXdDEzbTdnU2Y4OWZ3VG43c2oybklaSVFJUEpHYlpLd2E1dlU5bTVQNzNZZnFFTVM3clZOaXUz
MjlML2ZFVVpDaUEvVEpMZmI5dXlDbU5IOFprYWFEOG5ZUVBEM0hNTi9YSThZcTgzWmx6TmNqR0VE
TS82dkdIS1p5WmgzcExXd2FjUC9MY3ZFTmtLb1lMb0lOOWdZWjJmdno5NHR6eTZ1YklNYXkvdHlJ
cGdjVzlTZzFDVFlNWlliNDY5ZmpUZkczOGJ5TjZDRWI2Uk82bmltWlJHRTRCR1p4R2x3dUFiR05R
N0trSWxzaGpBMVBCTjdSL3A1OHBUbCt6Y0daL3gxc1kvM2g5MWwrWGFWYnVPMW5FNkhhcnMyWURC
dGk1d1ViQ09BNmhLUE9RWnhRVExpb0F1bXhUUmMzcnd0NWYwV1RpYmxKTUVTYklrTWFwc09vOXgw
RytNY21aYkRSeXhDT2YvYUlNZzFFWi9MN2hrdStmbXdZenIwT095WWlNS2pCY1BIV1pXQlIrUEQy
ZllNTElwY1JpMzRUbDFxZ3lvbWRxaUxIR04rZmZiWDM2RFhIUXk1cEZEbDI1a0VKK0Yyb0ZpQTU3
K2N0WDZzOGRpdXlaQlVTQ0tIWVVwcHR6YlBBdjlqYUJvYVZCODNNTE5LV2hpbERiSWNleFplVkJQ
WkM3Tk9laTRBU2FybW9rSTFkelZXUjEybEg0TmZRSzlrNmRaYWlLRGd3dmEwYXh2SU1nazFiTXYw
R1BLOGN1UGV4dnMwMllxZEcyN3ZzM3dEUTlsVzNVSUFUUGRwVFZ1SzdMWjNxVDlGMUhRc3oyTzBa
Z1Z1YzhzcDNQRWFxNjhHVVlkd2RHUjk5RWlsR2s4QktyM1RBZjVaS0UvSnIxQnFhMVBieWRKdWJT
aGZ0aTNxd3JvZzZsUjE4M2U2dGczNXE3aGJOMUhQTGlBOHp3RVoxNnUrRnhaUHlTcmRKTnYremNB
dERTeWU0Mm11VklmbFZyQmR4N1JzOEl1dEQ5ZnNCV213TFJDRDhTWDN5OWRlSys0NlFHMi8xR0hx
eEcxS3FrN2czUFYzdXhHNk94VC9JUTJ4NTdsY3d4S3RESXk2L0VxbitnS1hkcW1IQWx2UnFRSDJa
Y3UzVldZWDRBN2lWbjkyTHBrMmRmNXZJYXhqNTFIRVRHTHg3YVp0dk5INmRBNXFwT3RtY2NPbmhy
a1p4NitXRHNyQTYxUUtBd01pZHFDd0pXcmhlRVRJeHlXaUR1U3ZFcnNiSUNxc3luQkZ4MWk1V280
RlRXMEkxV2VTQkcySzFNWmZVQW0zZ3RTVVFYV3FGdVROZXEydHZ0Ulh6UXQwYUN3WlZBZFVlZ0ZB
RzQ0TjlNV1d3QjZEMUdUQ0Z1VThlVkpJRksxaFJVdDUrMWZ1TDYwL0trUlhMVmxQVXlSM0tFYk5B
dEdEM2dxN0VGZU8wNHlqZDZLVHcrU0NzQXZzMmF5Y1NqSjZ3R2t4aUM0NnQzOGRDRzdKeFp2QU5z
RVkranVHTFlUb2tmYzYyZDRsK2FVdXk0YjJrNkpqdzFwbm1CNGxkVUhUeVJ1a1J4U0U4RzRVVWtw
WklEOW0yNlFQaEVZL3UyNURjWnphc2sxaUF3Q250ZlllOTBuUldCZitWUUNHUHY3cEZraGQwM09C
cThSMms4VHIvZU1nZVJvbnN4MFhJK1E1aURCS0hWY1JLVHVFdnFwUkxVK1pHak9xZXZDMWc5K3cy
cHEvMTZLS2dyUVdBam8wZUhZTzdRVlJZYTBGTnpFZ0kwa2pjTGVrSFduaExuVmVIcTBiQ2FWRG9k
YkUwOVhadEMrVDF3RjdNa21XeDJwYW1GSmFCOGN6WFl0V0oxQmw2OURZVXNTaFpjMmpjWHk0c1d6
a01XZlo0S2lFTUdKU3UwQlZIcko5T2FTN2xGZEdQWEkwSmxUOGNYcWtlTGFKWFNyRDRpVCtYRWFJ
ZVhKZlB2M1NJMDlqOXpxUCtoU1JHQkdUUVREUlEzRy96VEcyVElvckU0Nnk5VHBaN1pPN0huUTZE
N0l2TUxvZ0NMdU5pSW1wS081MXBndVJBSzFMeXltZmI4ZDluc01FbHFsVmJNclNkYXNrL2RxUFZH
UGhTUEZKcEJxVFFJcllKWGFISWJXWXllektmOGVUM0g2a0dzc3dwQnFUdENtK0pLeUJWTyswKzdv
a3RTdGphb1NyT3A2WEIrd2Y2TmYwQnJPN094YkR0UkRPMld2eFNOR3ZGdjA2OUg1MjY2eHIxbEt6
YXRnMm5Vb29CdXNiVjdLdXJjN1RwdVBMSTMrNzhJWVNqU3pjempYZzNLQjlOYjZHSWdQcWgvWVVW
dlhnV2o2cTllQy9pS0lkbWhFS1lkcHFWb3Jlc1ZTRWVXQkN6NUs5L05RUEp6Q3VNMVJ5dGZ6MHUv
OGhXSXhrbzNMdHp6OTI4MnE1aGxmQm9wcTlIYjMxUlJpWlIxZkJZaEZHTTM5U0RvMmkrYTNaUFMr
R0FvTnhKY3B5MS9VUUZaZFovbXdwSnA1R3MzQWtYdDVOL2h3TG1xV0FZZlZwamdreUhjeUxycklF
Q0JiTGt1OG1ta3crZm9paXNiQ0RGRk40NE56R0xxcEM0L3Y2cmFFTGRUczBYS0l4YlBnY3lMRHBs
UmxpTkFtRG1SQzdDT1ovaHFOZ0lkek5ZQkU1ME1JeHkyMzBlTVNDK0crclV5MXVnMUU0RFdhQ1d5
OXBlSWZKT0pMdTVaMC9xRENKZll3VTVaSjhmMGgyZTJHUTRxVjhIcWZ4d3piYjdkUFZUbnplUHli
bFU3emJaYXMwaGhSV0RxeXpoMHg4MjRyQmVMM3VvdStRVkk1czR2eC80am5PazRiNGZSN2ZKU3BS
ZHQ4L3I5bnBWOHc4dGR2WG5jb2dvTmlsVTZNcCtHRzV1RlRxS0s5RzdpSEROWkZZMzFmK1lobk9y
aTluVWYySURSTVIrNG5JUklTZktoVEhQK1ZUR2JHTTVwRUhVSlJWdXBoRXZDc1JxWEVERFh5dWFi
UG1WVFhXVllhaWhZRW9ZcGx1R1FDV2xVVm44U1pwTEZtQ3hmR0t3aFNLQS81NXZIMFFQRWVqcTh1
UjhIMUFHTTliQ25OMEVBS2orOVpwbEJrc1JpRkdXOFdGZFRVRFZOVkpubXhYU1F0N0ZWOXRIaVVo
WDFDVnRTak5TL040SGRheGdOekcxZEhxemNTZmZoeUgvc1hNRkNFMm1rWHorVTBVK0VHUFdHMmVZ
S2JUSW9QV1NScG5FTno2dExDK1JqbWYrV0xmTHFkK0Q0aFRFaEEvU1c2alVKWlBpMmV4NlVEVkE2
d01FODFNQXRiY0g5MUVVMzhaTGhvV3IvbFlBZnNjS0JhQmpPRHdMZUlvYVBydG95eE1sV2tjTElQ
Uk1oajM0MVhXcEZQSE80dEVWcWhtYWxwYzBkYzU2UnozQkFXNGw3akY5MU9VRU8wR3o2VlJDcGMr
WmJ4MS9pcTIzVWhvbStVaWdseUxoOE5xbmFTcjhzMWZwU0l6K0p1bmRYcWZyc3JMaWFPRGloQ2tv
L1VHbzlVb1AvMDY4LzNscHpmbDdIbXlPNnhGeE5rOVpvZTF3UEpaS0pKdTkwbitsQ2RWQWtzRnRs
VzIvZTlodTFLdVV0U29pd1pqMUVtL3BmSVVNWVBNSnd5NGpqOW5lYnpQOHUrTmRMdGFwMXV3bThp
NWQvRStGalJmNHhRWTF6Si9aaTFROFhDb0dtbVZtSThRMG5ncjRtQjRyNEZiZjVjR3ZPTk9UdTdF
THJ3LzVKV2VEWFJrT0RxTmRBK0xKOTArQ0J5eGNKeDA3bE9TODlzdzZWcTU3Q3E5ZGtYaUU0OVAw
cENIWFRGekE2MDFISzFHS3VIRmExaHlXekNRcUlteWRiSTZyR094RVBaeC9wRHNoWjJYb3ZySzhq
dTVWcFFwR2doUFJYMEZvVVo2RkN4UVZNWEJZU2VnWWh0WjVZRTU3TFdSd0FoVjIrb3g0N2VPTzdu
M3NpNS9kd1Q2Tm53YUtaZHVTZWt5SXo5azJ5elBIN01rVGo2OWFiUXAvUFpvdU1UVFVSbDNCTnNo
T1pQek1vemwvYzRzQ0JmUVJNaTgyYXd0VHVmTlorR3BFaWRtZFVpRGs2Zk8rTU1KRkxNWFpsQjln
alpuRGM4a0owbWh3Um9lODNYU2Z5V05rdUdCWHlmOWVZbVVESS8vT3VuUFRxUmtlUERYU1g5Q0lp
WERBNzlPK2k4a1VqSThEZWlrUHltUmtpSVhFUDVMN1pNSU5kS2Zra2lKT3h5ZlJ2ck1SRXJZY0lt
blNHRTI3d1FKSkNuS3I4MXhnM1Q1bU82YTF2MFdpMEY5dVpaclVGdXgvdTB5bklyQVBJcW03eUlp
dnV4MjhmY21ZZ3NOUnF5VGZ1Sy94emkvelRPNXBjTHR5bXkxc29XSFN6bEZDck9SNGJNUjNjcnlV
SEFicjcvdmxjQlpHaml1em1GV2p6R3NYZGhNcVhyY0owL3Y5dEpqRFlEV2NJQWFhY3pkSkdManQw
ZjUwMVBZWnNMemU3SHBsWFd5T09USmJTeFR4NjY4ZkJhWUgrT3ZMZEhBb3NOaGFxU2ZFNG5zRHRK
anZrbTNFdDluRWV0UEhHK3FTT3poU0pxa3JTN29pSFN0NTZhV1MwMlh1dnp1NHZnem5HQitGYzJu
b1N4Y0Z1RXlVRTlTSGUxM2pEQUZMeDNGYjNHYVIyT0VtRkQ1MTZuZS8xR2Q5bzlELzNvV0xaYmhh
SEd1WGdLRWs4bENyQVpHa1FpdlYvNWs4bTRlUmIrTHpmMW5NUHNqRUlSZEUxUTNDTmhDOU53aVJG
eGRUL1R5WXB6bXlRcmV4VUYrTUp1SGdGZWtuV0ErOS8vakw5NU9xOXVKU2VnTFltU1BrVU1KSStM
MnR6akkvZ2NZMkQyckNtVnVaSE4wY21WaGJRcGxibVJ2WW1vS01UQWdNQ0J2WW1vS1BEd3ZWSGx3
WlM5WVQySnFaV04wTDBOdmJHOXlVM0JoWTJWYkwwbERRMEpoYzJWa0lERTRJREFnVWwwdlUzVmlk
SGx3WlM5SmJXRm5aUzlPWVcxbEwwbHRNUzlDYVhSelVHVnlRMjl0Y0c5dVpXNTBJRGd2VjJsa2RH
Z2dNamd6TDB4bGJtZDBhQ0F6TkRFNEwwaGxhV2RvZENBeE1UTXZSbWxzZEdWeUwwWnNZWFJsUkdW
amIyUmxQajV6ZEhKbFlXMEtlSnp0bmIrdTY3Z1J4dDhuMVNhQWtjY3cwdTFEM0dMYmJWT2t1RWlW
S25tQlZFR2FBRnU3U0pjcVZmcThpRmU0Z3pQZ25YK2NvVWhKOXZrK0VJYVBqMFJSTW4rYTRYQW9Q
NThRQkVFUUJFRVFCRUVRQkVFUUJFRVFCRUVRQkVFUUJFRVFCRUVRQkVFUUJFRVFCRUVRQkVFUUJF
Rkg2SC8vLzg4Ly8vMVhLbi84KzA5dDRjKzNzbTEyZGtzaDZITGF1Q0NDTmw3dWYvcmg5dk52OG1Y
YmZpdkVHdmlDUHJuR0lJb0xXYkd6end5Q2p0Tm1Tclp1LytWdnYvT016b0NSNHNKWXdXWkJieTlD
aWJzOXZkR3ZIbGJrM1hVSFVPeERZcHdGdmF0aWxNdy9CVVJBQTRKSUFpVmRUS3pnczBHUTBFWUVq
NVU4Zk1UbnNFY1FaR3BESTdCS3VzQWtRWkFwTmt4QUNZSjJhblBZdERzSGxDQm9RQnROU1pRMkU0
WVpXQWdLRk5PMEVjU3ZNRXltSHYvOVpTdGYvL0dISC8vOGV5cmI5ZVQzMitmYmY4OXVJM1NRS0FR
Um9NUnZZSmkwaUtOa2Nnakl5dWlsTHhHTm03cUdhWHVGWVJMYXZuZXlSTlVDcklTMnE2RXYwZG1O
R3BFWGhSQW9iU2JzN0paZVRubXI1QlV3eGRKQWJYZXFzeHRWMW1aeFRFK1BPYUt5aUNheWQ1Uzh4
MysraXZiVEJLWmF2UUZROFh3VE16VjMwRVJwZ1pUT2RQOCtwWlpiY3YyZ1Iwd1RoeURhTUFXWWl2
VUdRSm1CQ0xaS2Mya2FXRHhGQVpBTGtxVy8rc3pJS0I1dGdhbFhCNm9iSko5Q0U5bWpuVTdScGVL
S0hrM0pFYlMzKzJ0MW5oVjZhYUMyZnE0REVlMjRhWDk0WEt6NDJGbXVFeEl4clV3cEh1V1pLcThT
ZGgyNVpBNVIzZVg1RWZ3WFpjeDBzcS9iMWhOWFpRSlZhditKTW9kT0xWQjdhREt0MHIyM0xGR1Bw
elJUcDd0L3BuMFppTzU2ZHNyc09kWDc5a0Q4dVR2S3k1UFZuVWNnVFBMWDVQcldLbkQyOXR1bS9T
Z0ZaSjF1cDh5dU1sWlZuczJsUUpYbTBicE14VkRFV0hYM3ZleTBWR3llaGp0dHUzZ3FUNUI0N2Rx
c0U4ZFRzOHdUUy9ka0U1WjFRT1g3ZitaOHEvTUk0a1F5amJtZ25Zck4wekJOVkczQWtSaXlpVFow
V1d2TFdZNmYrWTN2Y2UrVEZTNENhb0NtNEpRSGFxdGFxQzdScDBqMzgvdSt6Q0k5WWhwQVNSZXZu
bHZGOFpzYmRkZDM0UDFmN29sQWVZRVJia0F3ZzZZYmFWNmN0cW8yM2RFY1JwbEFjV3B4VzY0VG80
ak4wNEEzcGRmSUIyKzZSWlB1RGErU3padjdsRC9kdGZaL3N4bElWd0JsdW1mZTZlZ1QxeFdLYlFJ
bjA0dHZ2R0xZWEQ4Z2dzc1lUYnFybHdqSzhHWENsV3p0dHRsMnl2WHJaR2k2ditkVnEzdlJDcUJL
TndmejNPTUtCNjdNeXdIVnB1Mkp2anJRNjZpMm0rV1l6UzM2RUxlSzE3ZHRQOFhyeTNTcUtkVWVB
TlJBWEYzdklwQVJRQTJ3OEhKQWNkeGd2N1BIQ2VvYXBVVlk2ZnFUVGIxL3l3eXNYeTJwZHdKSysz
c1pneExYYVVZc1MzYnF0WUJxVXlORW42LzJONUZsNFZrOXI0amxpdUxQZkVuYW5SSjlnZDdKNVJ1
ekpocVo5cjllekR5L1ZQbTFnQkpoN2JaN2x6eWlOa0c5Wkl6RTZpb1RKZkY1WUtGdTZlQTVSU0Qz
aHlZV0FYVktVRUlEMVM3Yk40c1o3bXRQdnh2MDdwTDFXa0MxaWVVdENOV2Uxb1kxdWtCNUVJbFhr
Nit1d1VxMm5FNThpdGVYQ1hhdHFITTZVSEhQejVleGlhUjg2dEdWZ2ZKQUtKa25QUXJ6bURMcEVJ
c1dXNVQwSjEyeVNrQk5pZlZwYTdMekd6OWxZbmQ0UGpmVDFId2lVMlllNnJKQWVmSHRrbmtTTkhr
b21hWkhGL0c1WjdDQ0VWWUpxTnVhQUlMWk1mSXl4eDE2czdsQTZRb25Bc1VOeUtRaGRXT1BWd2Fx
YlNmM3lWSU45MFI0WEZNUVk5VXRMV0tpNUlNU2ROWlRndWU2VjJTKzlIYjl3cU5aeHR2dFkrWkJG
NDJoQmtvbVZ6YS9WUG1GZ0dxTkM3K1d6RlB3a0RGdnhMU3pCTmFxQkJSYnFDa3BFNlVFZzNpdi9E
MWZieFlmYmxHVWI0OHlONUFYQXFyTnRXT204bmRzVGxqS1c2anBSUU5idFZEclpxTXlUTzFKcGE0
ZXJoczVISnVIMnE4WW1SY0M2b3Y2K2M1ODd5Sm5yOHZSVHRkdXdGb2wyejhYcUtkdmJuYjZQOEUw
YUNtNm1GbGpNdHgxcDA4VHZDaFErODFUWUp0YVR5em00aS8vK3ExKzFSOTI0Y3BISk5yQlk1N0Jy
and1dXJrQmdaMEtPazh5M3p2WU9KUExsOHcraWxuT0xBMStkYUJFUktMYXRhYjRlRXlLaVkvZ3lN
T3F0VlBKRzRLWXpoNjloRkt4LzZhZm4wQi9kdVBKWG0vMGJLSUlDd1NIMERWN2hzeWJJV3JiRUsr
dUNpWndkUXU3OFh5OUJ1VDB0UnNhcU5KNm9zQTJaUUlScGxVeUxSU1hBQ3MrU2pVaU1SZW81OVRa
bk80OU9aT0VNSUJxTjFrb1dBL1Y5U0ZGUFY1UUlzNndOVS93Z2tEbDQxMWZ3cDlkNjVvbnp6QzE3
QWl2VDZCa1lwVy9JWHo1ZnZBNGVnbHQ1U2N4cTB6cFBsTmFYWjUzNTRiYjM4Mk1UYlp6NERTdkJs
VCtScDBjUFpsWUJTaDU1c2w4WXhxcC9BMWg3TVJMcWo1SW9lMU93YjY2MnlRN0xSbUZKRkJqN2Qr
VElORkY0NDJCaXVlZWt1WkpXNlc0ZU9Pc3RpVDlQVzJhZDF6RlNBUGRpWWNHZ1R1bjNhcWthMWRk
N3BSbktvNjZkSjlGbHFtbjY5OWVEYWpTMHJ5Ylk1N2lvWk9KVWdtcklQcFhIUUFPM0VuR0ZJdzR1
QmVabzNVaUpmbndCQStyZG1OZFlYTDFSRENFS1QyWHo3c095Y1o0TlZRWFdDMlNBS29VY1BiTVUy
Q2J0TE0zVUFJN2xRLzQ2eWNFN3JpS05UMktEMDNkYzRoMU5lK3YvMUYvZXEyMyszQWJwa3NBbGR5
TC9iMnFlWW9qZUR2SnFzNUhIMm1ob0UraUZxaDhweHFMNzQyTm0vSXUzOEI4TklDQ3BxdWFmaFBu
bGg5am0weXNCazU1WVBBSVFiRjROSkhzVk42UGhBcWFCRlpUUms4QlUzbnpKSjd2QktDZ3VSb0F5
ak5QZVFzMUY2anFZcFBXd3BhaU1SRFVGUThvcWtBdEdqMXQ5WXMzWGZPVVA5azJQWDRndkFsQlhY
RmNvclJzZk1CQ2pSbXBMbGJWQjErSUJ0K0tDZllRMU5VWVVBTVdLdVlpWCtnNS85V24vWXZWVyt0
Q2ZIc1docmMxekczVmU0dW1uaTh5SjNXdkxIc2ZzMUFacjIvMWFmS1B5d3VtcGtja3ZIU0kvTFEr
WlFMTWJkVkxxOHNMcFVpdHZndnhYWkh2amVaTmtvWkZwNCtobGc1azZDR2MydGxiTVlDNitjdmZI
dC8vYm90WHc5VVNBRTRYWmZFRjErU1lyQW5tbWhLbG50Kys2MWxBTFlyeXpiOEszNlRORTF1bzZR
T29HQllTWVhYTlphY1hWQmVvdzVwQlgxazNHZktlZm95NU53K1ZRU2taNVp2ZXczVXNZcDIvOTh3
Qjlmem9KR0FxbzZzQlJiNWZrQmk4ZGJsU3BvUm5vV1pOUmMyOURqelhySmxhNFdmbU1SbjIvQWM4
bklNelVhdTd4QnQzbjFreHZVazdmVWo2N2M3UzR2RzVVYjUxNDZuVzJSUG1hWHA4ajFTeU8yYjhn
ZTUrNHNQaGxRdm00Z3ZleXp3Vzk5NTJ4SmM4WFA0cG5kNzJkT2NYcDZDMzBSdDREY3MzeVZ5UFB4
WS96QU9WekQ3YW4zcFVQUVd6cWR3R3pkU2lqS01TVVBUMWllL0w3T1E4N0RLZnhoQS94YVYxVHRx
OStMMCtCVjdlSzU2RlFtVEZEMk14ZHpHdkNkdm90bTM2RU93ZWUzTVFIbER0MGMwbWlWMzQwT2Ex
TXErd0o1cmlTVzRaTzN2N1hiNHA0eW1LN0huTzNycjUzT3JJU1BkUEU2aW4vK3c3NmdiNnY3Rkwr
ZlhqZDJwTW9JSmVaQjZPYVRKM01RZU1nVmt4SzQramZPWUczcFY1V201a3ZqM1R4Um1BaTBJVFUr
elUxc2lXOFdQTTA3TU9GTWRnV1I1UW5zd2hSaWJvNFFVYjQzdXllYmlnNjNwNzBTZEI4OFNXVmFB
eVRXci9heHJyWTZTbmRhcEJpU1JXZTR3SXVhWmVPOWVsR3cwQWRWTS8rVmVOL3VsZFRHZFM2MmF0
TGUyZWdyZ0pKSU1HNGt6enNic0JvQWJpR01rcnRrakJRbmpORkkraDhrWnFTb2ZuZ0htTDFWTHo5
RndQRkkrZTJoWDBlaGR0K0pKSGYxcGVxSkM0bVNlN290NnNHN0lnRFFBMVFFZnN0UjRnblRVUm1D
ZnQ5WGxZeloyS01pZWhsbWJEcm5QNWdpZWM2SU1tbXhFRUpmSjdKWE9sVEsrUEd4ODhZV01ZcUc2
VGREMmlQZFVhZHNyc3JsMnlBcUJXZEhYUnlOV0xOVXBBbVo2SkNaUUlRUEh1ajQrSE9aOExWSDR1
Vzljc2d0VTYrRFlBMUo1OFNESFJjSENpTW9XbXgwSVQvT0VpbE5wR0h1RHNrVmFFemJzT2pPbnla
WHJVRkpkdjJFTHBEY3d3OVRFdW42NHpDTEF2RlMybTBFekZSb3BRV3BGclpJcG1lQTg0Vmg0b0x4
Q242Y2pFNjBwem5YRUREaHRESlZ0MUNsQkJlNDRSWWRVR3EwMVR0VUcwYlVNY0hieXk3NWpENVM5
K01IK2tnWXA3dU9sMHhYSGoxckhScDFBQ2FpektWNjEvZFpRdjBPa0xhdlJLd0ZNSU9rVVpvT0tB
VXRWQ2ViZlFoNS9Zd0hPK1U4WlF6NkY1cUh6OUdWL1I5SnhMODFDQlRnZnFNNnZiK2J2WkxLVXgx
Q1BNN1hrMlB5VkFrU3YrczgzVzA2ZFFCZW9aVGdlYnlILzFGeVpYWXl6RG1SSnRuVHFIc04zeTRO
REU4U29sOUI0cDdxNmljSjVQcHJ0Ni9odU5qdHZnM3UwakphOUw4WThmUzNqYVVLSHBLNDRCMVJy
RVI1TnQ2UEhPTjViMnBMeTdEZmQvM2l3VHRUREQ4bDZUK05CZlZiYms4UU9vZzhWNWVxdkRnd015
cDRwdUg4L0R6OXpvZ25rb1hhYzNzWnR2N1N5Z3VvM1VlbFN5dThXVytUQ2dQa1RYM0l2MkJKZmkx
VVhEc1RhSC9KcDJhcDBleGFWR2NWV0xuSmxxSS9QYkQ1OTRxVW16cnZERlJXNmVDQnQrUXFhUzZu
YUpiaVFCZWxlMUtPbWxJbURLbEJoMnRmK0t3NHpRZXl0R3FaMU5CbE5DWWxBZzNvT21UeVVlTHBr
TEdNMWxnOXZuWjdmNmlucDgvME5wcDZSOVFpZUtIVHk5K0NJbzhQb2dxQldsVXJRbzZlVEFnS2F6
bXc5QlZ4RWxBYkxubHJGSE1FelFlNnVVcmNmR2FJd2oycGlTYkZlZkZ3U2RvdGJLRUNtNnNPY21K
cVB2emNQR3hhdUFpRkdDVllJK2c4anVtTGszbWFKcGF2OTF3SHBiQ0xxbWlDeHRqQUtPdkgveCtx
bXp6d21DTGlFUmM0aHRFOFgweUVVRVJCRFVWZnRiaEZRKzFRcEVDSUlnQ0lJZ0NJSWdDSUlnQ0lJ
Z0NJS2c5OWF2YnBmZGVBcGxibVJ6ZEhKbFlXMEtaVzVrYjJKcUNqRTRJREFnYjJKcUNqdzhMMHhs
Ym1kMGFDQXlOVGsyTDA0Z015OUdhV3gwWlhJdlJteGhkR1ZFWldOdlpHVStQbk4wY21WaGJRcDRu
SjJXZDFSVDJSYUh6NzAzdlZDU0VJcVUwR3RvVWdKSURiMUlrUzRxTVFrUVNzQ1FBQ0kyUkZSd1JG
R1JwZ2d5S09DQW8wT1JzU0tLaFFGUnNlc0VHVVRVY1hBVUc1WkpaSzBaMzd4NTc4MmIzeC8zZm11
ZnZjL2RaKzk5MXJvQWtQeURCY0pNV0FtQURLRllGT0hueFlpTmkyZGdCd0VNOEFBRGJBRGdjTE96
UWhiNFJnS1pBbnpZakd5WkUvZ1h2Ym9PSVBuN0t0TS9qTUVBLzUrVXVWa2lNUUJRbUl6bjh2alpY
QmtYeVRnOVY1d2x0MC9KbUxZMFRjNHdTczRpV1lJeVZwTno4aXhiZlBhWlpRODU4ektFUEJuTGM4
N2laZkRrM0NmampUa1N2b3lSWUJrWDV3ajR1VEsrSm1PRGRFbUdRTVp2NUxFWmZFNDJBQ2lTM0M3
bWMxTmtiQzFqa2lneWdpM2plUURnU01sZjhOSXZXTXpQRThzUHhjN01XaTRTSktlSUdTWmNVNGFO
a3hPTDRjL1BUZWVMeGN3d0RqZU5JK0l4MkprWldSemhjZ0Jtei94WkZIbHRHYklpTzlnNE9UZ3di
UzF0dmlqVWYxMzhtNUwzZHBaZWhIL3VHVVFmK01QMlYzNlpEUUN3cG1XMTJmcUhiV2tWQUYzckFW
QzcvWWZOWUM4QWlySytkUTU5Y1I2NmZGNVN4T0lzWnl1cjNOeGNTd0dmYXlrdjZPLzZudzUvUTE5
OHoxSyszZS9sWVhqemt6aVNkREZEWGpkdVpucW1STVRJenVKdytRem1uNGY0SHdmK2RSNFdFZndr
dm9ndmxFVkV5NlpNSUV5V3RWdklFNGdGbVVLR1FQaWZtdmdQdy82azJibVdpZHI0RWRDV1dBS2xJ
UnBBZmg0QUtDb1JJQWw3WkN2UTczMEx4a2NEK2MyTDBabVluZnZQZ3Y1OVY3aE0vc2dXSkgrT1kw
ZEVNcmdTVWM3c212eGFBalFnQUVWQUErcEFHK2dERThBRXRzQVJ1QUFQNEFNQ1FTaUlCSEZnTWVD
Q0ZKQUJSQ0FYRklDMW9CaVVncTFnSjZnR2RhQVJOSU0yY0JoMGdXUGdORGdITG9ITFlBVGNBVkl3
RHA2QUtmQUt6RUFRaElYSUVCVlNoM1FnUThnY3NvVllrQnZrQXdWREVWQWNsQWdsUTBKSUFoVkE2
NkJTcUJ5cWh1cWhadWhiNkNoMEdyb0FEVU8zb0ZGb0V2b1ZlZ2NqTUFtbXdWcXdFV3dGczJCUE9B
aU9oQmZCeWZBeU9COHVncmZBbFhBRGZCRHVoRS9EbCtBUldBby9nYWNSZ0JBUk9xS0xNQkVXd2ta
Q2tYZ2tDUkVocTVBU3BBSnBRTnFRSHFRZnVZcElrYWZJV3hRR1JVVXhVRXlVQzhvZkZZWGlvcGFo
VnFFMm82cFJCMUNkcUQ3VVZkUW9hZ3IxRVUxR2E2TE4wYzdvQUhRc09obWRpeTVHVjZDYjBCM29z
K2dSOURqNkZRYURvV09NTVk0WWYwd2NKaFd6QXJNWnN4dlRqam1GR2NhTVlhYXhXS3c2MWh6cmln
M0ZjckJpYkRHMkNuc1FleEo3QlR1T2ZZTWo0blJ3dGpoZlhEeE9pQ3ZFVmVCYWNDZHdWM0FUdUJt
OEV0NFE3NHdQeGZQd3kvRmwrRVo4RDM0SVA0NmZJU2dUakFtdWhFaENLbUV0b1pMUVJqaEx1RXQ0
UVNRUzlZaE94SENpZ0xpR1dFazhSRHhQSENXK0pWRklaaVEyS1lFa0lXMGg3U2VkSXQwaXZTQ1R5
VVprRDNJOFdVemVRbTRtbnlIZko3OVJvQ3BZS2dRbzhCUldLOVFvZENwY1VYaW1pRmMwVlBSVVhL
eVlyMWloZUVSeFNQR3BFbDdKU0ltdHhGRmFwVlNqZEZUcGh0SzBNbFhaUmpsVU9VTjVzM0tMOGdY
bFJ4UXN4WWppUStGUmlpajdLR2NvWTFTRXFrOWxVN25VZGRSRzZsbnFPQTFETTZZRjBGSnBwYlJ2
YUlPMEtSV0tpcDFLdEVxZVNvM0tjUlVwSGFFYjBRUG82ZlF5K21INmRmbzdWUzFWVDFXKzZpYlZO
dFVycXEvVjVxaDVxUEhWU3RUYTFVYlUzcWt6MUgzVTA5UzNxWGVwMzlOQWFaaHBoR3ZrYXV6Uk9L
dnhkQTV0anNzYzdweVNPWWZuM05hRU5jMDBJelJYYU83VEhOQ2MxdExXOHRQSzBxclNPcVAxVkp1
dTdhR2RxcjFEKzRUMnBBNVZ4MDFIb0xORDU2VE9ZNFlLdzVPUnpxaGs5REdtZERWMS9YVWx1dlc2
ZzdvemVzWjZVWHFGZXUxNjkvUUoraXo5SlAwZCtyMzZVd1k2QmlFR0JRYXRCcmNOOFlZc3d4VERY
WWI5aHErTmpJMWlqRFlZZFJrOU1sWXpEakRPTjI0MXZtdENObkUzV1diU1lITE5GR1BLTWswejNX
MTYyUXcyc3pkTE1hc3hHektIelIzTUJlYTd6WWN0MEJaT0ZrS0xCb3NiVEJMVGs1bkRiR1dPV3RJ
dGd5MExMYnNzbjFrWldNVmJiYlBxdC9wb2JXK2RidDFvZmNlR1loTm9VMmpUWS9PcnJaa3QxN2JH
OXRwYzhsemZ1YXZuZHM5OWJtZHV4N2ZiWTNmVG5tb2ZZci9CdnRmK2c0T2pnOGloeldIUzBjQXgw
YkhXOFFhTHhncGpiV2FkZDBJN2VUbXRkanJtOU5iWndWbnNmTmo1RnhlbVM1cExpOHVqZWNieitQ
TWE1NDI1NnJseVhPdGRwVzRNdDBTM3ZXNVNkMTEzam51RCt3TVBmUStlUjVQSGhLZXBaNnJuUWM5
blh0WmVJcThPcjlkc1ovWks5aWx2eE52UHU4UjcwSWZpRStWVDdYUGZWODgzMmJmVmQ4clAzbStG
M3lsL3RIK1EvemIvR3dGYUFkeUE1b0NwUU1mQWxZRjlRYVNnQlVIVlFRK0N6WUpGd1QwaGNFaGd5
UGFRdS9NTjV3dm5kNFdDMElEUTdhSDN3b3pEbG9WOUg0NEpEd3V2Q1g4WVlSTlJFTkcvZ0xwZ3lZ
S1dCYThpdlNMTEl1OUVtVVJKb25xakZhTVRvcHVqWDhkNHg1VEhTR090WWxmR1hvclRpQlBFZGNk
ajQ2UGptK0tuRi9vczNMbHdQTUUrb1RqaCtpTGpSWG1MTGl6V1dKeSsrUGdTeFNXY0pVY1MwWWt4
aVMySjd6bWhuQWJPOU5LQXBiVkxwN2hzN2k3dUU1NEhid2R2a3UvS0wrZFBKTGttbFNjOVNuWk4z
cDQ4bWVLZVVwSHlWTUFXVkF1ZXAvcW4xcVcrVGd0TjI1LzJLVDBtdlQwRGw1R1ljVlJJRWFZSit6
SzFNL015aDdQTXM0cXpwTXVjbCsxY05pVUtFalZsUTltTHNydkZOTm5QMUlERVJMSmVNcHJqbGxP
VDh5WTNPdmRJbm5LZU1HOWd1ZG55VGNzbjhuM3p2MTZCV3NGZDBWdWdXN0MyWUhTbDU4cjZWZENx
cGF0NlYrdXZMbG85dnNadnpZRzFoTFZwYTM4b3RDNHNMM3k1TG1aZFQ1RlcwWnFpc2ZWKzYxdUxG
WXBGeFRjMnVHeW8yNGphS05nNHVHbnVwcXBOSDB0NEpSZExyVXNyU3Q5djVtNisrSlhOVjVWZmZk
cVN0R1d3ektGc3oxYk1WdUhXNjl2Y3R4MG9WeTdQTHgvYkhySzljd2RqUjhtT2x6dVg3THhRWVZk
UnQ0dXdTN0pMV2hsYzJWMWxVTFcxNm4xMVN2VklqVmROZTYxbTdhYmExN3Q1dTYvczhkalRWcWRW
VjFyM2JxOWc3ODE2di9yT0JxT0dpbjJZZlRuN0hqWkdOL1ovemZxNnVVbWpxYlRwdzM3aGZ1bUJp
QU45elk3TnpTMmFMV1d0Y0t1a2RmSmd3c0hMMzNoLzA5M0diS3R2cDdlWEhnS0hKSWNlZjV2NDdm
WERRWWQ3ajdDT3RIMW4rRjF0QjdXanBCUHFYTjQ1MVpYU0plMk82eDQrR25pMHQ4ZWxwK043eSsv
M0g5TTlWbk5jNVhqWkNjS0pvaE9mVHVhZm5ENlZkZXJwNmVUVFk3MUxldStjaVQxenJTKzhiL0Jz
ME5uejUzelBuZW4zN0Q5NTN2WDhzUXZPRjQ1ZVpGM3N1dVJ3cVhQQWZxRGpCL3NmT2dZZEJqdUhI
SWU2THp0ZDdobWVOM3ppaXZ1VjAxZTlyNTY3Rm5EdDBzajhrZUhyVWRkdjNraTRJYjNKdS9ub1Z2
cXQ1N2R6YnMvY1dYTVhmYmZrbnRLOWl2dWE5eHQrTlAyeFhlb2dQVDdxUFRyd1lNR0RPMlBjc1Nj
L1pmLzBmcnpvSWZsaHhZVE9SUE1qMjBmSEpuMG5MejllK0hqOFNkYVRtYWZGUHl2L1hQdk01Tmwz
djNqOE1qQVZPelgrWFBUODA2K2JYNmkvMlAvUzdtWHZkTmowL1ZjWnIyWmVsN3hSZjNQZ0xldHQv
N3VZZHhNenVlK3g3eXMvbUg3bytSajA4ZTZuakUrZmZnUDNoUFA3Q21WdVpITjBjbVZoYlFwbGJt
UnZZbW9LTWpBZ01DQnZZbW9LUER3dlRHVnVaM1JvSURFNU9UWXZSbWxzZEdWeUwwWnNZWFJsUkdW
amIyUmxQajV6ZEhKbFlXMEtlSnkxV2QxejJ6WVNmOWRmd1psN2NXWnFHcDhrNkh0U0pOcGhLMHVP
cERaejEvU0JrV21iYzVMb1NISTgvZSs3RUFrUUFFbkpzWHhwSmlXWCsvSGJCWGF4QzJFUHdYL25H
UDRKSStJdFZyM3ZQYnluWVE4TCtYZFBDb1V2UkZUeVV1eHorRCtsUHVZSW9iM1FSYkxDM3JEb2Zl
NTluUGN1cnJqSHZQbDlwUWlVWThvOHhueUNBMisrOHY0ODh6NTRmM256WDRFVHZoR2JOWWg4U2ds
QzhJaDhFalFrUWc5alM0SUo1Q011RUdaZTVPT281SjltVDhWbTk4R1RnbWV6WGJwNzNsNVdiMWY1
T2wxcWRTNVVIbkxBNEhOS2pocm1DS0NHSkJLQlIwS3dqQ1RvdmREc0pwbC8rcVd5OTJzeUdsVks0
am5FRW5tTSs0RmdNblFyN3h6NU5KQVVTcGlVWDNvRWhUNlN1dmdCY2lVdnlZRWZzSkljK0lqQkl3
VnlxZFVnUEhwZmV1c2VSQlNGZ2xINHprTEd3UlVmQnl4RWdUZTk3djM1Ri9oMUI2U1E3RjE1Nlds
d0dtNEhpaG1zL1BkZTYwZExob2UrUU5vaGpSeklqTEZ1Yjk0RS91ZlFORHlvUDY1QXM4bTZEMG9i
WkUxN0UxNWttVHdJMDJZOVY0QTBWM05USVd1NUdydkRkdW5uNE8raDE3YmNhTTFVVVFnaFBibVZR
TlFuek9QVWp3U0tvaXB4YjlOZG5xMVY1aWJyKzJLekFsS3hObE1JZ0xscmFubkxFRzk3MS80enhQ
eUFScEZnVmhSa3pHbXdYNDczMkgwV1JCZEN1WkEydGVReWcyY0ExYXZUQWY1TktJL1pyMUU2ZTlQ
SlpCMjNOcFNucFlWdHJBdWl5MldIdjNOcDI1Qy95M0s3SVRxUUJVU2VjOEFtL2JKellmYVVMZkpW
dGo2Y0RETFNJQklGa2JPVUpsbW5BZzhEbjNKWUYrNlNyWGpCTWRoV2lDSDRXdnIwdmRlSzJ3Ym81
SXNOMDJWdWM5SmNCQ2x0di9ORzZlNXcvS2M4eEZFVVNnOHJ0TG93dXZacm4rd05ydU5pbHdKdStO
UUFlOXIyYmJYWkJiaUR1WFU5TzdkTW16di90eExXa1hrTUNaOVFtVzVPNGcyV3g4K2d4bkhkYkc2
a2F0QXRKSDZ6ZFRBSTc5TXB2TElnWW9ZaDBpU0txSTFRMHBGbzBrOEdlaFJFamRVZzEzd0NBWUhw
aHNZaUlWdVRabWh6eEtLZjBBbTNnblNjUVRaWEMvSm12OWJXWDdxNzVnUWZHbHNHMllDcVZmQTU4
UUlPL1B1VXdKR0FvOG1IRkpVeW0yeHZVWTJHTlMrVDQxK1ZYODU4dERkZGoyUUhoaUtkb1JnMUc4
UUlaaXNjUWwwcDFRd25IOVVraDhrRkVSYzQ0cUpTcFFVamtLUUNxb3NyM2IrT2xiU1dra05nbTJF
TTg1M0FGQ0ZXeWw1bjY3dHNjK25hNGpCK01sUU9yTGJBVFdtcEM1ckwzbUF0VVJBaXAxRTRVbG9i
NU9FaFBJN29ySDhWUXpUS1AyM1lTb09VKzRRRHJDcGtuN0owdVh0OGxUMUhVdkFneEFoRkFTS0Nz
U0EwVE9vMi9sQnJaL2FRUmpxWVRkdDdWNmpYTmNEeTNVcDlBNm1WcHgwZXZQbWdPd2lpeG1wVklF
WFE2ZDZvcmkxbmc0NXdsenVubDlSRzFlOXdxUFYwNkJvLzJyZkorNEE5ZXBKVmQxOU9MVEg2K3lE
eVE4cnFhNktxdjIra0ZBbFkxWmc0RWw4K1VZNGlFY3diRXJVUlFYekc5ODFRMmNzVXkyVzIyR1Yz
QjZ3NElvaGZZSFJCRUE0YkJRSXoxWEE2TWhlcUp0TkxHbFRQdDhORE9DUHU0NURwNmpmTkZsbis0
eUJNUjBMQ3hNZGdPaklLSmhLWE9Id1ZUQXpiU0VSVUY5SHladkVnVGxma1ZVQmRJUjFRZkVsRUE2
azcrUjNxMnMwcHdjZ1Bzd00vdlRiOXhQemdEanpkMDVvaVc5VktpbHVwWi9obkpYcUgzMjhlNVZ6
UFdub29COXVxMHdrallJZm94Z0hEVFQxdFBwNWU1TnFOTjV4b0hEanRVcStZWTl0MzQzczQ4b3Fq
c3IxYTF6T2hVM3F0bWZCZnFvbUU1cGpCR1VQZHhLN1ZPSFh5dC82WGVEYlFmZkIxZi9vZnN3KzJm
bjBKb2JXQ3hsVTEyQTJzd0laOThLZkVOMHJpOFZ6OTRoRlAvMGdHOFV6QkZBSE1RdEFLQ3hvMmVt
VkNvVzV4VTlYc05oNGtOL0ZZU2J1bmp1elVoVVRTdlN5YkJ4TW00YjRRZFNnL1AyZmJuWXJBL3FW
Nkh1YnB3N3JZN3ZMRlZuM2VQV2JWVTdyZEZvczhoZEpiRVpiRlE2RytyUlV4WFM2NytEc3NWWlJW
dXZtZmVrNDNXY1A4YnBQZVpTWlRjWDlZcjkrNXJqZ2dlbEdqNXFMS3RxWHhPeGwyK2VDRUVqQmZo
VDZyZHRhOFJqRk9WMWxqbVdHWXEwYTdXaVpSZDR2VGRQMmdSRXFjNWdvU3VYV0lrRGMzdGV6a1da
bWIzTGRxTVJSUXdTQWJxZnlwckZZd3plNnpUYlplWkMzUzlYVEJaZjV3V1IxcnlWSDZUVWNtOHFp
YkZEQ1hJdUZHc0NYUVJEZUk3Zk5YRldLSFRXV0hub2hVMENmejVDb1o5T2ZKWkh6QUMwZGIzT0JG
SG4wZExvZnRKcG5Oa3ZHMXJnQ0R5WGhvWU93RWRNd2E4dGdSRGdxNjVLQ0hYVTduQW51WmZzdVdP
dCtlOVhiTjE0dmw4NTFPdEJlVjFmTGVyWkZ0VCtiODI0V0QyemlTb2ErMjZucjV0OUs0VmhhZjEv
bjNaL1dTMzRIMi9EN1BOaFhoSlZVWW5qYlp0ajREQ3VXV3JoRmRhQUlielRaZFBTMnpyMmZicng4
VXJIbGRaaUNMOC9WRDlmWjM4Vnc5YmJMdnNzem9ZdmFTNjBMMzdZajUwRGIvdENrVzJYYWIzZjI3
a244c1hySWYyVVpWM0llaXRnOHI4Skp1bEUxQW5XNHpIWXppUjM1M3hMU3dUZGRMVzBkWjE5eXQ0
V20rMFk1K1UrdFZsK0w5U1BPZzN0VE82TUlRMlJqNnEyeVRMMUsxZUxmcDdyR0FreVRmN2hTQXIy
ZUQvdTErYmVwZi9wc0hid1E1eUtzcm1YaDZOWm5lR01tWHpPTkxMUTV6bjNQeERQSkV3SEhMOUZW
SnN3d1E0bU5PRzR5ZmY0OW42cFFmSnYzcjhXUTJUd2F6OHk4MStWTXlHczJxWnpoMXE1dWVzNnYr
YVBSeE9wbjhWcjMzLzRqSHY4ZlZTNGY0b0Y4OVJKZ2lkazRKVWJQZFRUeUVXamZTU0tieFlENlpx
bzRoSGsrVHoxcjVQSjVPKy8vdHozNjVVUVVKbWhXbGVUeFJRb2dQVWNDSUlLRjVjdjREcVZKQXB3
cGxibVJ6ZEhKbFlXMEtaVzVrYjJKcUNqSXhJREFnYjJKcUNqdzhMMVI1Y0dVdldFOWlhbVZqZEM5
RGIyeHZjbE53WVdObFd5OUpRME5DWVhObFpDQXlPU0F3SUZKZEwxTjFZblI1Y0dVdlNXMWhaMlV2
VG1GdFpTOUpiVEV2UW1sMGMxQmxja052YlhCdmJtVnVkQ0E0TDFkcFpIUm9JREk0TXk5TVpXNW5k
R2dnTXpReE9DOUlaV2xuYUhRZ01URXpMMFpwYkhSbGNpOUdiR0YwWlVSbFkyOWtaVDQrYzNSeVpX
RnRDbmljN1oyL3J1dTRFY2JmSjlVbWdKSEhNTkx0UTl4aTIyMVRwTGhJbFNwNWdWUkJtZ0JidTBp
WEtsWDZ2SWhYdUlNejRKMS9uS0ZJU2ZiNVBoQ0dqNDlFVVRKL211RndLRCtmRUFSQkVBUkJFQVJC
RUFSQkVBUkJFQVJCRUFSQkVBUkJFQVJCRUFSQkVBUkJFQVJCRUFSQkVBUkJSK2gvLy8vUFAvLzlW
eXAvL1B0UGJlSFB0N0p0ZG5aTEllaHkycmdnZ2paZTduLzY0ZmJ6Yi9KbDIzNHJ4QnI0Z2o2NXhp
Q0tDMW14czg4TWdvN1Raa3EyYnYvbGI3L3pqTTZBa2VMQ1dNRm1RVzh2UW9tN1BiM1JyeDVXNU4x
MUIxRHNRMktjQmIycllwVE1Qd1ZFUUFPQ1NBSWxYVXlzNExOQmtOQkdCSStWUEh6RTU3QkhFR1Jx
UXlPd1NyckFKRUdRS1RaTVFBbUNkbXB6MkxRN0I1UWdhRUFiVFVtVU5oT0dHVmdJQ2hUVHRCSEVy
ekJNcGg3Ly9XVXJYLy94aHgvLy9Ic3EyL1hrOTl2bjIzL1BiaU4wa0NnRUVhREViMkNZdElpalpI
SUl5TXJvcFM4UmpadTZobWw3aFdFUzJyNTNza1RWQXF5RXRxdWhMOUhaalJxUkY0VVFLRzBtN095
V1hrNTVxK1FWTU1YU1FHMTNxck1iVmRabWNVeFBqem1pc29nbXNuZVV2TWQvdm9yMjB3U21XcjBC
VVBGOEV6TTFkOUJFYVlHVXpuVC9QcVdXVzNMOW9FZE1FNGNnMmpBRm1JcjFCa0NaZ1FpMlNuTnBH
bGc4UlFHUUM1S2x2L3JNeUNnZWJZR3BWd2VxR3lTZlFoUFpvNTFPMGFYaWloNU55UkcwdC90cmRa
NFZlbW1ndG42dUF4SHR1R2wvZUZ5cytOaFpyaE1TTWExTUtSN2xtU3F2RW5ZZHVXUU9VZDNsK1JI
OEYyWE1kTEt2MjlZVFYyVUNWV3IvaVRLSFRpMVFlMmd5cmRLOXR5eFJqNmMwVTZlN2Y2WjlHWWp1
ZW5iSzdEblYrL1pBL0xrN3lzdVQxWjFISUV6eTErVDYxaXB3OXZiYnB2MG9CV1NkYnFmTXJqSldW
WjdOcFVDVjV0RzZUTVZReEZoMTk3M3N0RlJzbm9ZN2JidDRLaytRZU8zYXJCUEhVN1BNRTB2M1pC
T1dkVURsKzMvbWZLdnpDT0pFTW8yNW9KMkt6ZE13VFZSdHdKRVlzb2syZEZscnkxbU9uL21ONzNI
dmt4VXVBbXFBcHVDVUIycXJXcWd1MGFkSTkvUDd2c3dpUFdJYVFFa1hyNTVieGZHYkczWFhkK0Q5
WCs2SlFIbUJFVzVBTUlPbUcybGVuTGFxTnQzUkhFYVpRSEZxY1Z1dUU2T0l6ZE9BTjZYWHlBZHZ1
a1dUN2cydmtzMmIrNVEvM2JYMmY3TVpTRmNBWmJwbjN1bm9FOWNWaW0wQ0o5T0xiN3hpMkZ3L0lJ
TExHRTI2cTVjSXl2Qmx3cFZzN2JiWmRzcjE2MlJvdXIvblZhdDcwUXFnU2pjSDg5empDZ2V1ek1z
QjFhYnRpYjQ2ME91b3RwdmxtTTB0K2hDM2l0ZTNiVC9GNjh0MHFpblZIZ0RVUUZ4ZDd5S1FFVUFO
c1BCeVFISGNZTCt6eHducUdxVkZXT242azAyOWY4c01yRjh0cVhjQ1N2dDdHWU1TMTJsR0xFdDI2
cldBYWxNalJKK3Y5amVSWmVGWlBhK0k1WXJpejN4SjJwMFNmWUhleWVVYnN5WWFtZmEvWHN3OHYx
VDV0WUFTWWUyMmU1YzhvalpCdldTTXhPb3FFeVh4ZVdDaGJ1bmdPVVVnOTRjbUZnRjFTbEJDQTlV
dTJ6ZUxHZTVyVDc4YjlPNlM5VnBBdFlubExRalZudGFHTmJwQWVSQ0pWNU92cnNGS3RweE9mSXJY
bHdsMnJhaHpPbEJ4ejgrWHNZbWtmT3JSbFlIeVFDaVpKejBLODVneTZSQ0xGbHVVOUNkZHNrcEFU
WW4xYVd1eTh4cy9aV0ozZUQ0MzA5UjhJbE5tSHVxeVFIbng3Wko1RWpSNUtKbW1SeGZ4dVdld2do
RldDYWpibWdDQzJUSHlNc2NkZXJPNVFPa0tKd0xGRGNpa0lYVmpqMWNHcW0wbjk4bFNEZmRFZUZ4
VEVHUFZMUzFpb3VTREVuVFdVNExudWxka3Z2UjIvY0tqV2NiYjdXUG1RUmVOb1FaS0psYzJ2MVQ1
aFlCcWpRdS9sc3hUOEpBeGI4UzBzd1RXcWdRVVc2Z3BLUk9sQklONHIvdzlYMjhXSDI1UmxHK1BN
amVRRndLcXpiVmpwdkozYkU1WXlsdW82VVVEVzdWUTYyYWpNa3p0U2FXdUhxNGJPUnliaDlxdkdK
a1hBdXFMK3ZuT2ZPOGlaNi9MMFU3WGJzQmFKZHMvRjZpbmIyNTIrai9CTkdncHVwaFpZekxjZGFk
UEU3d29VUHZOVTJDYldrOHM1dUl2Ly9xdGZ0VWZkdUhLUnlUYXdXT2V3YTQ4THJxNUFZR2RDanBQ
TXQ4NzJEaVR5NWZNUG9wWnppd05mbldnUkVTaTJyV20rSGhNaW9tUDRNakRxclZUeVJ1Q21NNGV2
WVJTc2YrbW41OUFmM2JqeVY1djlHeWlDQXNFaDlBMWU0Yk1teUZxMnhDdnJnb21jSFVMdS9GOHZR
Yms5TFViR3FqU2VxTEFObVVDRWFaVk1pMFVsd0FyUGtvMUlqRVhxT2ZVMlp6dVBUbVRoRENBYWpk
WktGZ1AxZlVoUlQxZVVDTE9zRFZQOElKQTVlTmRYOEtmWGV1YUo4OHd0ZXdJcjArZ1pHS1Z2eUY4
K1g3d09Ib0piZVVuTWF0TTZUNVRXbDJlZCtlRzI5L05qRTIyYytBMHJ3WlUva2FkSEQyWldBVW9l
ZWJKZkdNYXFmd05ZZXpFUzZvK1NLSHRUc0crdXRza095MFpoU1JRWSszZmt5RFJSZU9OZ1lybm5w
TG1TVnVsdUhqanJMWWsvVDF0bW5kY3hVZ0QzWW1IQm9FN3A5MnFwR3RYWGU2VVp5cU91blNmUlph
cHArdmZYZzJvMHRLOG0yT2U0cUdUaVZJSnF5RDZWeDBBRHR4SnhoU01PTGdYbWFOMUlpWDU4QVFQ
cTNaalhXRnk5VVF3aENrOWw4KzdEc25HZURWVUYxZ3RrZ0NxRkhEMnpGTmdtN1N6TjFBQ081VVAr
T3NuQk82NGlqVTlpZzlOM1hPSWRUWHZyLzlSZjNxdHQvdHdHNlpMQUpYY2kvMjlxbm1LSTNnN3lh
ck9SeDlwb2FCUG9oYW9mS2NhaSsrTmpadnlMdC9BZkRTQWdxYXJtbjRUNTVZZlk1dE1yQVpPZVdE
d0NFR3hlRFNSN0ZUZWo0UUttZ1JXVTBaUEFWTjU4eVNlN3dTZ29Ma2FBTW96VDNrTE5SZW82bUtU
MXNLV29qRVExQlVQS0twQUxSbzliZldMTjEzemxEL1pOajErSUx3SlFWMXhYS0swYkh6QVFvMFpx
UzVXMVFkZmlBYmZpZ24yRU5UVkdGQURGaXJtSWwvb09mL1ZwLzJMMVZ2clFueDdGb2EzTmN4dDFY
dUxwcDR2TWlkMXJ5eDdIN05RR2E5djlXbnlqOHNMcHFaSEpMeDBpUHkwUG1VQ3pHM1ZTNnZMQzZW
SXJiNEw4VjJSNzQzbVRaS0dSYWVQb1pZT1pPZ2huTnJaV3pHQXV2bkwzeDdmLzI2TFY4UFZFZ0JP
RjJYeEJkZmttS3dKNXBvU3BaN2Z2dXRaUUMySzhzMi9DdCtrelJOYnFPa0RxQmdXRW1GMXpXV25G
MVFYcU1PYVFWOVpOeG55bm42TXVUY1BsVUVwR2VXYjNzTjFMR0tkdi9mTUFmWDg2Q1JnS3FPckFV
VytYNUFZdkhXNVVxYUVaNkZtVFVYTnZRNDgxNnlaV3VGbjVqRVo5dndIUEp5RE0xR3J1OFFiZDU5
Wk1iMUpPMzFJK3UzTzB1THh1VkcrZGVPcDF0a1Q1bWw2Zkk5VXNqdG0vSUh1ZnVMRDRaVUw1dUlM
M3NzOEZ2ZmVkc1NYUEZ6K0taM2U5blRuRjZlZ3Q5RWJlQTNMTjhsY2p6OFdQOHdEbGN3KzJwOTZW
RDBGczZuY0JzM1Vvb3lqRWxEMDlZbnZ5K3prUE93eW44WVFQOFdsZFU3YXZmaTlQZ1ZlM2l1ZWhV
Smt4UTlqTVhjeHJ3bmI2TFp0K2hEc0hudHpFQjVRN2RITkpvbGQrTkRtdFRLdnNDZWE0a2x1R1R0
NysxMitLZU1waXV4NXp0NjYrZHpxeUVqM1R4T29wLy9zTytvRytyK3hTL24xNDNkcVRLQ0NYbVFl
am1reWR6RUhqSUZaTVN1UG8zem1CdDZWZVZwdVpMNDkwOFVaZ0l0Q0UxUHMxTmJJbHZGanpOT3pE
aFRIWUZrZVVKN01JVVltNk9FRkcrTjdzbm00b090NmU5RW5RZlBFbGxXZ01rMXEvMnNhNjJPa3Az
V3FRWWtrVm51TUNMbW1YanZYcFJzTkFIVlRQL2xYamY3cFhVeG5VdXRtclMzdG5vSzRDU1NEQnVK
TTg3RzdBYUFHNGhqSks3Wkl3VUo0elJTUG9mSkdha3FINTRCNWk5VlM4L1JjRHhTUG50b1Y5SG9Y
YmZpU1IzOWFYcWlRdUprbnU2TGVyQnV5SUEwQU5VQkg3TFVlSUowMUVaZ243ZlY1V00yZGlqSW5v
WlptdzY1eitZSW5uT2lESnBzUkJDWHlleVZ6cFV5dmp4c2ZQR0ZqR0todWszUTlvajNWR25iSzdL
NWRzZ0tnVm5SMTBjalZpelZLUUptZWlRbVVDRUR4N28rUGh6bWZDMVIrTGx2WExJTFZPdmcyQU5T
ZWZFZ3gwWEJ3b2pLRnBzZENFL3poSXBUYVJoN2c3SkZXaE0yN0RvenA4bVY2MUJTWGI5aEM2UTNN
TVBVeExwK3VNd2l3THhVdHB0Qk14VWFLVUZxUmEyU0tabmdQT0ZZZUtDOFFwK25JeE90S2M1MXhB
dzRiUXlWYmRRcFFRWHVPRVdIVkJxdE5VN1ZCdEcxREhCMjhzdStZdytVdmZqQi9wSUdLZTdqcGRN
Vng0OWF4MGFkUUFtb3N5bGV0ZjNXVUw5RHBDMnIwU3NCVENEcEZHYURpZ0ZMVlFubTMwSWVmMk1C
enZsUEdVTStoZWFoOC9SbGYwZlNjUy9OUWdVNEg2ak9yMi9tNzJTeWxNZFFqek8xNU5qOGxRSkVy
L3JQTjF0T25VQVhxR1U0SG04aC85UmNtVjJNc3c1a1NiWjA2aDdEZDh1RFF4UEVxSmZRZUtlNnVv
bkNlVDZhN2V2NGJqWTdiNE43dEl5V3ZTL0dQSDB0NDJsQ2g2U3VPQWRVYXhFZVRiZWp4emplVzlx
Uzh1dzMzZjk0c0U3VXd3L0play9qUVgxVzI1UEVEcUlQRmVYcXJ3NE1ETXFlS2JoL1B3OC9jNklK
NUtGMm5ON0diYiswc29McU4xSHBVc3J2Rmx2a3dvRDVFMTl5TDlnU1g0dFZGdzdFMmgveWFkbXFk
SHNXbFJuRlZpNXlaYWlQejJ3K2ZlS2xKczY3d3hVVnVuZ2diZmtLbWt1cDJpVzRrQVhwWHRTanBw
U0pneXBRWWRyWC9pc09NMEhzclJxbWRUUVpUUW1KUUlONkRwazhsSGk2WkN4ak5aWVBiNTJlMytv
cDZmUDlEYWFla2ZVSW5paDA4dmZnaUtQRDZJS2dWcFZLMEtPbmt3SUNtczVzUFFWY1JKUUd5NTVh
eFJ6Qk0wSHVybEszSHhtaU1JOXFZa214WG54Y0VuYUxXeWhBcHVyRG5KaWFqNzgzRHhzV3JnSWhS
Z2xXQ1BvUEk3cGk1TjVtaWFXci9kY0I2V3dpNnBvZ3NiWXdDanJ4LzhmcXBzODhKZ2k0aEVYT0li
UlBGOU1oRkJFUVExRlg3VzRSVVB0VUtSQWlDSUFpQ0lBaUNJQWlDSUFpQ0lBaUNvUGZXcjI2WDNY
Z0taVzVrYzNSeVpXRnRDbVZ1Wkc5aWFnb3lPU0F3SUc5aWFnbzhQQzlNWlc1bmRHZ2dNalU1Tmk5
T0lETXZSbWxzZEdWeUwwWnNZWFJsUkdWamIyUmxQajV6ZEhKbFlXMEtlSnlkbG5kVVU5a1doOCs5
TjcxUWtoQ0tsTkJyYUZJQ1NBMjlTSkV1S2pFSkVFckFrQUFpTmtSVWNFUlJrYVlJTWlqZ2dLTkRr
YkVpaW9VQlViSHJCQmxFMUhGd0ZCdVdTV1N0R2QrOGVlL05tOThmOTM1cm43M1AzV2Z2ZmRhNkFK
RDhnd1hDVEZnSmdBeWhXQlRoNThXSWpZdG5ZQWNCRFBBQUEyd0E0SEN6czBJVytFWUNtUUo4Mkl4
c21SUDRGNzI2RGlENSt5clRQNHpCQVArZmxMbFpJakVBVUppTTUvTDQyVndaRjhrNFBWZWNKYmRQ
eVppMk5FM09NRXJPSWxtQ01sYVRjL0lzVzN6Mm1XVVBPZk15aER3WnkzUE80bVh3NU53bjQ0MDVF
cjZNa1dBWkYrY0krTGt5dmlaamczUkpoa0RHYitTeEdYeE9OZ0Fva3R3dTVuTlRaR3d0WTVJb01v
SXQ0M2tBNEVqSlgvRFNMMWpNenhQTEQ4WE96Rm91RWlTbmlCa21YRk9HalpNVGkrSFB6MDNuaThY
TU1BNDNqU1BpTWRpWkdWa2M0WElBWnMvOFdSUjViUm15SWp2WU9EazRNRzB0YmI0bzFIOWQvSnVT
OTNhV1hvUi83aGxFSC9qRDlsZCttUTBBc0tabHRkbjZoMjFwRlFCZDZ3RlF1LzJIeldBdkFJcXl2
blVPZlhFZXVueGVVc1RpTEdjcnE5emNYRXNCbjJzcEwranYrcDhPZjBOZmZNOVN2dDN2NVdGNDg1
TTRrblF4UTE0M2JtWjZwa1RFeU03aWNQa001cCtIK0I4SC9uVWVGaEg4Skw2SUw1UkZSTXVtVENC
TWxyVmJ5Qk9JQlpsQ2hrRDRuNXI0RDhQK3BObTVsb25hK0JIUWxsZ0NwU0VhUUg0ZUFDZ3FFU0FK
ZTJRcjBPOTlDOFpIQS9uTmk5R1ptSjM3ejRMK2ZWZTRUUDdJRmlSL2ptTkhSREs0RWxITzdKcjhX
Z0kwSUFCRlFBUHFRQnZvQXhQQUJMYkFFYmdBRCtBREFrRW9pQVJ4WURIZ2doU1FBVVFnRnhTQXRh
QVlsSUt0WUNlb0JuV2dFVFNETm5BWWRJRmo0RFE0Qnk2QnkyQUUzQUZTTUE2ZWdDbndDc3hBRUlT
RnlCQVZVb2QwSUVQSUhMS0ZXSkFiNUFNRlF4RlFISlFJSlVOQ1NBSVZRT3VnVXFnY3FvYnFvV2Jv
Vytnb2RCcTZBQTFEdDZCUmFCTDZGWG9ISXpBSnBzRmFzQkZzQmJOZ1R6Z0lqb1FYd2Nud01qZ2ZM
b0szd0pWd0Ezd1E3b1JQdzVmZ0VWZ0tQNEduRVlBUUVUcWlpekFSRnNKR1FwRjRKQWtSSWF1UUVx
UUNhVURha0I2a0g3bUtTSkdueUZzVUJrVkZNVkJNbEF2S0h4V0Y0cUtXb1ZhaE5xT3FVUWRRbmFn
KzFGWFVLR29LOVJGTlJtdWl6ZEhPNkFCMExEb1puWXN1UmxlZ205QWQ2TFBvRWZRNCtoVUdnNkZq
akRHT0dIOU1IQ1lWc3dLekdiTWIwNDQ1aFJuR2pHR21zVmlzT3RZYzY0b054WEt3WW13eHRncDdF
SHNTZXdVN2puMkRJK0owY0xZNFgxdzhUb2dyeEZYZ1duQW5jRmR3RTdnWnZCTGVFTytNRDhYejhN
dnhaZmhHZkE5K0NEK09ueUVvRTR3SnJvUklRaXBoTGFHUzBFWTRTN2hMZUVFa0V2V0lUc1J3b29D
NGhsaEpQRVE4VHh3bHZpVlJTR1lrTmltQkpDRnRJZTBublNMZElyMGdrOGxHWkE5eVBGbE0za0p1
SnA4aDN5ZS9VYUFxV0NvRUtQQVVWaXZVS0hRcVhGRjRwb2hYTkZUMFZGeXNtSzlZb1hoRWNVanhx
UkpleVVpSnJjUlJXcVZVbzNSVTZZYlN0REpWMlVZNVZEbERlYk55aS9JRjVVY1VMTVdJNGtQaFVZ
b28reWhuS0dOVWhLcFBaVk81MUhYVVJ1cFo2amdOUXpPbUJkQlNhYVcwYjJpRHRDa1Zpb3FkU3JS
S25rcU55bkVWS1IyaEc5RUQ2T24wTXZwaCtuWDZPMVV0VlU5VnZ1b20xVGJWSzZxdjFlYW9lYWp4
MVVyVTJ0VkcxTjZwTTlSOTFOUFV0NmwzcWQvVFFHbVlhWVJyNUdyczBUaXI4WFFPYlk3TEhPNmNr
am1INTl6V2hEWE5OQ00wVjJqdTB4elFuTmJTMXZMVHl0S3EwanFqOVZTYnJ1MmhuYXE5US91RTlx
UU9WY2ROUjZDelErZWt6bU9HQ3NPVGtjNm9aUFF4cG5RMWRmMTFKYnIxdW9PNk0zckdlbEY2aFhy
dGV2ZjBDZm9zL1NUOUhmcTkrbE1HT2dZaEJnVUdyUWEzRGZHR0xNTVV3MTJHL1lhdmpZeU5Zb3cy
R0hVWlBUSldNdzR3empkdU5iNXJRalp4TjFsbTBtQnl6UlJqeWpKTk05MXRldGtNTnJNM1N6R3JN
UnN5aDgwZHpBWG11ODJITGRBV1RoWkNpd2FMRzB3UzA1T1p3MnhsamxyU0xZTXRDeTI3TEo5WkdW
akZXMjJ6NnJmNmFHMXZuVzdkYUgzSGhtSVRhRk5vMDJQenE2MlpMZGUyeHZiYVhQSmMzN21yNTNi
UGZXNW5ic2UzMjJOMzA1NXFIMksvd2I3WC9vT0RvNFBJb2MxaDB0SEFNZEd4MXZFR2k4WUtZMjFt
blhkQ08zazVyWFk2NXZUVzJjRlo3SHpZK1JjWHBrdWFTNHZMbzNuRzgvanpHdWVOdWVxNWNsenJY
YVZ1RExkRXQ3MXVVbmRkZDQ1N2cvc0REMzBQbmtlVHg0U25xV2VxNTBIUFoxN1dYaUt2RHEvWGJH
ZjJTdllwYjhUYno3dkVlOUNINGhQbFUrMXozMWZQTjltMzFYZkt6OTV2aGQ4cGY3Ui9rUDgyL3hz
QldnSGNnT2FBcVVESHdKV0JmVUdrb0FWQjFVRVBnczJDUmNFOUlYQklZTWoya0x2ekRlY0w1M2VG
Z3RDQTBPMmg5OEtNdzVhRmZSK09DUThMcndsL0dHRVRVUkRSdjRDNllNbUNsZ1d2SXIwaXl5THZS
SmxFU2FKNm94V2pFNktibzEvSGVNZVV4MGhqcldKWHhsNkswNGdUeEhYSFkrT2o0NXZpcHhmNkxO
eTVjRHpCUHFFNDRmb2k0MFY1aXk0czFsaWN2dmo0RXNVbG5DVkhFdEdKTVlrdGllODVvWndHenZU
U2dLVzFTNmU0Yk80dTdoT2VCMjhIYjVMdnlpL25UeVM1SnBVblBVcDJUZDZlUEpuaW5sS1I4bFRB
RmxRTG5xZjZwOWFsdms0TFRkdWY5aWs5SnIwOUE1ZVJtSEZVU0JHbUNmc3l0VFB6TW9lenpMT0tz
NlRMbkpmdFhEWWxDaEkxWlVQWmk3Szd4VFRaejlTQXhFU3lYakthNDVaVGsvTW1OenIzU0o1eW5q
QnZZTG5aOGszTEovSjk4NzllZ1ZyQlhkRmJvRnV3dG1CMHBlZksrbFhRcXFXcmVsZnJyeTVhUGI3
R2I4MkJ0WVMxYVd0L0tMUXVMQzk4dVM1bVhVK1JWdEdhb3JIMWZ1dGJpeFdLUmNVM05yaHNxTnVJ
MmlqWU9MaHA3cWFxVFI5TGVDVVhTNjFMSzByZmIrWnV2dmlWelZlVlgzM2FrclJsc015aGJNOVd6
RmJoMXV2YjNMY2RLRmN1enk4ZjJ4Nnl2WE1IWTBmSmpwYzdsK3k4VUdGWFViZUxzRXV5UzFvWlhO
bGRaVkMxdGVwOWRVcjFTSTFYVFh1dFp1Mm0ydGU3ZWJ1djdQSFkwMWFuVlZkYTkyNnZZTy9OZXIv
NnpnYWpob3A5bUgwNSt4NDJSamYyZjgzNnVybEpvNm0wNmNOKzRYN3BnWWdEZmMyT3pjMHRtaTFs
clhDcnBIWHlZTUxCeTk5NGY5UGR4bXlyYjZlM2x4NENoeVNISG4rYitPMzF3MEdIZTQrd2pyUjla
L2hkYlFlMW82UVQ2bHplT2RXVjBpWHRqdXNlUGhwNHRMZkhwYWZqZTh2djl4L1RQVlp6WE9WNDJR
bkNpYUlUbjA3bW41dytsWFhxNmVuazAyTzlTM3J2bklrOWM2MHZ2Ry93Yk5EWjgrZDh6NTNwOSt3
L2VkNzEvTEVMemhlT1htUmQ3THJrY0tsendINmc0d2Y3SHpvR0hRWTdoeHlIdWk4N1hlNFpuamQ4
NG9yN2xkTlh2YStldXhadzdkTEkvSkhoNjFIWGI5NUl1Q0c5eWJ2NTZGYjZyZWUzYzI3UDNGbHpG
MzIzNUo3U3ZZcjdtdmNiZmpUOXNWM3FJRDArNmowNjhHREJnenRqM0xFblAyWC85SDY4NkNINVlj
V0V6a1R6STl0SHh5WjlKeTgvWHZoNC9FbldrNW1ueFQ4ci8xejd6T1RaZDc5NC9ESXdGVHMxL2x6
MC9OT3ZtMStvdjlqLzB1NWw3M1RZOVAxWEdhOW1YcGU4VVg5ejRDM3JiZis3bUhjVE03bnZzZThy
UDVoKzZQa1k5UEh1cDR4UG4zNEQ5NFR6K3dwbGJtUnpkSEpsWVcwS1pXNWtiMkpxQ2pNd0lEQWdi
MkpxQ2p3OEwxUjVjR1V2UTJGMFlXeHZaeTlRWVdkbGN5QTRJREFnVWo0K0NtVnVaRzlpYWdvek1T
QXdJRzlpYWdvOFBDOURjbVZoZEc5eUtGRjFaWE4wSUVScFlXZHViM04wYVdOeklGSmxjRzl5ZEds
dVp5QlRaWEoyYVdObGN5a3ZVSEp2WkhWalpYSW9hVlJsZUhRZ01pNHhMalFnWENoaWVTQnNiM2Ro
WjJsbExtTnZiVndwS1M5VGRXSnFaV04wS0ZCaGRHbGxiblFnVW1Wd2IzSjBjeWt2VFc5a1JHRjBa
U2hFT2pJd01UY3dOVEV4TVRReU9UUXdMVEEwSnpBd0p5a3ZRWFYwYUc5eUtGRjFaWE4wSUVScFlX
ZHViM04wYVdOeklFbHVZMjl5Y0c5eVlYUmxaQ2t2UTNKbFlYUnBiMjVFWVhSbEtFUTZNakF4TnpB
MU1URXhOREk1TkRBdE1EUW5NREFuS1Q0K0NtVnVaRzlpYWdveUlEQWdiMkpxQ2p3OEwxUjVjR1V2
VDJKcVUzUnRMMDRnTVRndlRHVnVaM1JvSURRNU5pOUdhWEp6ZENBeE1qZ3ZSbWxzZEdWeUwwWnNZ
WFJsUkdWamIyUmxQajV6ZEhKbFlXMEtlSnp0VTExcjIwQVEvQ3Y3QjhMcFZybzdDWUtoVXVyV2xM
YkdOalJnL0tCSTEzQkZIMEdTUy9ydnUzdVNEWEZDYU9JRyt0QVg2ZlkwTjdlem1wRVFnQUdqUUJv
SVl3bFNnZ3FwUWxBcUFobUM1aW9DZ3dGSUJYRVFndFFReHdneEpKb1FDY2dnTUlBeGdRbUhTR2dk
QXhJdWltbWZJSXByWXRFcUJOUjBVNmdCRGNpWUNDOHZSWnIzZHQ0Mmc5aTQydllYcTdiT0c3SDVk
V2VGMzMzZkZHM3BtbHZ4elRYdm10NGQ2L1grWm1BVVErVnN4bFRMdkxQTlFLMEZzQklabmFhcTM0
WmNRdUtmRVQ5M0kvMHl2N1ZpWmZ0MjN4VzJwK1BYWDI5KzJHS2cxYUttVVFTTW5jM0VzbXVMdFIx
Z0s1WlhjeEFiZXo4QUllaDBPcjJ6NmIzWTBhMVYyNjN2OHNJU3paWDludStyWWZVaDVjR09iQ3lL
UHMwbEQ1bjduTk1uR1k1TFAydS9TbmpjZm1WNDRyeTZkdlFQUmhiaTJYU3VUdHY3TFhlcGljb2t1
Qk9mYmVueVI3dHBaVzE1dWp0TzdIbkpYdkVrZFZMcTViK2xUQlpIbzE1a0dSdWpKSnY0WC9iQUtS
OXQ5ZE1PcnNoZjdCUHhKYS9wd09TWEkyRkdIbkMydTBqYnFudzE1eW5wT1g2ZU9OWFRmYjZXTG5t
eXczTkVtNUh4bUtlZVc2UUlvdmpreW41cmZPaWt6OTd1dVl4NkV3QjYvNEgrODVDaS9Kc2hSWHpr
WGd5UDdzWG80RjVVQi9laVByZ1h6UlJTK2NZaFBaWDg4cENlTC9NMHBKajhEK20vSGRMZnAxUmhE
Z3BsYm1SemRISmxZVzBLWlc1a2IySnFDak15SURBZ2IySnFDanc4TDFSNWNHVXZXRkpsWmk5WFd6
RWdNaUF5WFM5U2IyOTBJRE13SURBZ1VpOUpibVJsZUZzd0lETXpYUzlKUkNCYlBHRTJZekpsWlRV
NVlUQXpNamhsTkRWbE4yRTBNbUkyWlRRME56VmpOak5tUGp3d05qTXdNVGcwWm1Zek1XVXhNelU1
Tm1RM1pUazNOMkZrTnpNME1XTmlNRDVkTDB4bGJtZDBhQ0F4TURrdlNXNW1ieUF6TVNBd0lGSXZV
Mmw2WlNBek15OUdhV3gwWlhJdlJteGhkR1ZFWldOdlpHVStQbk4wY21WaGJRcDRuQ1hMT3hLQ1FC
Q0U0WjRWNUtrcktibEZ4QW1JMFN0UVplTHh2SXdKb2Q2QkN4amcvTFVUZkZYVDB5TnAzNE9DWkxm
TlVZUUhmQjBiSks0R2xkbkxzM1pOMlFFeXlPRUlCWlFRclAra1htM1h1NytOUzFwYk9NRVpJbHln
ZzhhbXA1Zm5OL3lVNWc5UGx3dm5DbVZ1WkhOMGNtVmhiUXBsYm1Sdlltb0tjM1JoY25SNGNtVm1D
akU0TnpRNENpVWxSVTlHQ2c9PXx8fHx8fEZ8fHx8fHx8fHx8fHxRVUVTVCBESUFHTk9TVElDUy1X
RVNUIEhJTExTXl5eXl5eRkleQ0xJQV5eMDVEMDY0MjgyN3w4NDAxIEZBTExCUk9PSyBBVkVOVUVe
XldFU1QgSElMTFNeQ0FeOTEzMDQtMzIyNnwxMzY2NDc5MDk5XlRFUlJBWkFTXkVOUklRVUVeXk1E
Xl5eXl5eXl5OUEleRU4N</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>HL7V2</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.4.2">
            <handleRepetitions>true</handleRepetitions>
            <handleSubcomponents>true</handleSubcomponents>
            <useStrictParser>true</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <stripNamespaces>true</stripNamespaces>
            <segmentDelimiter>\r</segmentDelimiter>
            <convertLineBreaks>true</convertLineBreaks>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.4.2">
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <segmentDelimiter>\r</segmentDelimiter>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.4.2">
            <splitType>MSH_Segment</splitType>
            <batchScript></batchScript>
          </batchProperties>
          <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.4.2">
            <segmentDelimiter>\r</segmentDelimiter>
            <successfulACKCode>AA</successfulACKCode>
            <successfulACKMessage></successfulACKMessage>
            <errorACKCode>AE</errorACKCode>
            <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
            <rejectedACKCode>AR</rejectedACKCode>
            <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
            <msh15ACKAccept>false</msh15ACKAccept>
            <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
          </responseGenerationProperties>
          <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.4.2">
            <successfulACKCode>AA,CA</successfulACKCode>
            <errorACKCode>AE,CE</errorACKCode>
            <rejectedACKCode>AR,CR</rejectedACKCode>
            <validateMessageControlId>true</validateMessageControlId>
            <originalMessageControlId>Destination_Encoded</originalMessageControlId>
            <originalIdMapVariable></originalIdMapVariable>
          </responseValidationProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.2">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.2">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.2">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.2">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.2">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.2">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules/>
      </filter>
      <transportName>Channel Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>2</metaDataId>
      <name>ORU_R01_2.3.x</name>
      <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <channelId>none</channelId>
        <channelTemplate>${message.encodedData}</channelTemplate>
        <mapVariables/>
      </properties>
      <transformer version="3.4.2">
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>HL7V2</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.4.2">
            <handleRepetitions>true</handleRepetitions>
            <handleSubcomponents>true</handleSubcomponents>
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <stripNamespaces>true</stripNamespaces>
            <segmentDelimiter>\r</segmentDelimiter>
            <convertLineBreaks>true</convertLineBreaks>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.4.2">
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <segmentDelimiter>\r</segmentDelimiter>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.4.2">
            <splitType>MSH_Segment</splitType>
            <batchScript></batchScript>
          </batchProperties>
          <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.4.2">
            <segmentDelimiter>\r</segmentDelimiter>
            <successfulACKCode>AA</successfulACKCode>
            <successfulACKMessage></successfulACKMessage>
            <errorACKCode>AE</errorACKCode>
            <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
            <rejectedACKCode>AR</rejectedACKCode>
            <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
            <msh15ACKAccept>false</msh15ACKAccept>
            <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
          </responseGenerationProperties>
          <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.4.2">
            <successfulACKCode>AA,CA</successfulACKCode>
            <errorACKCode>AE,CE</errorACKCode>
            <rejectedACKCode>AR,CR</rejectedACKCode>
            <validateMessageControlId>true</validateMessageControlId>
            <originalMessageControlId>Destination_Encoded</originalMessageControlId>
            <originalIdMapVariable></originalIdMapVariable>
          </responseValidationProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.2">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.2">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.2">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.2">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.2">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.2">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules/>
      </filter>
      <transportName>Channel Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>false</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>3</metaDataId>
      <name>FHIR_submit</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <host>${SparkURL}</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>post</method>
        <headers class="linked-hash-map"/>
        <parameters class="linked-hash-map"/>
        <responseXmlBody>true</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes>application/xml</responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>false</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
        <username></username>
        <password></password>
        <content>${ORUBundle}</content>
        <contentType>application/xml</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>Construct Bundle</name>
            <script>var resBundle = &lt;Bundle xmlns=&quot;http://hl7.org/fhir&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;
		&lt;type value=&quot;message&quot;/&gt;
	&lt;/Bundle&gt;;

// Patient resource
default xml namespace = &quot;http://hl7.org/fhir&quot;;
var resPatient = new XML(&quot;&lt;entry&gt;&lt;resource&gt;&quot; + channelMap.get(&quot;Patient&quot;) + &quot;&lt;/resource&gt;&lt;/entry&gt;&quot;);
resBundle.appendChild(resPatient);

// DiagnosticReport resource
addEntry(&quot;DiagnosticReport&quot;);

// Practitioner resource for Ordering Provider
addEntry(&quot;Practitioner&quot;);

// Specimen resource
addEntry(&quot;Specimen&quot;);

// Binary resourse with original HL7v2 ORU_R01 message
default xml namespace = &quot;http://hl7.org/fhir&quot;;
var resBinary = new XML(&quot;&lt;entry&gt;&lt;resource&gt;&quot; + globalChannelMap.get(&quot;Binary&quot;) + &quot;&lt;/resource&gt;&lt;/entry&gt;&quot;);
resBinary.resource.Binary.id.@value = &quot;oru-r01-&quot; + channelMap.get(&quot;MessageControlID&quot;);
resBundle.appendChild(resBinary);

// Bundle settings
//resBundle.id.@value = channelMap.get(&quot;MessageControlID&quot;);</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>var resBundle = &lt;Bundle xmlns=&quot;http://hl7.org/fhir&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;
		&lt;type value=&quot;message&quot;/&gt;
	&lt;/Bundle&gt;;

// Patient resource
default xml namespace = &quot;http://hl7.org/fhir&quot;;
var resPatient = new XML(&quot;&lt;entry&gt;&lt;resource&gt;&quot; + channelMap.get(&quot;Patient&quot;) + &quot;&lt;/resource&gt;&lt;/entry&gt;&quot;);
resBundle.appendChild(resPatient);

// DiagnosticReport resource
addEntry(&quot;DiagnosticReport&quot;);

// Practitioner resource for Ordering Provider
addEntry(&quot;Practitioner&quot;);

// Specimen resource
addEntry(&quot;Specimen&quot;);

// Binary resourse with original HL7v2 ORU_R01 message
default xml namespace = &quot;http://hl7.org/fhir&quot;;
var resBinary = new XML(&quot;&lt;entry&gt;&lt;resource&gt;&quot; + globalChannelMap.get(&quot;Binary&quot;) + &quot;&lt;/resource&gt;&lt;/entry&gt;&quot;);
resBinary.resource.Binary.id.@value = &quot;oru-r01-&quot; + channelMap.get(&quot;MessageControlID&quot;);
resBundle.appendChild(resBinary);

// Bundle settings
//resBundle.id.@value = channelMap.get(&quot;MessageControlID&quot;);</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>1</sequenceNumber>
            <name>Send to Left Side</name>
            <script>//logger.debug(&quot;Bundle: &quot; + resBundle.toString());

channelMap.put(&quot;ORUBundle&quot;, resBundle.toString());</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>//logger.debug(&quot;Bundle: &quot; + resBundle.toString());

channelMap.put(&quot;ORUBundle&quot;, resBundle.toString());</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>2</sequenceNumber>
            <name>Add Entry function</name>
            <script>/**
	Constructs multiple resource entries from the storred array.
	This function uses the global resBundle variable.

	@param {String} arrName - array name to extract from the channel map
*/
function addEntry(arrName) {
	var arrResource = channelMap.get(arrName);
	for (var i = 0; i &lt; arrResource.length; i++) {
		default xml namespace = &quot;http://hl7.org/fhir&quot;;
		var resource = new XML(&quot;&lt;entry&gt;&lt;resource&gt;&quot; + arrResource[i] + &quot;&lt;/resource&gt;&lt;/entry&gt;&quot;);
		resBundle.appendChild(resource);	
	}
	channelMap.remove(arrName);
	arrResource.length = 0;
}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>/**
	Constructs multiple resource entries from the storred array.
	This function uses the global resBundle variable.

	@param {String} arrName - array name to extract from the channel map
*/
function addEntry(arrName) {
	var arrResource = channelMap.get(arrName);
	for (var i = 0; i &lt; arrResource.length; i++) {
		default xml namespace = &quot;http://hl7.org/fhir&quot;;
		var resource = new XML(&quot;&lt;entry&gt;&lt;resource&gt;&quot; + arrResource[i] + &quot;&lt;/resource&gt;&lt;/entry&gt;&quot;);
		resBundle.appendChild(resource);	
	}
	channelMap.remove(arrName);
	arrResource.length = 0;
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>HL7V2</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.4.2">
            <handleRepetitions>true</handleRepetitions>
            <handleSubcomponents>true</handleSubcomponents>
            <useStrictParser>true</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <stripNamespaces>true</stripNamespaces>
            <segmentDelimiter>\r</segmentDelimiter>
            <convertLineBreaks>true</convertLineBreaks>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.4.2">
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <segmentDelimiter>\r</segmentDelimiter>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.4.2">
            <splitType>MSH_Segment</splitType>
            <batchScript></batchScript>
          </batchProperties>
          <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.4.2">
            <segmentDelimiter>\r</segmentDelimiter>
            <successfulACKCode>AA</successfulACKCode>
            <successfulACKMessage></successfulACKMessage>
            <errorACKCode>AE</errorACKCode>
            <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
            <rejectedACKCode>AR</rejectedACKCode>
            <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
            <msh15ACKAccept>false</msh15ACKAccept>
            <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
          </responseGenerationProperties>
          <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.4.2">
            <successfulACKCode>AA,CA</successfulACKCode>
            <errorACKCode>AE,CE</errorACKCode>
            <rejectedACKCode>AR,CR</rejectedACKCode>
            <validateMessageControlId>true</validateMessageControlId>
            <originalMessageControlId>Destination_Encoded</originalMessageControlId>
            <originalIdMapVariable></originalIdMapVariable>
          </responseValidationProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.2">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.2">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>Validate Spark Server response</name>
            <script>var resp =  $(&apos;responseStatusLine&apos;);

//logger.info(&quot;ORU Processing: Destination - Response - &quot; + msg.toString());
//logger.info(&quot;ORU Processing: Destination - Response - &quot; + resp);</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>var resp =  $(&apos;responseStatusLine&apos;);

//logger.info(&quot;ORU Processing: Destination - Response - &quot; + msg.toString());
//logger.info(&quot;ORU Processing: Destination - Response - &quot; + resp);</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.2">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.2">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.2">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.2">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules/>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>false</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data

message = stripNonValidXMLChars(message);

return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data

globalMap.put(&quot;ORUProcessingChannelId&quot;, channelId);

return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.4.2">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>false</storeAttachments>
    <tags class="linked-hash-set">
      <string>CURRENT</string>
    </tags>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.4.2">
      <className>com.mirth.connect.server.attachments.javascript.JavaScriptAttachmentHandlerProvider</className>
      <type>JavaScript</type>
      <properties>
        <entry>
          <string>javascript.script</string>
          <string>// Modify the message variable below to create attachments

// Create Binary resourse with the original HL7v2 message
var resBinary = &lt;Binary&gt;				
				&lt;id value=&quot;&quot;/&gt;				
				&lt;contentType value=&quot;application/hl7-v2&quot;/&gt;
				&lt;content value=&quot;&quot;/&gt;
			&lt;/Binary&gt;;

// Encode original ORU message
var bytes = new java.lang.String(message.toString()).getBytes();
resBinary.content.@value = FileUtil.encode(bytes).replaceAll(&apos;\r\n|\r|\n&apos;, &apos;&apos;);

// Store to be processed by the FHIR_submit destination
globalChannelMap.put(&quot;Binary&quot;, resBinary.toString());


return message;</string>
        </entry>
      </properties>
    </attachmentProperties>
    <archiveEnabled>true</archiveEnabled>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <codeTemplateLibraries>
    <codeTemplateLibrary version="3.4.2">
      <id>aa9b2404-fbde-4bbe-851f-a0a19ca6ae36</id>
      <name>DEX Library</name>
      <revision>5</revision>
      <lastModified>
        <time>1493415645281</time>
        <timezone>UTC</timezone>
      </lastModified>
      <description>Last updated: March 25, 2017</description>
      <includeNewChannels>true</includeNewChannels>
      <enabledChannelIds>
        <string>b73a73d9-b589-4dd7-8a5b-d24fe9ed522d</string>
        <string>afa52ba3-bd0a-4634-8ae5-b9c91c4dc3b9</string>
        <string>9eeed45d-4613-4501-86f1-236e91808742</string>
        <string>4c7bc0bd-aede-4e90-9ce8-cde50750f1e8</string>
        <string>041540bc-16e7-43fe-a9eb-1ca3c5ea17db</string>
        <string>ae149084-1aaa-4867-a7e3-b66860874f05</string>
        <string>829fe0c9-9229-4cb3-9cc3-1250213f284f</string>
        <string>e0f422e1-0550-40f1-8a37-e148e0b5f636</string>
      </enabledChannelIds>
      <disabledChannelIds>
        <string>f24a2bfd-8f45-4170-b6d6-6410f426ec66</string>
      </disabledChannelIds>
      <codeTemplates>
        <codeTemplate version="3.4.2">
          <id>5e2f9cc3-3b23-4967-9fd1-6a9c602dd29e</id>
          <name>Convert FHIR to HL7v2 code</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077779</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Converts FHIR code to HL7v2 code as defined by the conversion table according to the HL7v2 specification

	@param {String} table - HL7v2 Table code as per specification
	@param {String] value - value to convert
	@return {String} return code according to conversion table
*/
function convertTable(table, value) {

	switch(table) {
		
		// Table 0001 - Administrative Sex
		case &quot;0001&quot;:
			if (value.toString() == &quot;male&quot;) return &quot;M&quot;
			else if (value.toString() == &quot;female&quot;) return &quot;F&quot;
			else if (value.toString() == &quot;other&quot;) return &quot;O&quot;
			else return &quot;U&quot;;
			break;
	}

	return &quot;&quot;;
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>025ece06-d4ad-47d7-8047-67acaf3072a5</id>
          <name>Convert HL7 Date Time</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077689</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Converts date, time and time zone from HL7v2 to ISO 8601 (JSON) format.
	Possible input string format: yyyymmddhhmm[ss[.s[s[s[s]]]]][+/-zzzz]

	@param {String} date - datetime to be converted
	@return {String} return JSON representation of the datetime
*/
function convertHL7DateTime(datetime) {

/*
	Format: yyyymmddhhmm[ss[.s[s[s[s]]]]][+/-zzzz]
	The date and time elements are populated as follows:
	yyyy = Required
	mm = Required if yyyy is not 0000.
	dd = Required if yyyy is not 0000.
	hh = Required if yyyy is not 0000.
	mm = Required if yyyy is not 0000.
	[ss[.s[s[s[s]]]]] = Conditional. Optional if yyyy is not 0000.
	[+/-zzzz] = Optional
*/


	if (datetime == null || datetime.length == 0 || typeof datetime === &quot;undefined&quot;) return &quot;&quot;;

	try {
		var strDateTime = new Packages.java.lang.StringBuffer(datetime.toString());
	
		// Extract time zone
		var index;
		var symbol;
		var timeZone;
		
		if (strDateTime.indexOf(&quot;-&quot;) &gt; 0) {
			index = strDateTime.indexOf(&quot;-&quot;);
		} else if (strDateTime.indexOf(&quot;+&quot;) &gt; 0) {
			index = strDateTime.indexOf(&quot;+&quot;);
		} else
			index = -1;
	
		if (index &gt; 0) {		
			symbol = strDateTime.substring(index, index+1);
			timeZone = new Packages.java.lang.StringBuffer(strDateTime.substring(index+1));
			if (timeZone.length() &gt; 2)
				timeZone.insert(2,&quot;:&quot;);
			strDateTime.delete(index, strDateTime.length());		
		} else {
			symbol = &quot;&quot;;
			timeZone = &quot;&quot;;
		}
	
		// Extract decimal fraction of a second
		var fraction = strDateTime.indexOf(&quot;.&quot;);
		var milliseconds;
		if (fraction &gt; 0) {
			milliseconds = strDateTime.substring(fraction, strDateTime.length());
			strDateTime.delete(fraction, strDateTime.length());
		} else {
			milliseconds = &quot;&quot;;
		}
	
		// Convert the main part
		var jsonDateTime = new Packages.java.lang.StringBuffer(strDateTime);
		
		// yyyyMMdd
		if (strDateTime.length() &gt;= &quot;yyyyMMdd&quot;.length) {
			jsonDateTime.insert(4,&quot;-&quot;);
			jsonDateTime.insert(7,&quot;-&quot;);
		}
	
		// yyyyMMddhh
		if (strDateTime.length() &gt;= &quot;yyyyMMddhh&quot;.length) {
			jsonDateTime.insert(10,&quot;T&quot;);
		}
	
		// yyyyMMddhhmm
		if (strDateTime.length() &gt;= &quot;yyyyMMddhhmm&quot;.length) {
			jsonDateTime.insert(13,&quot;:&quot;);
			
		}
		
		// yyyymmddhhmmss
		if (strDateTime.length() &gt;= &quot;yyyymmddhhmmss&quot;.length) {
			jsonDateTime.insert(16,&quot;:&quot;);		
		}
	
	} catch(ex) {
		jsonDateTime = &quot;0000-00-00&quot;
		milliseconds = &quot;&quot;;
		symbol = &quot;&quot;;
		timeZone = &quot;&quot;;
		logger.error(&quot;convertHL7DateTime(&quot; + datetime + &quot;) exception: &quot; + ex);	
	} finally {
		return jsonDateTime.toString() + milliseconds.toString() + symbol.toString() + timeZone.toString();
	}
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>3d9a32c6-2d37-49d2-afe4-e309356085b7</id>
          <name>Convert JSON Date Time</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609078075</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Converts date, time and time zone from ISO 8601 (JSON) to HL7v2 format.
	Possible input string format: yyyy-mm-ddThh:mm:ss.nnnnnn+|-hh:mm

	@param {String} date - datetime to be converted
	@return {String} return HL7v2 representation of the datetime
*/
function convertJSONDateTime(datetime) {

/*
	Format: yyyy-mm-dd[Thh:mm[:ss[.nnnnnn[+|-hh:mm]]]]
*/

	var date;
	var time;
	
	var arrDateTime = datetime.split(&quot;T&quot;);
	
	if (arrDateTime.length == 1) {
		date = arrDateTime[0];
		time = &quot;&quot;;
	} else if (arrDateTime.length == 2) {
		date = arrDateTime[0];
		time = arrDateTime[1];
	} else 
		return &quot;&quot;;

	date = date.replace(/\-/g, &quot;&quot;);
	time = time.replace(/\:/g, &quot;&quot;);

	return date + time;

}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>a758235b-06a9-4c9d-8256-e9cd70d38bb1</id>
          <name>Convert Phone</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077936</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Inserts hyphens into the phone number if it is 7 digits in length

	@param {String} phone - initial string to convert
	@return {String} return phone number
*/
function convertPhone(phone) {

	try {
		var strPhone = new Packages.java.lang.StringBuffer(phone.toString());	
		
		if (strPhone.length() == 7) {			
			strPhone.insert(3,&quot;-&quot;);
			strPhone.insert(6,&quot;-&quot;);
			return strPhone.toString();			
		} else 
			return phone.toString();
		
	} catch(ex) {
		return phone.toString();		
	} 
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>dc6049ce-02d8-4022-b10e-6bc9978ab3bd</id>
          <name>Convert XML to JSON</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077867</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Converts a string in XML format into its JSON representation.
	This function requires org.json.jar to be deployed to the /custom-lib folder on Mirth

	@param {String} input - A string in XML format
	@return {String} return a string representing initial XML feed but in JSON format
*/
function convertXMLtoJSON(input) {
	var strJSON = Packages.org.json.XML.toJSONObject(input.toString());
	return strJSON.toString(2);	
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>2f174050-3927-4c30-a984-26c98e29bd61</id>
          <name>Converts Administrative Gender</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609078148</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Verifies and converts HL7v2 administrative gender value to FHIR value set defined by
	http://hl7.org/fhir/administrative-gender
	
	@param {String} code - HL7v2 PID.8 [Administrative Sex] code
	@return {String} return FHIR value set code
*/
function getGenderValue(code) {

	var gender;

	switch(code) {
		case &quot;M&quot;:
			gender = &quot;male&quot;;
			break;
		case &quot;F&quot;:
			gender = &quot;female&quot;;
		 	break;
		case &quot;O&quot;:
		case &quot;A&quot;:
		case &quot;N&quot;:
			gender = &quot;other&quot;;
			break; 	
		default:
			gender = &quot;unknown&quot;;		 	
	}

	return gender;	
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>943f9793-83e0-403a-84e9-40ea3fcd92d6</id>
          <name>Converts Phone string to XTN</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609078031</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Converts phone number string with caret dividers into XTN data type.
	Supported formats: 1-314-8727127 or 314-8727127
	Returned formats: ^^PH^^1^314^8727127 or ^^PH^^^314^8727127 or ^^PH^^^^8727127

	@param {String} phone - Phone string in one of the supported format
	@return {String} return Phone string as per XTN data type
*/
function convertPhoneXTN(phone) {

	phone = phone.replace(/\+/g,&quot;&quot;);

	// XTN data type example: ^^PH^^^734^6777777

	//	    916-3000		\d{3}-\d{4}			^^PH^^^^9163000
	//	    9163000		\d{7}				^^PH^^^^9163000
	//   972-9163000		\d{3}-\d{7}			^^PH^^^972^9163000
	//   972-916-3000  		\d{3}-\d{3}-\d{4}		^^PH^^^972^9163000
	// 1-972-9163000 		\d{1}-\d{3}-\d{7}		^^PH^^1^972^9163000
	// 1-972-916-3000 		\d{1}-\d{3}-\d{3}-\d{4}	^^PH^^1^972^9163000

	var arrPhone = phone.split(&quot;-&quot;);
	if (arrPhone.length &lt;= 1) return &quot;^^^^^^^^&quot; + phone;

	// 1-972-9163000
	if (phone.match(/\d{1}-\d{3}-\d{7}/) != null) {
		// ^^PH^^1^734^6777777
		return &quot;^^PH^^&quot; + arrPhone[0] + &quot;^&quot; + arrPhone[1] + &quot;^&quot; + arrPhone[2];

	// 1-972-916-3000	
	} else if (phone.match(/\d{1}-\d{3}-\d{3}-\d{4}/) != null) {
		// ^^PH^^1^734^6777777
		return &quot;^^PH^^&quot; + arrPhone[0] + &quot;^&quot; + arrPhone[1] + &quot;^&quot; + arrPhone[2] + arrPhone[3];

	// 972-9163000	
	} else if (phone.match(/\d{3}-\d{7}/) != null) {
		// ^^PH^^^734^6777777
		return &quot;^^PH^^^&quot; + arrPhone[0] + &quot;^&quot; + arrPhone[1];

	// 972-916-3000
	} else if (phone.match(/\d{3}-\d{3}-\d{4}/) != null) {
		// ^^PH^^^972^9163000
		return &quot;^^PH^^^&quot; + arrPhone[0] + &quot;^&quot; + arrPhone[1] + arrPhone[2];

	// 9163000
	} else if (phone.match(/\d{7}/) != null) {
		// ^^PH^^^^9163000
		return &quot;^^PH^^^^&quot; + arrPhone[0];

	// 916-3000
	} else if (phone.match(/\d{3}-\d{4}/) != null) {
		// ^^PH^^^^9163000
		return &quot;^^PH^^^^&quot; + arrPhone[0] + arrPhone[1];
		
	} else
		return &quot;^^^^^^^^&quot; + phone; 

}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>58a19daa-aada-46ac-ae7f-2b5e5848405b</id>
          <name>Create OperationOutcome resource</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077663</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Creates OperationOutcome resource to inform about validation errors
	
	@param {Array} error - A list of errors or comments
	@param {Object} issue - An object with severity, code and details associated with outcome
	@param {Object} messages - An object with inbounb and outbound messages to be logged
	@param {String} uuid - A string with uuid to pair request and response FHIR feeds	
	@param {String} format - A resource output format (xml | json)	
	@return {String} outcome - OperationOutcome resource in required format
*/
function getOperationOutcome(error, issue, messages, uuid, format) {

	// Expected issue object format:
	// var issue = {severity: &quot;&quot;, code: &quot;&quot;, details: &quot;&quot;};

	// Expected messages object format:
	// var messages = {request: &quot;&quot;, resp: &quot;&quot;};

	// Namespaces are required to validate against FHIR XML Schema
	if (format.toUpperCase() != &quot;JSON&quot;) 
		default xml namespace = &quot;http://hl7.org/fhir&quot;;
		
	var outcome = &lt;OperationOutcome&gt;
				&lt;id value=&quot;responsestatus&quot;/&gt;
				&lt;extension url=&quot;request&quot;&gt;
					&lt;valueBase64Binary value=&quot;&quot;/&gt;
				&lt;/extension&gt;
				&lt;extension url=&quot;response&quot;&gt;
					&lt;valueBase64Binary value=&quot;&quot;/&gt;
				&lt;/extension&gt;
				&lt;issue&gt;
					&lt;severity value=&quot;&quot;/&gt;
					&lt;code value=&quot;&quot;/&gt;
					&lt;details&gt;
						&lt;text value=&quot;&quot;/&gt;
					&lt;/details&gt;
				&lt;/issue&gt;
			&lt;/OperationOutcome&gt;;

	if (uuid != null &amp;&amp; uuid != undefined &amp;&amp; uuid.toString() != &quot;&quot;) 
		outcome.id.@value = &quot;responsestatus&quot; + uuid;
		
	outcome.issue.severity.@value = issue.severity;
	outcome.issue.code.@value = issue.code;
	outcome.issue.details.text.@value = issue.details;

	// xhtml namespace is intentionally removed
	var text = &lt;text&gt;
			    	&lt;status value=&quot;generated&quot;/&gt;
			    	&lt;div/&gt;
			  &lt;/text&gt;;

	text.div.* = new XMLList();
	error.forEach(function(n){
	  text.div.* += new XML(&quot;&lt;p&gt;&quot; + n +&quot;&lt;/p&gt;&quot;);
	});

	outcome.id += text;

	// If request or response messages are available, encode them
	if (messages.request != undefined &amp;&amp; messages.request.toString() != &quot;&quot;) 
		outcome.extension.(@url == &quot;request&quot;)[0].valueBase64Binary.@value = getBase64Encoded(messages.request.toString());	
	else
		delete outcome.extension.(@url == &quot;request&quot;)[0];


	if (messages.resp != undefined &amp;&amp; messages.resp.toString() != &quot;&quot;) 	
		outcome.extension.(@url == &quot;response&quot;)[0].valueBase64Binary.@value = getBase64Encoded(messages.resp.toString());
	else
		delete outcome.extension.(@url == &quot;response&quot;)[0];

	// Convert to a requested format
	if (format.toUpperCase() == &quot;JSON&quot;) {
		return convertXMLtoJSON(outcome.toString());		
	} else {
		// Namespace is required to validate FHIR XML
		outcome = outcome.toString().replace(&apos;&lt;div&gt;&apos;, &apos;&lt;div  xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&apos;);
		return outcome.toString();
	}
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>52360391-d3f2-4714-8bd3-98c53c85c387</id>
          <name>Fix HL7v2 node order</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077814</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.
	@param {String} node - The node to be fixed
	@return {String} return - E4X node
*/
/*
	Author: Nick Rupley
	Date Modified: 4/18/2012
*/
function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

// Helper function for fixHL7NodeOrder
function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>711f9e92-9872-4718-83aa-f8e62e3885b2</id>
          <name>Get Base64 encoded string</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077840</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Encodes given string into a Base64 string.

	@param {String} strData - String to be encoded
	@return {String} return Base64 encoded string
*/
function getBase64Encoded(strData) {
	
	try {
		
		if (null == strData) strData = &apos;&apos;;
		var byteData = new Packages.java.lang.String(strData).getBytes();
		return FileUtil.encode(byteData).replaceAll(&apos;\r\n|\r|\n&apos;, &apos;&apos;);

	} catch(err) {
		logger.error(err);
		return &quot;&quot;;
	}
}
</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>872dae30-3381-458c-a4e5-4f412e21b1fa</id>
          <name>Get HL7v2 Code Description</name>
          <revision>1</revision>
          <lastModified>
            <time>1490476779449</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Retrieve code description for a given HL7v2 table (to be used for ORC, OBR and OBX segments)

	@param {String} table - HL7v2 Table code as per specification
	@param {String] value - value to convert
	@return {String} return code description
*/
function getHL7v2CodeDescription(table, value) {

	switch(table) {
		
		// Table 0038 - Order Status
		case &quot;0038&quot;:
			if (&quot;CM&quot; === value.toString()) return &quot;Order complete&quot;
			else if (&quot;IP&quot; === value.toString()) return &quot;Order incomplete, or contains pending items&quot;
			else if (&quot;CA&quot; === value.toString()) return &quot;Order was canceled&quot;
			else if (&quot;DC&quot; === value.toString()) return &quot;Order was discontinued&quot;
			else if (&quot;ER&quot; === value.toString()) return &quot;Error, order not found&quot;
			else if (&quot;HD&quot; === value.toString()) return &quot;Order is on hold&quot;
			else if (&quot;RP&quot; === value.toString()) return &quot;Order has been replaced&quot;
			else if (&quot;SC&quot; === value.toString()) return &quot;In process, scheduled&quot;
			else if (&quot;&quot; === value.toString()) return &quot;&quot;
			else return &quot;&quot;;
			break;

		// Table 0123 - Result Status
		case &quot;0123&quot;:
			if (&quot;F&quot; === value.toString()) return &quot;Final results&quot;
			else if (&quot;A&quot; === value.toString()) return &quot;Partial results&quot;
			else if (&quot;C&quot; === value.toString()) return &quot;Correction to results&quot;
			else if (&quot;I&quot; === value.toString()) return &quot;No results available. The specimen was received, but the procedure is incomplete.&quot;
			else if (&quot;O&quot; === value.toString()) return &quot;Specimen not yet received&quot;
			else if (&quot;P&quot; === value.toString()) return &quot;Preliminary results&quot;
			else if (&quot;R&quot; === value.toString()) return &quot;Results stored&quot;
			else if (&quot;S&quot; === value.toString()) return &quot;No results available. The procedure is scheduled, but has not been performed.&quot;
			else if (&quot;X&quot; === value.toString()) return &quot;No results available. The order was canceled.&quot;
			else return &quot;&quot;;		
			break;

		// Table 0085 - Observation Result Status
		case &quot;0085&quot;:
			if (&quot;F&quot; === value.toString()) return &quot;Final results; can only be changed with a corrected result.&quot;
			else if (&quot;D&quot; === value.toString()) return &quot;Deletes the OBX record&quot;
			else if (&quot;I&quot; === value.toString()) return &quot;Specimen in lab; results pending.&quot;
			else if (&quot;N&quot; === value.toString()) return &quot;Not asked; used to affirmatively document that the observation identified in the OBX was not sought when the universal service ID in OBR.04 implies that it would be sought.&quot;
			else if (&quot;O&quot; === value.toString()) return &quot;Order detail description only (no result)&quot;
			else if (&quot;P&quot; === value.toString()) return &quot;Preliminary results&quot;
			else if (&quot;R&quot; === value.toString()) return &quot;Results entered but not verified&quot;
			else if (&quot;X&quot; === value.toString()) return &quot;Results cannot be obtained for this observation&quot;
			else if (&quot;U&quot; === value.toString()) return &quot;Results status change to final without retransmitting results already sent as preliminary. For example, radiology changes status from preliminary to final.&quot;
			else if (&quot;W&quot; === value.toString()) return &quot;Post original as wrong. For example, transmitted for wrong patient.&quot;
			else return &quot;&quot;;
			break;
	}

	return &quot;&quot;;
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>53e03352-fda6-455a-bc6a-54f1b3287838</id>
          <name>Get NTE segment</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077721</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Builds NTE segment with the comment entry from a single /text/div/p resource element
	Expected comment entry object is {&quot;class&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;}

	// TODO: may require a flag to NOT restrict comment line longer than 60 chars as required for the Order message

	@param {String} entry - JSON object with comment entries
	@param {String} count - total NTE segment count i.e., NTE.1 [Set ID]	
	@return {String} return NTE segment string in XML format
*/
function getNTESegment(entry, count) {

	if (entry != undefined) {

		var nte = &lt;NTE&gt;
					&lt;NTE.1&gt;
						&lt;NTE.1.1&gt;&lt;/NTE.1.1&gt;
					&lt;/NTE.1&gt;
					&lt;NTE.2&gt;
						&lt;NTE.2.1&gt;&lt;/NTE.2.1&gt;
					&lt;/NTE.2&gt;
					&lt;NTE.3&gt;
						&lt;NTE.3.1&gt;&lt;/NTE.3.1&gt;
					&lt;/NTE.3&gt;
				&lt;/NTE&gt;;

		// NTE.1 [Set ID]		
		nte[&apos;NTE.1&apos;][&apos;NTE.1.1&apos;] = count;
			
		// NTE.2 [Source of Comment]
		nte[&apos;NTE.2&apos;][&apos;NTE.2.1&apos;] = entry.class.toString();

		// NTE.3 [Comment]
		// Comment shall be no longer than 60 characters for the OML_O21 Submit Order message
		if (entry.content.toString().length &gt; 60)
			entry.content = entry.content.toString().substring(0,60);
			
		nte[&apos;NTE.3&apos;][&apos;NTE.3.1&apos;] = entry.content.toString();

		return nte.toString();
		
	} else 
		return &quot;&quot;;
		
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>0f2c8346-d098-49b3-8e97-184eef9fc7b4</id>
          <name>HTTP Response Code indications</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077971</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Add the HTTP response status code description to the HTTP code

	@param {Integer} code - HTTP response status code
	@return {String} return HTTP response status code and its description
*/
function getHttpCodeDescription(code) {

	var text;
	
	switch(code) {
		case 200:
			text = &quot;OK&quot;;
			break;
		case 400:
			text = &quot;The request was not properly constructed&quot;;
			break;
		case 401:
			text = &quot;The user credentials submitted are not authorized&quot;;
			break;
		case 403:
			text = &quot;The user name submitted does not have permission to access the Results RESTful web service&quot;;
			break;
		case 404:
			text = &quot;The user credentials submitted are not authorized&quot;;
			break;
		case 500:
			text = &quot;An internal server error occurred&quot;;
			break;	        
		default:
			text = &quot;This response status code is undefined in the DEX spec&quot;;
	}

	return (code + &quot; - &quot; + text);
	
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>5032a64e-7da6-4885-83e2-348e5ab75600</id>
          <name>Parse person&apos;s name node</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077624</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Process Person.name element with zero or multiple given names with possible DEX name length limitation

	@param {Object} item - JSON representation of /resource/Person/name node
	@param {Boolean} lengthLimit - If person&apos;s name limitation applies according to DEX spec (true - apply, false - does not)	
	@return {Object} return name parts object with family and given names
*/
function processPersonName(item, lengthLimit) {

	var nameParts = {family: &quot;&quot;, given1: &quot;&quot;, given2: &quot;&quot;};

	if (item.family != null &amp;&amp; item.family != undefined) {
		
		// Last name of the person
		var family = item.family.value.toString();
		
		// If Quest&apos;s length limit applies
		if (lengthLimit) {
			// The last name can be a maximum of 20 characters. (p.201)
			if (family.length &gt; 20) 
				family = family.substring(0, 20);
			// The entire patient name cannot exceed 24 characters (p.201)
			var limit = 24 - family.length;
		}
		nameParts.family = family;
	}

	if (item.given == null || item.given == undefined) return nameParts;
		
	if (item.given.length != undefined) {
		
		var count = 0;
		item.given.forEach(function(entry){
			var given = entry.value.toString();
			
			if (given.length &gt; 0) {					
				if (0 == count) {
					// The first name is limited to the difference between the number of characters in the last name and 24.				
					if (given.length &gt; limit &amp;&amp; lengthLimit) given = given.substring(0, limit);
					nameParts.given1 = given;
					limit -= given.length;
				} else {
					// if the limit is exceeded, a minimum of the first character of the middle initial is always returned in the result message.
					if (given.length &gt; limit &amp;&amp; lengthLimit) given = given.substring(0, 1);
					nameParts.given2 = given;
				}
			}
			count++;
		});			
	} else {
		var given = item.given.value.toString();
		if (given.length &gt; limit &amp;&amp; lengthLimit) given = given.substring(0, limit);
		nameParts.given1 = given;
	}

	return nameParts;
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>08f30179-5465-4895-a2d3-4933f182035e</id>
          <name>Remove illegal XML chanracters</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609078114</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Strip non valid XML characters from a given text string.
	CAUTION: This is not a full-fledged function for XML input sanitization 

	@param {String} text - text string that may contain illegal XML characters
	@return {String} return text string with illegal XML characters replaced
*/
function stripNonValidXMLChars(text) {

	if (text == null || text == undefined || text.toString().length == 0) return &quot;&quot;;

	//text = comment.replace(/&amp;/g,&quot;&amp;amp;&quot;);// ampersand - (SN) temporary disabled
	text = text.replace(/&lt;/g,&quot;&amp;lt;&quot;); // less than
	text = text.replace(/&gt;/g,&quot;&amp;gt;&quot;); // greater than
	text = text.replace(/&apos;/g,&quot;&amp;apos;&quot;); // single quotes
	text = text.replace(/&quot;/g,&quot;&amp;apos;&quot;); // double quotes

	// (SN) Issue #6, #11: unexpected &quot;%&quot; in field
	text = text.replace(/\|%/g, &quot;|&quot;);

	return text;
}</code>
        </codeTemplate>
        <codeTemplate version="3.4.2">
          <id>15559e88-2f64-415a-8544-9cbbc2742c79</id>
          <name>Verifies if Lab test is STD</name>
          <revision>1</revision>
          <lastModified>
            <time>1489609077902</time>
            <timezone>UTC</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
            </delegate>
          </contextSet>
          <code>/**
	Verifies if the submitted Lab test code is in the list of STD lab tests

	@param {String} code - Lab test code
	@return {String} return true if Lab test code in the list of STD codes, false otherwise
*/
function isSTDLabTest(code) {

	// Check for LOINC codes
	switch(code) {
		// 86631, 86632 Chlamydia trachomatis Antibodies 
		case &quot;1833274&quot;:
		case &quot;1832970&quot;:
		case &quot;1833579&quot;:
		case &quot;44079-2&quot;:
		// 87591 Neisseria gonorrhoeae
		case &quot;43305-2&quot;:
		// 86704	Hepatitis A
		case &quot;13951-9&quot;:
		// 87340	Hepatitis B
		case &quot;1203841&quot;:
		case &quot;2193342&quot;:
		case &quot;10900-9&quot;:
		case &quot;13952-7&quot;:
		// 81001	Hepatitis C (Urinalysis, Complete)
		case &quot;13955-0&quot;:
		case &quot;48159-8&quot;:
		// 86695	Herpes Simplex Virus 1 (IgG)
		case &quot;1207706&quot;:
		// 86696	Herpes Simplex Virus 2 (IgG)
		case &quot;1208621&quot;:
		// 86592	VDRL, Serum (Syphilis)
		case &quot;1239118&quot;:
		// 86701	HIV-1 Antibody
		case &quot;29893-5&quot;:
		// 86702	HIV-2 Antibody
		case &quot;30361-0&quot;:
		// 87389	HIV-1/2 Antig. and Antib.,4th Gen
		case &quot;56888-1&quot;:
			return true;
			break;
	}

	return false;
	
}</code>
        </codeTemplate>
      </codeTemplates>
    </codeTemplateLibrary>
  </codeTemplateLibraries>
  <dependentIds/>
</channel>